"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoolState = exports.WarmPool = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("@aws-cdk/core");
const autoscaling_generated_1 = require("./autoscaling.generated");
/**
 * Define a warm pool
 */
class WarmPool extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: core_1.Lazy.string({ produce: () => core_1.Names.uniqueId(this) }),
        });
        jsiiDeprecationWarnings._aws_cdk_aws_autoscaling_WarmPoolProps(props);
        if (props.maxGroupPreparedCapacity && props.maxGroupPreparedCapacity < -1) {
            throw new Error('\'maxGroupPreparedCapacity\' parameter should be greater than or equal to -1');
        }
        if (props.minSize && props.minSize < 0) {
            throw new Error('\'minSize\' parameter should be greater than or equal to 0');
        }
        new autoscaling_generated_1.CfnWarmPool(this, 'Resource', {
            autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,
            instanceReusePolicy: props.reuseOnScaleIn !== undefined ? {
                reuseOnScaleIn: props.reuseOnScaleIn,
            } : undefined,
            maxGroupPreparedCapacity: props.maxGroupPreparedCapacity,
            minSize: props.minSize,
            poolState: props.poolState,
        });
    }
}
exports.WarmPool = WarmPool;
_a = JSII_RTTI_SYMBOL_1;
WarmPool[_a] = { fqn: "@aws-cdk/aws-autoscaling.WarmPool", version: "1.152.0" };
/**
 * The instance state in the warm pool
 */
var PoolState;
(function (PoolState) {
    /**
     * Hibernated
     *
     * To use this state, prerequisites must be in place.
     * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html
     */
    PoolState["HIBERNATED"] = "Hibernated";
    /**
     * Running
     */
    PoolState["RUNNING"] = "Running";
    /**
     * Stopped
     */
    PoolState["STOPPED"] = "Stopped";
})(PoolState = exports.PoolState || (exports.PoolState = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybS1wb29sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FybS1wb29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdDQUFzRDtBQUd0RCxtRUFBc0Q7QUFrRHREOztHQUVHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsZUFBUTtJQUNwQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQW9CO1FBQzVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2YsWUFBWSxFQUFFLFdBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsWUFBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1NBQ25FLENBQUMsQ0FBQzs7UUFFSCxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsSUFBSSxLQUFLLENBQUMsd0JBQXdCLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDekUsTUFBTSxJQUFJLEtBQUssQ0FBQyw4RUFBOEUsQ0FBQyxDQUFDO1NBQ2pHO1FBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsNERBQTRELENBQUMsQ0FBQztTQUMvRTtRQUVELElBQUksbUNBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ2hDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0I7WUFDakUsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLGNBQWMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUN4RCxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7YUFDckMsQ0FBQyxDQUFDLENBQUMsU0FBUztZQUNiLHdCQUF3QixFQUFFLEtBQUssQ0FBQyx3QkFBd0I7WUFDeEQsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztTQUMzQixDQUFDLENBQUM7S0FDSjs7QUF2QkgsNEJBd0JDOzs7QUFFRDs7R0FFRztBQUNILElBQVksU0FrQlg7QUFsQkQsV0FBWSxTQUFTO0lBQ25COzs7OztPQUtHO0lBQ0gsc0NBQXlCLENBQUE7SUFFekI7O09BRUc7SUFDSCxnQ0FBbUIsQ0FBQTtJQUVuQjs7T0FFRztJQUNILGdDQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFsQlcsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFrQnBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGF6eSwgTmFtZXMsIFJlc291cmNlIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IElBdXRvU2NhbGluZ0dyb3VwIH0gZnJvbSAnLi9hdXRvLXNjYWxpbmctZ3JvdXAnO1xuaW1wb3J0IHsgQ2ZuV2FybVBvb2wgfSBmcm9tICcuL2F1dG9zY2FsaW5nLmdlbmVyYXRlZCc7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYSB3YXJtIHBvb2xcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXYXJtUG9vbE9wdGlvbnMge1xuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgaW5zdGFuY2VzIGluIHRoZSBBdXRvIFNjYWxpbmcgZ3JvdXAgY2FuIGJlIHJldHVybmVkIHRvIHRoZSB3YXJtIHBvb2wgb24gc2NhbGUgaW4uXG4gICAqXG4gICAqIElmIHRoZSB2YWx1ZSBpcyBub3Qgc3BlY2lmaWVkLCBpbnN0YW5jZXMgaW4gdGhlIEF1dG8gU2NhbGluZyBncm91cCB3aWxsIGJlIHRlcm1pbmF0ZWRcbiAgICogd2hlbiB0aGUgZ3JvdXAgc2NhbGVzIGluLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgcmV1c2VPblNjYWxlSW4/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgaW5zdGFuY2VzIHRoYXQgYXJlIGFsbG93ZWQgdG8gYmUgaW4gdGhlIHdhcm0gcG9vbFxuICAgKiBvciBpbiBhbnkgc3RhdGUgZXhjZXB0IFRlcm1pbmF0ZWQgZm9yIHRoZSBBdXRvIFNjYWxpbmcgZ3JvdXAuXG4gICAqXG4gICAqIElmIHRoZSB2YWx1ZSBpcyBub3Qgc3BlY2lmaWVkLCBBbWF6b24gRUMyIEF1dG8gU2NhbGluZyBsYXVuY2hlcyBhbmQgbWFpbnRhaW5zXG4gICAqIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGdyb3VwJ3MgbWF4aW11bSBjYXBhY2l0eSBhbmQgaXRzIGRlc2lyZWQgY2FwYWNpdHkuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbWF4IHNpemUgb2YgdGhlIEF1dG8gU2NhbGluZyBncm91cFxuICAgKi9cbiAgcmVhZG9ubHkgbWF4R3JvdXBQcmVwYXJlZENhcGFjaXR5PzogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIG1pbmltdW0gbnVtYmVyIG9mIGluc3RhbmNlcyB0byBtYWludGFpbiBpbiB0aGUgd2FybSBwb29sLlxuICAgKlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICByZWFkb25seSBtaW5TaXplPzogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIGluc3RhbmNlIHN0YXRlIHRvIHRyYW5zaXRpb24gdG8gYWZ0ZXIgdGhlIGxpZmVjeWNsZSBhY3Rpb25zIGFyZSBjb21wbGV0ZS5cbiAgICpcbiAgICogQGRlZmF1bHQgUG9vbFN0YXRlLlNUT1BQRURcbiAgICovXG4gIHJlYWRvbmx5IHBvb2xTdGF0ZT86IFBvb2xTdGF0ZTtcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBhIHdhcm0gcG9vbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFdhcm1Qb29sUHJvcHMgZXh0ZW5kcyBXYXJtUG9vbE9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIEF1dG8gU2NhbGluZyBncm91cCB0byBhZGQgdGhlIHdhcm0gcG9vbCB0by5cbiAgICovXG4gIHJlYWRvbmx5IGF1dG9TY2FsaW5nR3JvdXA6IElBdXRvU2NhbGluZ0dyb3VwO1xufVxuXG4vKipcbiAqIERlZmluZSBhIHdhcm0gcG9vbFxuICovXG5leHBvcnQgY2xhc3MgV2FybVBvb2wgZXh0ZW5kcyBSZXNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBXYXJtUG9vbFByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICBwaHlzaWNhbE5hbWU6IExhenkuc3RyaW5nKHsgcHJvZHVjZTogKCkgPT4gTmFtZXMudW5pcXVlSWQodGhpcykgfSksXG4gICAgfSk7XG5cbiAgICBpZiAocHJvcHMubWF4R3JvdXBQcmVwYXJlZENhcGFjaXR5ICYmIHByb3BzLm1heEdyb3VwUHJlcGFyZWRDYXBhY2l0eSA8IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1xcJ21heEdyb3VwUHJlcGFyZWRDYXBhY2l0eVxcJyBwYXJhbWV0ZXIgc2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAtMScpO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5taW5TaXplICYmIHByb3BzLm1pblNpemUgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1xcJ21pblNpemVcXCcgcGFyYW1ldGVyIHNob3VsZCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMCcpO1xuICAgIH1cblxuICAgIG5ldyBDZm5XYXJtUG9vbCh0aGlzLCAnUmVzb3VyY2UnLCB7XG4gICAgICBhdXRvU2NhbGluZ0dyb3VwTmFtZTogcHJvcHMuYXV0b1NjYWxpbmdHcm91cC5hdXRvU2NhbGluZ0dyb3VwTmFtZSxcbiAgICAgIGluc3RhbmNlUmV1c2VQb2xpY3k6IHByb3BzLnJldXNlT25TY2FsZUluICE9PSB1bmRlZmluZWQgPyB7XG4gICAgICAgIHJldXNlT25TY2FsZUluOiBwcm9wcy5yZXVzZU9uU2NhbGVJbixcbiAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICBtYXhHcm91cFByZXBhcmVkQ2FwYWNpdHk6IHByb3BzLm1heEdyb3VwUHJlcGFyZWRDYXBhY2l0eSxcbiAgICAgIG1pblNpemU6IHByb3BzLm1pblNpemUsXG4gICAgICBwb29sU3RhdGU6IHByb3BzLnBvb2xTdGF0ZSxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBpbnN0YW5jZSBzdGF0ZSBpbiB0aGUgd2FybSBwb29sXG4gKi9cbmV4cG9ydCBlbnVtIFBvb2xTdGF0ZSB7XG4gIC8qKlxuICAgKiBIaWJlcm5hdGVkXG4gICAqXG4gICAqIFRvIHVzZSB0aGlzIHN0YXRlLCBwcmVyZXF1aXNpdGVzIG11c3QgYmUgaW4gcGxhY2UuXG4gICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FXU0VDMi9sYXRlc3QvVXNlckd1aWRlL2hpYmVybmF0aW5nLXByZXJlcXVpc2l0ZXMuaHRtbFxuICAgKi9cbiAgSElCRVJOQVRFRCA9ICdIaWJlcm5hdGVkJyxcblxuICAvKipcbiAgICogUnVubmluZ1xuICAgKi9cbiAgUlVOTklORyA9ICdSdW5uaW5nJyxcblxuICAvKipcbiAgICogU3RvcHBlZFxuICAgKi9cbiAgU1RPUFBFRCA9ICdTdG9wcGVkJyxcbn1cbiJdfQ==