{
  "version": "2",
  "toolVersion": "1.55.1",
  "snippets": {
    "d6d8a1fd3cb3034a0fdb822a54bb0576cad89c971717aeb69ce297a821bfd5e0": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\nsubmit_job = tasks.LambdaInvoke(self, \"Invoke Handler\",\n    lambda_function=fn,\n    input_path=\"$.input\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nLambdaInvoke submitJob = new LambdaInvoke(this, \"Invoke Handler\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    InputPath = \"$.input\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Invoke Handler\")\n        .lambdaFunction(fn)\n        .inputPath(\"$.input\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"Invoke Handler\"), &lambdaInvokeProps{\n\tlambdaFunction: fn,\n\tinputPath: jsii.String(\"$.input\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst submitJob = new tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  inputPath: '$.input',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 116
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  inputPath: '$.input',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "693c9716b22909a466b52d694fb2a81bcd1ec2411810518dc1def4791b965e71"
    },
    "fb6dc9d2bf558b6ed36b86580e9c26c6a822d0c0a27a0a1eb6b3f180d0d58850": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\nsubmit_job = tasks.LambdaInvoke(self, \"Invoke Handler\",\n    lambda_function=fn,\n    output_path=\"$.Payload.result\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nLambdaInvoke submitJob = new LambdaInvoke(this, \"Invoke Handler\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    OutputPath = \"$.Payload.result\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Invoke Handler\")\n        .lambdaFunction(fn)\n        .outputPath(\"$.Payload.result\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"Invoke Handler\"), &lambdaInvokeProps{\n\tlambdaFunction: fn,\n\toutputPath: jsii.String(\"$.Payload.result\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst submitJob = new tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  outputPath: '$.Payload.result',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 137
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  outputPath: '$.Payload.result',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "693c9716b22909a466b52d694fb2a81bcd1ec2411810518dc1def4791b965e71"
    },
    "8eb121352455b0f3b485f98dba854583c53ba89bd4a48dd782f459fd8be92878": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\ntasks.LambdaInvoke(self, \"Invoke Handler\",\n    lambda_function=fn,\n    result_selector={\n        \"lambda_output\": sfn.JsonPath.string_at(\"$.Payload\"),\n        \"invoke_request_id\": sfn.JsonPath.string_at(\"$.SdkResponseMetadata.RequestId\"),\n        \"static_value\": {\n            \"foo\": \"bar\"\n        },\n        \"state_name\": sfn.JsonPath.string_at(\"$.State.Name\")\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nnew LambdaInvoke(this, \"Invoke Handler\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    ResultSelector = new Dictionary<string, object> {\n        { \"lambdaOutput\", JsonPath.StringAt(\"$.Payload\") },\n        { \"invokeRequestId\", JsonPath.StringAt(\"$.SdkResponseMetadata.RequestId\") },\n        { \"staticValue\", new Dictionary<string, string> {\n            { \"foo\", \"bar\" }\n        } },\n        { \"stateName\", JsonPath.StringAt(\"$.State.Name\") }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nLambdaInvoke.Builder.create(this, \"Invoke Handler\")\n        .lambdaFunction(fn)\n        .resultSelector(Map.of(\n                \"lambdaOutput\", JsonPath.stringAt(\"$.Payload\"),\n                \"invokeRequestId\", JsonPath.stringAt(\"$.SdkResponseMetadata.RequestId\"),\n                \"staticValue\", Map.of(\n                        \"foo\", \"bar\"),\n                \"stateName\", JsonPath.stringAt(\"$.State.Name\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\ntasks.NewLambdaInvoke(this, jsii.String(\"Invoke Handler\"), &lambdaInvokeProps{\n\tlambdaFunction: fn,\n\tresultSelector: map[string]interface{}{\n\t\t\"lambdaOutput\": sfn.JsonPath.stringAt(jsii.String(\"$.Payload\")),\n\t\t\"invokeRequestId\": sfn.JsonPath.stringAt(jsii.String(\"$.SdkResponseMetadata.RequestId\")),\n\t\t\"staticValue\": map[string]*string{\n\t\t\t\"foo\": jsii.String(\"bar\"),\n\t\t},\n\t\t\"stateName\": sfn.JsonPath.stringAt(jsii.String(\"$.State.Name\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  resultSelector: {\n    lambdaOutput: sfn.JsonPath.stringAt('$.Payload'),\n    invokeRequestId: sfn.JsonPath.stringAt('$.SdkResponseMetadata.RequestId'),\n    staticValue: {\n      foo: 'bar',\n    },\n    stateName: sfn.JsonPath.stringAt('$$.State.Name'),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 157
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  resultSelector: {\n    lambdaOutput: sfn.JsonPath.stringAt('$.Payload'),\n    invokeRequestId: sfn.JsonPath.stringAt('$.SdkResponseMetadata.RequestId'),\n    staticValue: {\n      foo: 'bar',\n    },\n    stateName: sfn.JsonPath.stringAt('$.State.Name'),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "78fcd2cd1e5384890b3d224ab2469a1253de031c0dcd71f509287fef0cc95eb0"
    },
    "af8ebb720b8d3fb9084d19c8492d06bd1d89f280e02e1430d63e1485b2fff46d": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoPutItem(self, \"PutItem\",\n    item={\n        \"MessageId\": tasks.DynamoAttributeValue.from_string(\"message-id\")\n    },\n    table=my_table,\n    result_path=\"$.Item\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoPutItem(this, \"PutItem\", new DynamoPutItemProps {\n    Item = new Dictionary<string, DynamoAttributeValue> {\n        { \"MessageId\", DynamoAttributeValue.FromString(\"message-id\") }\n    },\n    Table = myTable,\n    ResultPath = \"$.Item\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoPutItem.Builder.create(this, \"PutItem\")\n        .item(Map.of(\n                \"MessageId\", DynamoAttributeValue.fromString(\"message-id\")))\n        .table(myTable)\n        .resultPath(\"$.Item\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoPutItem(this, jsii.String(\"PutItem\"), &dynamoPutItemProps{\n\titem: map[string]dynamoAttributeValue{\n\t\t\"MessageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-id\")),\n\t},\n\ttable: myTable,\n\tresultPath: jsii.String(\"$.Item\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoPutItem(this, 'PutItem', {\n  item: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-id'),\n  },\n  table: myTable,\n  resultPath: `$.Item`,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 183
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoPutItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoPutItemProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoPutItem(this, 'PutItem', {\n  item: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-id'),\n  },\n  table: myTable,\n  resultPath: `$.Item`,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "14": 1,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "ce71da50988d34b8ca7e53c048a837a788ade14501eecb56b83257b99e867f27"
    },
    "d4f583a10fbfffb77113ce50e840adbbd6e44497d00a355360c382d7ff72b3b1": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Invoke Handler\",\n    lambda_function=fn,\n    payload=sfn.TaskInput.from_json_path_at(\"$.input\"),\n    invocation_type=tasks.LambdaInvocationType.EVENT\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nLambdaInvoke submitJob = new LambdaInvoke(this, \"Invoke Handler\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    Payload = TaskInput.FromJsonPathAt(\"$.input\"),\n    InvocationType = LambdaInvocationType.EVENT\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Invoke Handler\")\n        .lambdaFunction(fn)\n        .payload(TaskInput.fromJsonPathAt(\"$.input\"))\n        .invocationType(LambdaInvocationType.EVENT)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"Invoke Handler\"), &lambdaInvokeProps{\n\tlambdaFunction: fn,\n\tpayload: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.input\")),\n\tinvocationType: tasks.lambdaInvocationType_EVENT,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  payload: sfn.TaskInput.fromJsonPathAt('$.input'),\n  invocationType: tasks.LambdaInvocationType.EVENT,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 209
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvocationType",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvocationType#EVENT",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  payload: sfn.TaskInput.fromJsonPathAt('$.input'),\n  invocationType: tasks.LambdaInvocationType.EVENT,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e15168f7d8e3418a8e8b332d6a7afe52439c12dc34879861210107c2cf66e864"
    },
    "e11f775703b50566ffa39321049c4083c633c2e9d19d8b65824c206d7f20396c": {
      "translations": {
        "python": {
          "source": "start_query_execution_job = tasks.AthenaStartQueryExecution(self, \"Athena Start Query\",\n    query_string=sfn.JsonPath.format(\"select contacts where year={};\", sfn.JsonPath.string_at(\"$.year\")),\n    query_execution_context=tasks.QueryExecutionContext(\n        database_name=\"interactions\"\n    ),\n    result_configuration=tasks.ResultConfiguration(\n        encryption_configuration=tasks.EncryptionConfiguration(\n            encryption_option=tasks.EncryptionOption.S3_MANAGED\n        ),\n        output_location=s3.Location(\n            bucket_name=\"mybucket\",\n            object_key=\"myprefix\"\n        )\n    ),\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = new AthenaStartQueryExecution(this, \"Athena Start Query\", new AthenaStartQueryExecutionProps {\n    QueryString = JsonPath.Format(\"select contacts where year={};\", JsonPath.StringAt(\"$.year\")),\n    QueryExecutionContext = new QueryExecutionContext {\n        DatabaseName = \"interactions\"\n    },\n    ResultConfiguration = new ResultConfiguration {\n        EncryptionConfiguration = new EncryptionConfiguration {\n            EncryptionOption = EncryptionOption.S3_MANAGED\n        },\n        OutputLocation = new Location {\n            BucketName = \"mybucket\",\n            ObjectKey = \"myprefix\"\n        }\n    },\n    IntegrationPattern = IntegrationPattern.RUN_JOB\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = AthenaStartQueryExecution.Builder.create(this, \"Athena Start Query\")\n        .queryString(JsonPath.format(\"select contacts where year={};\", JsonPath.stringAt(\"$.year\")))\n        .queryExecutionContext(QueryExecutionContext.builder()\n                .databaseName(\"interactions\")\n                .build())\n        .resultConfiguration(ResultConfiguration.builder()\n                .encryptionConfiguration(EncryptionConfiguration.builder()\n                        .encryptionOption(EncryptionOption.S3_MANAGED)\n                        .build())\n                .outputLocation(Location.builder()\n                        .bucketName(\"mybucket\")\n                        .objectKey(\"myprefix\")\n                        .build())\n                .build())\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "startQueryExecutionJob := tasks.NewAthenaStartQueryExecution(this, jsii.String(\"Athena Start Query\"), &athenaStartQueryExecutionProps{\n\tqueryString: sfn.jsonPath.format(jsii.String(\"select contacts where year={};\"), sfn.*jsonPath.stringAt(jsii.String(\"$.year\"))),\n\tqueryExecutionContext: &queryExecutionContext{\n\t\tdatabaseName: jsii.String(\"interactions\"),\n\t},\n\tresultConfiguration: &resultConfiguration{\n\t\tencryptionConfiguration: &encryptionConfiguration{\n\t\t\tencryptionOption: tasks.encryptionOption_S3_MANAGED,\n\t\t},\n\t\toutputLocation: &location{\n\t\t\tbucketName: jsii.String(\"mybucket\"),\n\t\t\tobjectKey: jsii.String(\"myprefix\"),\n\t\t},\n\t},\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n})",
          "version": "1"
        },
        "$": {
          "source": "const startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 222
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionConfiguration",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption#S3_MANAGED",
        "@aws-cdk/aws-stepfunctions-tasks.QueryExecutionContext",
        "@aws-cdk/aws-stepfunctions-tasks.ResultConfiguration",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#format",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "18ccfd09b7dfcdcde29c0cc0b620e945875db2aef84e404c5df86ce1cec06402"
    },
    "73499f56e3da757858912288342a939bc1187225d14347c38bde97c972114246": {
      "translations": {
        "python": {
          "source": "convert_to_seconds = tasks.EvaluateExpression(self, \"Convert to seconds\",\n    expression=\"$.waitMilliseconds / 1000\",\n    result_path=\"$.waitSeconds\"\n)\n\ncreate_message = tasks.EvaluateExpression(self, \"Create message\",\n    # Note: this is a string inside a string.\n    expression=\"`Now waiting ${$.waitSeconds} seconds...`\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.SnsPublish(self, \"Publish message\",\n    topic=sns.Topic(self, \"cool-topic\"),\n    message=sfn.TaskInput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.Wait(self, \"Wait\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "EvaluateExpression convertToSeconds = new EvaluateExpression(this, \"Convert to seconds\", new EvaluateExpressionProps {\n    Expression = \"$.waitMilliseconds / 1000\",\n    ResultPath = \"$.waitSeconds\"\n});\n\nEvaluateExpression createMessage = new EvaluateExpression(this, \"Create message\", new EvaluateExpressionProps {\n    // Note: this is a string inside a string.\n    Expression = \"`Now waiting ${$.waitSeconds} seconds...`\",\n    Runtime = Runtime.NODEJS_14_X,\n    ResultPath = \"$.message\"\n});\n\nSnsPublish publishMessage = new SnsPublish(this, \"Publish message\", new SnsPublishProps {\n    Topic = new Topic(this, \"cool-topic\"),\n    Message = TaskInput.FromJsonPathAt(\"$.message\"),\n    ResultPath = \"$.sns\"\n});\n\nWait wait = new Wait(this, \"Wait\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = convertToSeconds.Next(createMessage).Next(publishMessage).Next(wait)\n});",
          "version": "1"
        },
        "java": {
          "source": "EvaluateExpression convertToSeconds = EvaluateExpression.Builder.create(this, \"Convert to seconds\")\n        .expression(\"$.waitMilliseconds / 1000\")\n        .resultPath(\"$.waitSeconds\")\n        .build();\n\nEvaluateExpression createMessage = EvaluateExpression.Builder.create(this, \"Create message\")\n        // Note: this is a string inside a string.\n        .expression(\"`Now waiting ${$.waitSeconds} seconds...`\")\n        .runtime(Runtime.NODEJS_14_X)\n        .resultPath(\"$.message\")\n        .build();\n\nSnsPublish publishMessage = SnsPublish.Builder.create(this, \"Publish message\")\n        .topic(new Topic(this, \"cool-topic\"))\n        .message(TaskInput.fromJsonPathAt(\"$.message\"))\n        .resultPath(\"$.sns\")\n        .build();\n\nWait wait = Wait.Builder.create(this, \"Wait\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(convertToSeconds.next(createMessage).next(publishMessage).next(wait))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "convertToSeconds := tasks.NewEvaluateExpression(this, jsii.String(\"Convert to seconds\"), &evaluateExpressionProps{\n\texpression: jsii.String(\"$.waitMilliseconds / 1000\"),\n\tresultPath: jsii.String(\"$.waitSeconds\"),\n})\n\ncreateMessage := tasks.NewEvaluateExpression(this, jsii.String(\"Create message\"), &evaluateExpressionProps{\n\t// Note: this is a string inside a string.\n\texpression: jsii.String(\"`Now waiting ${$.waitSeconds} seconds...`\"),\n\truntime: lambda.runtime_NODEJS_14_X(),\n\tresultPath: jsii.String(\"$.message\"),\n})\n\npublishMessage := tasks.NewSnsPublish(this, jsii.String(\"Publish message\"), &snsPublishProps{\n\ttopic: sns.NewTopic(this, jsii.String(\"cool-topic\")),\n\tmessage: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.message\")),\n\tresultPath: jsii.String(\"$.sns\"),\n})\n\nwait := sfn.NewWait(this, jsii.String(\"Wait\"), &waitProps{\n\ttime: sfn.waitTime.secondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &stateMachineProps{\n\tdefinition: convertToSeconds.next(createMessage).next(publishMessage).next(wait),\n})",
          "version": "1"
        },
        "$": {
          "source": "const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 251
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublish",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 42,
        "104": 6,
        "193": 5,
        "194": 15,
        "196": 5,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 10
      },
      "fqnsFingerprint": "4ed01fad2aee65313d791cb2f4478ef39c4a467c70593ae9b560df902f17337d"
    },
    "ada12c27f1f2554a2d672e76a4657f0b32e159a182ce2ec5facc2ffa54893823": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as apigateway\n\nrest_api = apigateway.RestApi(self, \"MyRestApi\")\n\ninvoke_task = tasks.CallApiGatewayRestApiEndpoint(self, \"Call REST API\",\n    api=rest_api,\n    stage_name=\"prod\",\n    method=tasks.HttpMethod.GET\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\n\nRestApi restApi = new RestApi(this, \"MyRestApi\");\n\nCallApiGatewayRestApiEndpoint invokeTask = new CallApiGatewayRestApiEndpoint(this, \"Call REST API\", new CallApiGatewayRestApiEndpointProps {\n    Api = restApi,\n    StageName = \"prod\",\n    Method = HttpMethod.GET\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\n\nRestApi restApi = new RestApi(this, \"MyRestApi\");\n\nCallApiGatewayRestApiEndpoint invokeTask = CallApiGatewayRestApiEndpoint.Builder.create(this, \"Call REST API\")\n        .api(restApi)\n        .stageName(\"prod\")\n        .method(HttpMethod.GET)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nrestApi := apigateway.NewRestApi(this, jsii.String(\"MyRestApi\"))\n\ninvokeTask := tasks.NewCallApiGatewayRestApiEndpoint(this, jsii.String(\"Call REST API\"), &callApiGatewayRestApiEndpointProps{\n\tapi: restApi,\n\tstageName: jsii.String(\"prod\"),\n\tmethod: tasks.httpMethod_GET,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as apigateway from '@aws-cdk/aws-apigateway';\nconst restApi = new apigateway.RestApi(this, 'MyRestApi');\n\nconst invokeTask = new tasks.CallApiGatewayRestApiEndpoint(this, 'Call REST API', {\n  api: restApi,\n  stageName: 'prod',\n  method: tasks.HttpMethod.GET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 298
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpointProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod#GET",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst restApi = new apigateway.RestApi(this, 'MyRestApi');\n\nconst invokeTask = new tasks.CallApiGatewayRestApiEndpoint(this, 'Call REST API', {\n  api: restApi,\n  stageName: 'prod',\n  method: tasks.HttpMethod.GET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "104": 2,
        "193": 1,
        "194": 4,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b349ed5753fa7ed44648971b282a6e19ef0c3e23f927c82929f1b6bec03c97ec"
    },
    "99a7fc35bc7119a21564fffd7abc426a854498e28dee88cdf80272a12d0b5bcb": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as apigateway\n# api: apigateway.RestApi\n\n\ntasks.CallApiGatewayRestApiEndpoint(self, \"Endpoint\",\n    api=api,\n    stage_name=\"Stage\",\n    method=tasks.HttpMethod.PUT,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    headers=sfn.TaskInput.from_object({\n        \"TaskToken\": sfn.JsonPath.array(sfn.JsonPath.task_token)\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\nRestApi api;\n\n\nnew CallApiGatewayRestApiEndpoint(this, \"Endpoint\", new CallApiGatewayRestApiEndpointProps {\n    Api = api,\n    StageName = \"Stage\",\n    Method = HttpMethod.PUT,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Headers = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"TaskToken\", JsonPath.Array(JsonPath.TaskToken) }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\nRestApi api;\n\n\nCallApiGatewayRestApiEndpoint.Builder.create(this, \"Endpoint\")\n        .api(api)\n        .stageName(\"Stage\")\n        .method(HttpMethod.PUT)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .headers(TaskInput.fromObject(Map.of(\n                \"TaskToken\", JsonPath.array(JsonPath.getTaskToken()))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nvar api restApi\n\ntasks.NewCallApiGatewayRestApiEndpoint(this, jsii.String(\"Endpoint\"), &callApiGatewayRestApiEndpointProps{\n\tapi: api,\n\tstageName: jsii.String(\"Stage\"),\n\tmethod: tasks.httpMethod_PUT,\n\tintegrationPattern: sfn.integrationPattern_WAIT_FOR_TASK_TOKEN,\n\theaders: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"TaskToken\": sfn.JsonPath.array(sfn.JsonPath.taskToken),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as apigateway from '@aws-cdk/aws-apigateway';\ndeclare const api: apigateway.RestApi;\n\nnew tasks.CallApiGatewayRestApiEndpoint(this, 'Endpoint', {\n  api,\n  stageName: 'Stage',\n  method: tasks.HttpMethod.PUT,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  headers: sfn.TaskInput.fromObject({\n    TaskToken: sfn.JsonPath.array(sfn.JsonPath.taskToken),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 313
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpointProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod#PUT",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#array",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigateway from '@aws-cdk/aws-apigateway';\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew tasks.CallApiGatewayRestApiEndpoint(this, 'Endpoint', {\n  api,\n  stageName: 'Stage',\n  method: tasks.HttpMethod.PUT,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  headers: sfn.TaskInput.fromObject({\n    TaskToken: sfn.JsonPath.array(sfn.JsonPath.taskToken),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 11,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "ee0e5b5174c0974f2a953c060e785ae2f802d67d2476aec12a7838479c9fe82a"
    },
    "b3f72ad927c6715b83e279afbacc4ae8d3a466ab3cd18178b9301f43252e3cd2": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigatewayv2 as apigatewayv2\n\nhttp_api = apigatewayv2.HttpApi(self, \"MyHttpApi\")\n\ninvoke_task = tasks.CallApiGatewayHttpApiEndpoint(self, \"Call HTTP API\",\n    api_id=http_api.api_id,\n    api_stack=Stack.of(http_api),\n    method=tasks.HttpMethod.GET\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2;\n\nHttpApi httpApi = new HttpApi(this, \"MyHttpApi\");\n\nCallApiGatewayHttpApiEndpoint invokeTask = new CallApiGatewayHttpApiEndpoint(this, \"Call HTTP API\", new CallApiGatewayHttpApiEndpointProps {\n    ApiId = httpApi.ApiId,\n    ApiStack = Stack.Of(httpApi),\n    Method = HttpMethod.GET\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.*;\n\nHttpApi httpApi = new HttpApi(this, \"MyHttpApi\");\n\nCallApiGatewayHttpApiEndpoint invokeTask = CallApiGatewayHttpApiEndpoint.Builder.create(this, \"Call HTTP API\")\n        .apiId(httpApi.getApiId())\n        .apiStack(Stack.of(httpApi))\n        .method(HttpMethod.GET)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2 \"github.com/aws-samples/dummy/awscdkawsapigatewayv2\"\nhttpApi := apigatewayv2.NewHttpApi(this, jsii.String(\"MyHttpApi\"))\n\ninvokeTask := tasks.NewCallApiGatewayHttpApiEndpoint(this, jsii.String(\"Call HTTP API\"), &callApiGatewayHttpApiEndpointProps{\n\tapiId: httpApi.apiId,\n\tapiStack: *stack.of(httpApi),\n\tmethod: tasks.httpMethod_GET,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nconst httpApi = new apigatewayv2.HttpApi(this, 'MyHttpApi');\n\nconst invokeTask = new tasks.CallApiGatewayHttpApiEndpoint(this, 'Call HTTP API', {\n  apiId: httpApi.apiId,\n  apiStack: Stack.of(httpApi),\n  method: tasks.HttpMethod.GET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 332
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#apiId",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayHttpApiEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayHttpApiEndpointProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod#GET",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst httpApi = new apigatewayv2.HttpApi(this, 'MyHttpApi');\n\nconst invokeTask = new tasks.CallApiGatewayHttpApiEndpoint(this, 'Call HTTP API', {\n  apiId: httpApi.apiId,\n  apiStack: Stack.of(httpApi),\n  method: tasks.HttpMethod.GET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0b40c896e6f6945c653310b6f8b23466b9b8b19ade6731e0ef44d51367f07be2"
    },
    "c502b9f484c150f11c64fcb4fb61e56232f4f541b24a3ef58a4d318ddb43cb8e": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\nget_object = tasks.CallAwsService(self, \"GetObject\",\n    service=\"s3\",\n    action=\"getObject\",\n    parameters={\n        \"Bucket\": my_bucket.bucket_name,\n        \"Key\": sfn.JsonPath.string_at(\"$.key\")\n    },\n    iam_resources=[my_bucket.arn_for_objects(\"*\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\nCallAwsService getObject = new CallAwsService(this, \"GetObject\", new CallAwsServiceProps {\n    Service = \"s3\",\n    Action = \"getObject\",\n    Parameters = new Dictionary<string, object> {\n        { \"Bucket\", myBucket.BucketName },\n        { \"Key\", JsonPath.StringAt(\"$.key\") }\n    },\n    IamResources = new [] { myBucket.ArnForObjects(\"*\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\nCallAwsService getObject = CallAwsService.Builder.create(this, \"GetObject\")\n        .service(\"s3\")\n        .action(\"getObject\")\n        .parameters(Map.of(\n                \"Bucket\", myBucket.getBucketName(),\n                \"Key\", JsonPath.stringAt(\"$.key\")))\n        .iamResources(List.of(myBucket.arnForObjects(\"*\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\ngetObject := tasks.NewCallAwsService(this, jsii.String(\"GetObject\"), &callAwsServiceProps{\n\tservice: jsii.String(\"s3\"),\n\taction: jsii.String(\"getObject\"),\n\tparameters: map[string]interface{}{\n\t\t\"Bucket\": myBucket.bucketName,\n\t\t\"Key\": sfn.JsonPath.stringAt(jsii.String(\"$.key\")),\n\t},\n\tiamResources: []*string{\n\t\tmyBucket.arnForObjects(jsii.String(\"*\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\nconst getObject = new tasks.CallAwsService(this, 'GetObject', {\n  service: 's3',\n  action: 'getObject',\n  parameters: {\n    Bucket: myBucket.bucketName,\n    Key: sfn.JsonPath.stringAt('$.key')\n  },\n  iamResources: [myBucket.arnForObjects('*')],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 351
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket#bucketName",
        "@aws-cdk/aws-s3.BucketBase#arnForObjects",
        "@aws-cdk/aws-stepfunctions-tasks.CallAwsService",
        "@aws-cdk/aws-stepfunctions-tasks.CallAwsServiceProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst getObject = new tasks.CallAwsService(this, 'GetObject', {\n  service: 's3',\n  action: 'getObject',\n  parameters: {\n    Bucket: myBucket.bucketName,\n    Key: sfn.JsonPath.stringAt('$.key')\n  },\n  iamResources: [myBucket.arnForObjects('*')],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "1c6820a9c13b8d21ee186b702db95bce0a238b6239024ab68c43e257a88e60e7"
    },
    "7b7b5dc4b099fbc9f1446add14c3a4d513c5b495e922eeae4edd31875404e634": {
      "translations": {
        "python": {
          "source": "list_buckets = tasks.CallAwsService(self, \"ListBuckets\",\n    service=\"s3\",\n    action=\"listBuckets\",\n    iam_resources=[\"*\"],\n    iam_action=\"s3:ListAllMyBuckets\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CallAwsService listBuckets = new CallAwsService(this, \"ListBuckets\", new CallAwsServiceProps {\n    Service = \"s3\",\n    Action = \"listBuckets\",\n    IamResources = new [] { \"*\" },\n    IamAction = \"s3:ListAllMyBuckets\"\n});",
          "version": "1"
        },
        "java": {
          "source": "CallAwsService listBuckets = CallAwsService.Builder.create(this, \"ListBuckets\")\n        .service(\"s3\")\n        .action(\"listBuckets\")\n        .iamResources(List.of(\"*\"))\n        .iamAction(\"s3:ListAllMyBuckets\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "listBuckets := tasks.NewCallAwsService(this, jsii.String(\"ListBuckets\"), &callAwsServiceProps{\n\tservice: jsii.String(\"s3\"),\n\taction: jsii.String(\"listBuckets\"),\n\tiamResources: []*string{\n\t\tjsii.String(\"*\"),\n\t},\n\tiamAction: jsii.String(\"s3:ListAllMyBuckets\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const listBuckets = new tasks.CallAwsService(this, 'ListBuckets', {\n  service: 's3',\n  action: 'listBuckets',\n  iamResources: ['*'],\n  iamAction: 's3:ListAllMyBuckets',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 372
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.CallAwsService",
        "@aws-cdk/aws-stepfunctions-tasks.CallAwsServiceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst listBuckets = new tasks.CallAwsService(this, 'ListBuckets', {\n  service: 's3',\n  action: 'listBuckets',\n  iamResources: ['*'],\n  iamAction: 's3:ListAllMyBuckets',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "563ca7dd0579a9ad17b5b99e4586b3df31036907c7f83f68a9b137086fe64863"
    },
    "80bb702ddffdcd8bb6202bd1105d6ecee824f6b909325fc190932c4cc4e34e5f": {
      "translations": {
        "python": {
          "source": "start_query_execution_job = tasks.AthenaStartQueryExecution(self, \"Start Athena Query\",\n    query_string=sfn.JsonPath.string_at(\"$.queryString\"),\n    query_execution_context=tasks.QueryExecutionContext(\n        database_name=\"mydatabase\"\n    ),\n    result_configuration=tasks.ResultConfiguration(\n        encryption_configuration=tasks.EncryptionConfiguration(\n            encryption_option=tasks.EncryptionOption.S3_MANAGED\n        ),\n        output_location=s3.Location(\n            bucket_name=\"query-results-bucket\",\n            object_key=\"folder\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = new AthenaStartQueryExecution(this, \"Start Athena Query\", new AthenaStartQueryExecutionProps {\n    QueryString = JsonPath.StringAt(\"$.queryString\"),\n    QueryExecutionContext = new QueryExecutionContext {\n        DatabaseName = \"mydatabase\"\n    },\n    ResultConfiguration = new ResultConfiguration {\n        EncryptionConfiguration = new EncryptionConfiguration {\n            EncryptionOption = EncryptionOption.S3_MANAGED\n        },\n        OutputLocation = new Location {\n            BucketName = \"query-results-bucket\",\n            ObjectKey = \"folder\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = AthenaStartQueryExecution.Builder.create(this, \"Start Athena Query\")\n        .queryString(JsonPath.stringAt(\"$.queryString\"))\n        .queryExecutionContext(QueryExecutionContext.builder()\n                .databaseName(\"mydatabase\")\n                .build())\n        .resultConfiguration(ResultConfiguration.builder()\n                .encryptionConfiguration(EncryptionConfiguration.builder()\n                        .encryptionOption(EncryptionOption.S3_MANAGED)\n                        .build())\n                .outputLocation(Location.builder()\n                        .bucketName(\"query-results-bucket\")\n                        .objectKey(\"folder\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "startQueryExecutionJob := tasks.NewAthenaStartQueryExecution(this, jsii.String(\"Start Athena Query\"), &athenaStartQueryExecutionProps{\n\tqueryString: sfn.jsonPath.stringAt(jsii.String(\"$.queryString\")),\n\tqueryExecutionContext: &queryExecutionContext{\n\t\tdatabaseName: jsii.String(\"mydatabase\"),\n\t},\n\tresultConfiguration: &resultConfiguration{\n\t\tencryptionConfiguration: &encryptionConfiguration{\n\t\t\tencryptionOption: tasks.encryptionOption_S3_MANAGED,\n\t\t},\n\t\toutputLocation: &location{\n\t\t\tbucketName: jsii.String(\"query-results-bucket\"),\n\t\t\tobjectKey: jsii.String(\"folder\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Start Athena Query', {\n  queryString: sfn.JsonPath.stringAt('$.queryString'),\n  queryExecutionContext: {\n    databaseName: 'mydatabase',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'query-results-bucket',\n      objectKey: 'folder',\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 389
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionConfiguration",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption#S3_MANAGED",
        "@aws-cdk/aws-stepfunctions-tasks.QueryExecutionContext",
        "@aws-cdk/aws-stepfunctions-tasks.ResultConfiguration",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Start Athena Query', {\n  queryString: sfn.JsonPath.stringAt('$.queryString'),\n  queryExecutionContext: {\n    databaseName: 'mydatabase',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'query-results-bucket',\n      objectKey: 'folder',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 1,
        "193": 5,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 9
      },
      "fqnsFingerprint": "1ff4e936f96d0eaaef8eb144a1d75b70c16003edcd851f9d5c1e8cde968db8a4"
    },
    "eaad711bd782b76931f8b5b1dfb009286d6d57e7c9bd897cfd9f0f47bd93b4c3": {
      "translations": {
        "python": {
          "source": "get_query_execution_job = tasks.AthenaGetQueryExecution(self, \"Get Query Execution\",\n    query_execution_id=sfn.JsonPath.string_at(\"$.QueryExecutionId\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaGetQueryExecution getQueryExecutionJob = new AthenaGetQueryExecution(this, \"Get Query Execution\", new AthenaGetQueryExecutionProps {\n    QueryExecutionId = JsonPath.StringAt(\"$.QueryExecutionId\")\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaGetQueryExecution getQueryExecutionJob = AthenaGetQueryExecution.Builder.create(this, \"Get Query Execution\")\n        .queryExecutionId(JsonPath.stringAt(\"$.QueryExecutionId\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "getQueryExecutionJob := tasks.NewAthenaGetQueryExecution(this, jsii.String(\"Get Query Execution\"), &athenaGetQueryExecutionProps{\n\tqueryExecutionId: sfn.jsonPath.stringAt(jsii.String(\"$.QueryExecutionId\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const getQueryExecutionJob = new tasks.AthenaGetQueryExecution(this, 'Get Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 411
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getQueryExecutionJob = new tasks.AthenaGetQueryExecution(this, 'Get Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "501e103775b71b7e45b2f60e96c7cb987e38c68bc001246ea3f5b617186c070c"
    },
    "68e0efe09f0a2496ce7c647f59302f844fda53f82eba17e2580dc170ab57e1d0": {
      "translations": {
        "python": {
          "source": "get_query_results_job = tasks.AthenaGetQueryResults(self, \"Get Query Results\",\n    query_execution_id=sfn.JsonPath.string_at(\"$.QueryExecutionId\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaGetQueryResults getQueryResultsJob = new AthenaGetQueryResults(this, \"Get Query Results\", new AthenaGetQueryResultsProps {\n    QueryExecutionId = JsonPath.StringAt(\"$.QueryExecutionId\")\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaGetQueryResults getQueryResultsJob = AthenaGetQueryResults.Builder.create(this, \"Get Query Results\")\n        .queryExecutionId(JsonPath.stringAt(\"$.QueryExecutionId\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "getQueryResultsJob := tasks.NewAthenaGetQueryResults(this, jsii.String(\"Get Query Results\"), &athenaGetQueryResultsProps{\n\tqueryExecutionId: sfn.jsonPath.stringAt(jsii.String(\"$.QueryExecutionId\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const getQueryResultsJob = new tasks.AthenaGetQueryResults(this, 'Get Query Results', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 421
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryResults",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryResultsProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getQueryResultsJob = new tasks.AthenaGetQueryResults(this, 'Get Query Results', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "df0ced513361140a56305a8b3ac03d82983c57b9f80c7b839077345bc937adbd"
    },
    "ba8367213658072639231fd592747864f0b18884d53386e6ede06aabcf2e73a0": {
      "translations": {
        "python": {
          "source": "stop_query_execution_job = tasks.AthenaStopQueryExecution(self, \"Stop Query Execution\",\n    query_execution_id=sfn.JsonPath.string_at(\"$.QueryExecutionId\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaStopQueryExecution stopQueryExecutionJob = new AthenaStopQueryExecution(this, \"Stop Query Execution\", new AthenaStopQueryExecutionProps {\n    QueryExecutionId = JsonPath.StringAt(\"$.QueryExecutionId\")\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStopQueryExecution stopQueryExecutionJob = AthenaStopQueryExecution.Builder.create(this, \"Stop Query Execution\")\n        .queryExecutionId(JsonPath.stringAt(\"$.QueryExecutionId\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "stopQueryExecutionJob := tasks.NewAthenaStopQueryExecution(this, jsii.String(\"Stop Query Execution\"), &athenaStopQueryExecutionProps{\n\tqueryExecutionId: sfn.jsonPath.stringAt(jsii.String(\"$.QueryExecutionId\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const stopQueryExecutionJob = new tasks.AthenaStopQueryExecution(this, 'Stop Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 431
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStopQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStopQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stopQueryExecutionJob = new tasks.AthenaStopQueryExecution(this, 'Stop Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "4fbc564f43a829ad3fdd38f789ca7664845725c8333f4534db458f804700181a"
    },
    "ffe0354da4f1a0a4e48a81269958778700e7498dd4981dcdb93316b54ea21c15": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_batch as batch\n# batch_job_definition: batch.JobDefinition\n# batch_queue: batch.JobQueue\n\n\ntask = tasks.BatchSubmitJob(self, \"Submit Job\",\n    job_definition_arn=batch_job_definition.job_definition_arn,\n    job_name=\"MyJob\",\n    job_queue_arn=batch_queue.job_queue_arn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Batch;\nJobDefinition batchJobDefinition;\nJobQueue batchQueue;\n\n\nBatchSubmitJob task = new BatchSubmitJob(this, \"Submit Job\", new BatchSubmitJobProps {\n    JobDefinitionArn = batchJobDefinition.JobDefinitionArn,\n    JobName = \"MyJob\",\n    JobQueueArn = batchQueue.JobQueueArn\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.batch.*;\nJobDefinition batchJobDefinition;\nJobQueue batchQueue;\n\n\nBatchSubmitJob task = BatchSubmitJob.Builder.create(this, \"Submit Job\")\n        .jobDefinitionArn(batchJobDefinition.getJobDefinitionArn())\n        .jobName(\"MyJob\")\n        .jobQueueArn(batchQueue.getJobQueueArn())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import batch \"github.com/aws-samples/dummy/awscdkawsbatch\"\nvar batchJobDefinition jobDefinition\nvar batchQueue jobQueue\n\ntask := tasks.NewBatchSubmitJob(this, jsii.String(\"Submit Job\"), &batchSubmitJobProps{\n\tjobDefinitionArn: batchJobDefinition.jobDefinitionArn,\n\tjobName: jsii.String(\"MyJob\"),\n\tjobQueueArn: batchQueue.jobQueueArn,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as batch from '@aws-cdk/aws-batch';\ndeclare const batchJobDefinition: batch.JobDefinition;\ndeclare const batchQueue: batch.JobQueue;\n\nconst task = new tasks.BatchSubmitJob(this, 'Submit Job', {\n  jobDefinitionArn: batchJobDefinition.jobDefinitionArn,\n  jobName: 'MyJob',\n  jobQueueArn: batchQueue.jobQueueArn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 445
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.JobDefinition#jobDefinitionArn",
        "@aws-cdk/aws-batch.JobQueue#jobQueueArn",
        "@aws-cdk/aws-stepfunctions-tasks.BatchSubmitJob",
        "@aws-cdk/aws-stepfunctions-tasks.BatchSubmitJobProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as batch from '@aws-cdk/aws-batch';\ndeclare const batchJobDefinition: batch.JobDefinition;\ndeclare const batchQueue: batch.JobQueue;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst task = new tasks.BatchSubmitJob(this, 'Submit Job', {\n  jobDefinitionArn: batchJobDefinition.jobDefinitionArn,\n  jobName: 'MyJob',\n  jobQueueArn: batchQueue.jobQueueArn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1a1a3fa67f95bcf89e142a199bb8e270e57f1d8e3360097be63cc64cfb427752"
    },
    "21a7de5f2b1693d887185a789844991911bbcc3a2b1531c8eb1da82b159e8446": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild\n\n\ncodebuild_project = codebuild.Project(self, \"Project\",\n    project_name=\"MyTestProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"echo \\\"Hello, CodeBuild!\\\"\"\n                ]\n            }\n        }\n    })\n)\n\ntask = tasks.CodeBuildStartBuild(self, \"Task\",\n    project=codebuild_project,\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    environment_variables_override={\n        \"ZONE\": codebuild.BuildEnvironmentVariable(\n            type=codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n            value=sfn.JsonPath.string_at(\"$.envVariables.zone\")\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;\n\n\nProject codebuildProject = new Project(this, \"Project\", new ProjectProps {\n    ProjectName = \"MyTestProject\",\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"echo \\\"Hello, CodeBuild!\\\"\" }\n            } }\n        } }\n    })\n});\n\nCodeBuildStartBuild task = new CodeBuildStartBuild(this, \"Task\", new CodeBuildStartBuildProps {\n    Project = codebuildProject,\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    EnvironmentVariablesOverride = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"ZONE\", new BuildEnvironmentVariable {\n            Type = BuildEnvironmentVariableType.PLAINTEXT,\n            Value = JsonPath.StringAt(\"$.envVariables.zone\")\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;\n\n\nProject codebuildProject = Project.Builder.create(this, \"Project\")\n        .projectName(\"MyTestProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"echo \\\"Hello, CodeBuild!\\\"\"))))))\n        .build();\n\nCodeBuildStartBuild task = CodeBuildStartBuild.Builder.create(this, \"Task\")\n        .project(codebuildProject)\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .environmentVariablesOverride(Map.of(\n                \"ZONE\", BuildEnvironmentVariable.builder()\n                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                        .value(JsonPath.stringAt(\"$.envVariables.zone\"))\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import codebuild \"github.com/aws-samples/dummy/awscdkawscodebuild\"\n\ncodebuildProject := codebuild.NewProject(this, jsii.String(\"Project\"), &projectProps{\n\tprojectName: jsii.String(\"MyTestProject\"),\n\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\"phases\": map[string]map[string][]*string{\n\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\"commands\": []*string{\n\t\t\t\t\tjsii.String(\"echo \\\"Hello, CodeBuild!\\\"\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}),\n})\n\ntask := tasks.NewCodeBuildStartBuild(this, jsii.String(\"Task\"), &codeBuildStartBuildProps{\n\tproject: codebuildProject,\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tenvironmentVariablesOverride: map[string]buildEnvironmentVariable{\n\t\t\"ZONE\": &buildEnvironmentVariable{\n\t\t\t\"type\": codebuild.BuildEnvironmentVariableType_PLAINTEXT,\n\t\t\t\"value\": sfn.JsonPath.stringAt(jsii.String(\"$.envVariables.zone\")),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';\n\nconst codebuildProject = new codebuild.Project(this, 'Project', {\n  projectName: 'MyTestProject',\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});\n\nconst task = new tasks.CodeBuildStartBuild(this, 'Task', {\n  project: codebuildProject,\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  environmentVariablesOverride: {\n    ZONE: {\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      value: sfn.JsonPath.stringAt('$.envVariables.zone'),\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 465
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuild",
        "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuildProps",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst codebuildProject = new codebuild.Project(this, 'Project', {\n  projectName: 'MyTestProject',\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});\n\nconst task = new tasks.CodeBuildStartBuild(this, 'Task', {\n  project: codebuildProject,\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  environmentVariablesOverride: {\n    ZONE: {\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      value: sfn.JsonPath.stringAt('$.envVariables.zone'),\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 32,
        "104": 2,
        "192": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "9db5638683d5d530acafc4246cc0ff506bcf97927355826362e75fa95c20f75c"
    },
    "bf206fd391d940dcbc9acd7e9b7e1d69cb5b79822a460343f6c43c4c07012f56": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoGetItem(self, \"Get Item\",\n    key={\"message_id\": tasks.DynamoAttributeValue.from_string(\"message-007\")},\n    table=my_table\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoGetItem(this, \"Get Item\", new DynamoGetItemProps {\n    Key = new Dictionary<string, DynamoAttributeValue> { { \"messageId\", DynamoAttributeValue.FromString(\"message-007\") } },\n    Table = myTable\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoGetItem.Builder.create(this, \"Get Item\")\n        .key(Map.of(\"messageId\", DynamoAttributeValue.fromString(\"message-007\")))\n        .table(myTable)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoGetItem(this, jsii.String(\"Get Item\"), &dynamoGetItemProps{\n\tkey: map[string]dynamoAttributeValue{\n\t\t\"messageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-007\")),\n\t},\n\ttable: myTable,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoGetItem(this, 'Get Item', {\n  key: { messageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 503
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoGetItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoGetItemProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoGetItem(this, 'Get Item', {\n  key: { messageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5966da7212e740dcba072ca286f1f11067ae1a6012a0b8180a242eeea3598e0f"
    },
    "54f821c3c2bcbd479eb162f077a60c619d2817a56af008108221c0cc43bc0aa7": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoPutItem(self, \"PutItem\",\n    item={\n        \"MessageId\": tasks.DynamoAttributeValue.from_string(\"message-007\"),\n        \"Text\": tasks.DynamoAttributeValue.from_string(sfn.JsonPath.string_at(\"$.bar\")),\n        \"TotalCount\": tasks.DynamoAttributeValue.from_number(10)\n    },\n    table=my_table\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoPutItem(this, \"PutItem\", new DynamoPutItemProps {\n    Item = new Dictionary<string, DynamoAttributeValue> {\n        { \"MessageId\", DynamoAttributeValue.FromString(\"message-007\") },\n        { \"Text\", DynamoAttributeValue.FromString(JsonPath.StringAt(\"$.bar\")) },\n        { \"TotalCount\", DynamoAttributeValue.FromNumber(10) }\n    },\n    Table = myTable\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoPutItem.Builder.create(this, \"PutItem\")\n        .item(Map.of(\n                \"MessageId\", DynamoAttributeValue.fromString(\"message-007\"),\n                \"Text\", DynamoAttributeValue.fromString(JsonPath.stringAt(\"$.bar\")),\n                \"TotalCount\", DynamoAttributeValue.fromNumber(10)))\n        .table(myTable)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoPutItem(this, jsii.String(\"PutItem\"), &dynamoPutItemProps{\n\titem: map[string]dynamoAttributeValue{\n\t\t\"MessageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-007\")),\n\t\t\"Text\": tasks.*dynamoAttributeValue.fromString(sfn.JsonPath.stringAt(jsii.String(\"$.bar\"))),\n\t\t\"TotalCount\": tasks.*dynamoAttributeValue.fromNumber(jsii.Number(10)),\n\t},\n\ttable: myTable,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoPutItem(this, 'PutItem', {\n  item: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-007'),\n    Text: tasks.DynamoAttributeValue.fromString(sfn.JsonPath.stringAt('$.bar')),\n    TotalCount: tasks.DynamoAttributeValue.fromNumber(10),\n  },\n  table: myTable,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 515
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromNumber",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoPutItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoPutItemProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoPutItem(this, 'PutItem', {\n  item: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-007'),\n    Text: tasks.DynamoAttributeValue.fromString(sfn.JsonPath.stringAt('$.bar')),\n    TotalCount: tasks.DynamoAttributeValue.fromNumber(10),\n  },\n  table: myTable,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 23,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "11c699e436117069ed83529d34e9d8165af7a496ade2335410ecaea72603f61f"
    },
    "2b827e8f64ddedb936bfed8acf69ad8935895d3aa0d99a16ad9931975c123671": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoDeleteItem(self, \"DeleteItem\",\n    key={\"MessageId\": tasks.DynamoAttributeValue.from_string(\"message-007\")},\n    table=my_table,\n    result_path=sfn.JsonPath.DISCARD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoDeleteItem(this, \"DeleteItem\", new DynamoDeleteItemProps {\n    Key = new Dictionary<string, DynamoAttributeValue> { { \"MessageId\", DynamoAttributeValue.FromString(\"message-007\") } },\n    Table = myTable,\n    ResultPath = JsonPath.DISCARD\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoDeleteItem.Builder.create(this, \"DeleteItem\")\n        .key(Map.of(\"MessageId\", DynamoAttributeValue.fromString(\"message-007\")))\n        .table(myTable)\n        .resultPath(JsonPath.DISCARD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoDeleteItem(this, jsii.String(\"DeleteItem\"), &dynamoDeleteItemProps{\n\tkey: map[string]dynamoAttributeValue{\n\t\t\"MessageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-007\")),\n\t},\n\ttable: myTable,\n\tresultPath: sfn.jsonPath_DISCARD(),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoDeleteItem(this, 'DeleteItem', {\n  key: { MessageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n  resultPath: sfn.JsonPath.DISCARD,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 531
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoDeleteItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoDeleteItemProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#DISCARD",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoDeleteItem(this, 'DeleteItem', {\n  key: { MessageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n  resultPath: sfn.JsonPath.DISCARD,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "590e3b8d3fbe47a03c805538e6c06ddb7d1634002f18b7a9377d05db762f1a31"
    },
    "da0632635354ff37439046c84e891f721e9f9ced371bb2f0d1a45949dbbd50cb": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoUpdateItem(self, \"UpdateItem\",\n    key={\n        \"MessageId\": tasks.DynamoAttributeValue.from_string(\"message-007\")\n    },\n    table=my_table,\n    expression_attribute_values={\n        \":val\": tasks.DynamoAttributeValue.number_from_string(sfn.JsonPath.string_at(\"$.Item.TotalCount.N\")),\n        \":rand\": tasks.DynamoAttributeValue.from_number(20)\n    },\n    update_expression=\"SET TotalCount = :val + :rand\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoUpdateItem(this, \"UpdateItem\", new DynamoUpdateItemProps {\n    Key = new Dictionary<string, DynamoAttributeValue> {\n        { \"MessageId\", DynamoAttributeValue.FromString(\"message-007\") }\n    },\n    Table = myTable,\n    ExpressionAttributeValues = new Dictionary<string, DynamoAttributeValue> {\n        { \":val\", DynamoAttributeValue.NumberFromString(JsonPath.StringAt(\"$.Item.TotalCount.N\")) },\n        { \":rand\", DynamoAttributeValue.FromNumber(20) }\n    },\n    UpdateExpression = \"SET TotalCount = :val + :rand\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoUpdateItem.Builder.create(this, \"UpdateItem\")\n        .key(Map.of(\n                \"MessageId\", DynamoAttributeValue.fromString(\"message-007\")))\n        .table(myTable)\n        .expressionAttributeValues(Map.of(\n                \":val\", DynamoAttributeValue.numberFromString(JsonPath.stringAt(\"$.Item.TotalCount.N\")),\n                \":rand\", DynamoAttributeValue.fromNumber(20)))\n        .updateExpression(\"SET TotalCount = :val + :rand\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoUpdateItem(this, jsii.String(\"UpdateItem\"), &dynamoUpdateItemProps{\n\tkey: map[string]dynamoAttributeValue{\n\t\t\"MessageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-007\")),\n\t},\n\ttable: myTable,\n\texpressionAttributeValues: map[string]*dynamoAttributeValue{\n\t\t\":val\": tasks.*dynamoAttributeValue.numberFromString(sfn.JsonPath.stringAt(jsii.String(\"$.Item.TotalCount.N\"))),\n\t\t\":rand\": tasks.*dynamoAttributeValue.fromNumber(jsii.Number(20)),\n\t},\n\tupdateExpression: jsii.String(\"SET TotalCount = :val + :rand\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoUpdateItem(this, 'UpdateItem', {\n  key: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-007')\n  },\n  table: myTable,\n  expressionAttributeValues: {\n    ':val': tasks.DynamoAttributeValue.numberFromString(sfn.JsonPath.stringAt('$.Item.TotalCount.N')),\n    ':rand': tasks.DynamoAttributeValue.fromNumber(20),\n  },\n  updateExpression: 'SET TotalCount = :val + :rand',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 545
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromNumber",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#numberFromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoUpdateItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoUpdateItemProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoUpdateItem(this, 'UpdateItem', {\n  key: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-007')\n  },\n  table: myTable,\n  expressionAttributeValues: {\n    ':val': tasks.DynamoAttributeValue.numberFromString(sfn.JsonPath.stringAt('$.Item.TotalCount.N')),\n    ':rand': tasks.DynamoAttributeValue.fromNumber(20),\n  },\n  updateExpression: 'SET TotalCount = :val + :rand',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 23,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "9d0308661d3b08e6b8c2cec8970db53258657ff77359fa1ddb31a7df8c4dcad2"
    },
    "5eb0bf4bead4ca35ae255228ac20a302b78784b33477cd74e0df452398e02547": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Ec2Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroup\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tcompatibility: ecs.compatibility_EC2,\n})\n\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"Run\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tlaunchTarget: tasks.NewEcsEc2LaunchTarget(&ecsEc2LaunchTargetOptions{\n\t\tplacementStrategies: []placementStrategy{\n\t\t\tecs.*placementStrategy.spreadAcrossInstances(),\n\t\t\tecs.*placementStrategy.packedByCpu(),\n\t\t\tecs.*placementStrategy.randomly(),\n\t\t},\n\t\tplacementConstraints: []placementConstraint{\n\t\t\tecs.*placementConstraint.memberOf(jsii.String(\"blieptuut\")),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 583
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "79e557664810ecac0873a4b9bdba7361ed74e1840b9c62f67da7bdb0a0f455a1"
    },
    "4af0a04ec111a9b3790c9a94798fb30809d313eb6f5ee406802466a42ce91bdb": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"FargateCluster\", vpc=vpc)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    memory_mi_b=\"512\",\n    cpu=\"256\",\n    compatibility=ecs.Compatibility.FARGATE\n)\n\ncontainer_definition = task_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"RunFargate\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    assign_public_ip=True,\n    container_overrides=[tasks.ContainerOverride(\n        container_definition=container_definition,\n        environment=[tasks.TaskEnvironmentVariable(name=\"SOME_KEY\", value=sfn.JsonPath.string_at(\"$.SomeKey\"))]\n    )],\n    launch_target=tasks.EcsFargateLaunchTarget()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"FargateCluster\", new ClusterProps { Vpc = vpc });\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    MemoryMiB = \"512\",\n    Cpu = \"256\",\n    Compatibility = Compatibility.FARGATE\n});\n\nContainerDefinition containerDefinition = taskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"RunFargate\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    AssignPublicIp = true,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n        Environment = new [] { new TaskEnvironmentVariable { Name = \"SOME_KEY\", Value = JsonPath.StringAt(\"$.SomeKey\") } }\n    } },\n    LaunchTarget = new EcsFargateLaunchTarget()\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"FargateCluster\").vpc(vpc).build();\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .memoryMiB(\"512\")\n        .cpu(\"256\")\n        .compatibility(Compatibility.FARGATE)\n        .build();\n\nContainerDefinition containerDefinition = taskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"RunFargate\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .assignPublicIp(true)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n                .environment(List.of(TaskEnvironmentVariable.builder().name(\"SOME_KEY\").value(JsonPath.stringAt(\"$.SomeKey\")).build()))\n                .build()))\n        .launchTarget(new EcsFargateLaunchTarget())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"FargateCluster\"), &clusterProps{\n\tvpc: vpc,\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tmemoryMiB: jsii.String(\"512\"),\n\tcpu: jsii.String(\"256\"),\n\tcompatibility: ecs.compatibility_FARGATE,\n})\n\ncontainerDefinition := taskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"RunFargate\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tassignPublicIp: jsii.Boolean(true),\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerDefinition: containerDefinition,\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"SOME_KEY\"),\n\t\t\t\t\tvalue: sfn.jsonPath.stringAt(jsii.String(\"$.SomeKey\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tlaunchTarget: tasks.NewEcsFargateLaunchTarget(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 636
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#FARGATE",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsFargateLaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 47,
        "104": 4,
        "106": 2,
        "192": 2,
        "193": 7,
        "194": 15,
        "196": 4,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 13,
        "282": 4
      },
      "fqnsFingerprint": "411156771f92843f189d78630c2f6655bd6b54f0bcc9e40e2d1b3168c0fc5424"
    },
    "e5e6f9eea8957ae556f18ba079cf646527dad16be3312eda0744a4332517eb98": {
      "translations": {
        "python": {
          "source": "cluster_role = iam.Role(self, \"ClusterRole\",\n    assumed_by=iam.ServicePrincipal(\"ec2.amazonaws.com\")\n)\n\nservice_role = iam.Role(self, \"ServiceRole\",\n    assumed_by=iam.ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n)\n\nauto_scaling_role = iam.Role(self, \"AutoScalingRole\",\n    assumed_by=iam.ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n)\n\nauto_scaling_role.assume_role_policy.add_statements(\n    iam.PolicyStatement(\n        effect=iam.Effect.ALLOW,\n        principals=[\n            iam.ServicePrincipal(\"application-autoscaling.amazonaws.com\")\n        ],\n        actions=[\"sts:AssumeRole\"\n        ]\n    ))\n\ntasks.EmrCreateCluster(self, \"Create Cluster\",\n    instances=tasks.EmrCreateCluster.InstancesConfigProperty(),\n    cluster_role=cluster_role,\n    name=sfn.TaskInput.from_json_path_at(\"$.ClusterName\").value,\n    service_role=service_role,\n    auto_scaling_role=auto_scaling_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Role clusterRole = new Role(this, \"ClusterRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"ec2.amazonaws.com\")\n});\n\nRole serviceRole = new Role(this, \"ServiceRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n});\n\nRole autoScalingRole = new Role(this, \"AutoScalingRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n});\n\nautoScalingRole.AssumeRolePolicy.AddStatements(\nnew PolicyStatement(new PolicyStatementProps {\n    Effect = Effect.ALLOW,\n    Principals = new [] {\n        new ServicePrincipal(\"application-autoscaling.amazonaws.com\") },\n    Actions = new [] { \"sts:AssumeRole\" }\n}));\n\nnew EmrCreateCluster(this, \"Create Cluster\", new EmrCreateClusterProps {\n    Instances = new InstancesConfigProperty { },\n    ClusterRole = clusterRole,\n    Name = TaskInput.FromJsonPathAt(\"$.ClusterName\").Value,\n    ServiceRole = serviceRole,\n    AutoScalingRole = autoScalingRole\n});",
          "version": "1"
        },
        "java": {
          "source": "Role clusterRole = Role.Builder.create(this, \"ClusterRole\")\n        .assumedBy(new ServicePrincipal(\"ec2.amazonaws.com\"))\n        .build();\n\nRole serviceRole = Role.Builder.create(this, \"ServiceRole\")\n        .assumedBy(new ServicePrincipal(\"elasticmapreduce.amazonaws.com\"))\n        .build();\n\nRole autoScalingRole = Role.Builder.create(this, \"AutoScalingRole\")\n        .assumedBy(new ServicePrincipal(\"elasticmapreduce.amazonaws.com\"))\n        .build();\n\nautoScalingRole.assumeRolePolicy.addStatements(\nPolicyStatement.Builder.create()\n        .effect(Effect.ALLOW)\n        .principals(List.of(\n            new ServicePrincipal(\"application-autoscaling.amazonaws.com\")))\n        .actions(List.of(\"sts:AssumeRole\"))\n        .build());\n\nEmrCreateCluster.Builder.create(this, \"Create Cluster\")\n        .instances(InstancesConfigProperty.builder().build())\n        .clusterRole(clusterRole)\n        .name(TaskInput.fromJsonPathAt(\"$.ClusterName\").getValue())\n        .serviceRole(serviceRole)\n        .autoScalingRole(autoScalingRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "clusterRole := iam.NewRole(this, jsii.String(\"ClusterRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"ec2.amazonaws.com\")),\n})\n\nserviceRole := iam.NewRole(this, jsii.String(\"ServiceRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"elasticmapreduce.amazonaws.com\")),\n})\n\nautoScalingRole := iam.NewRole(this, jsii.String(\"AutoScalingRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"elasticmapreduce.amazonaws.com\")),\n})\n\nautoScalingRole.assumeRolePolicy.addStatements(\niam.NewPolicyStatement(&policyStatementProps{\n\teffect: iam.effect_ALLOW,\n\tprincipals: []iPrincipal{\n\t\tiam.NewServicePrincipal(jsii.String(\"application-autoscaling.amazonaws.com\")),\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"sts:AssumeRole\"),\n\t},\n}))\n\ntasks.NewEmrCreateCluster(this, jsii.String(\"Create Cluster\"), &emrCreateClusterProps{\n\tinstances: &instancesConfigProperty{\n\t},\n\tclusterRole: clusterRole,\n\tname: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.ClusterName\")).value,\n\tserviceRole: serviceRole,\n\tautoScalingRole: autoScalingRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const clusterRole = new iam.Role(this, 'ClusterRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\n});\n\nconst serviceRole = new iam.Role(this, 'ServiceRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nconst autoScalingRole = new iam.Role(this, 'AutoScalingRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nautoScalingRole.assumeRolePolicy?.addStatements(\n  new iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    principals: [\n      new iam.ServicePrincipal('application-autoscaling.amazonaws.com'),\n    ],\n    actions: [\n      'sts:AssumeRole',\n    ],\n  }));\n)\n\nnew tasks.EmrCreateCluster(this, 'Create Cluster', {\n  instances: {},\n  clusterRole,\n  name: sfn.TaskInput.fromJsonPathAt('$.ClusterName').value,\n  serviceRole,\n  autoScalingRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 680
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.PolicyDocument#addStatements",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#assumeRolePolicy",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstancesConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst clusterRole = new iam.Role(this, 'ClusterRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\n});\n\nconst serviceRole = new iam.Role(this, 'ServiceRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nconst autoScalingRole = new iam.Role(this, 'AutoScalingRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nautoScalingRole.assumeRolePolicy?.addStatements(\n  new iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    principals: [\n      new iam.ServicePrincipal('application-autoscaling.amazonaws.com'),\n    ],\n    actions: [\n      'sts:AssumeRole',\n    ],\n  }));\n\nnew tasks.EmrCreateCluster(this, 'Create Cluster', {\n  instances: {},\n  clusterRole,\n  name: sfn.TaskInput.fromJsonPathAt('$.ClusterName').value,\n  serviceRole,\n  autoScalingRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "28": 1,
        "75": 42,
        "104": 4,
        "192": 2,
        "193": 6,
        "194": 16,
        "196": 2,
        "197": 9,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 3
      },
      "fqnsFingerprint": "81c9e7f7be3c08a57177a6554e427664735d28805b9d00b3c6c8eb88af4f7362"
    },
    "4cb86444f03484d56fad2ba0bfa50e14bd87afd51402bda32a88038190531f6b": {
      "translations": {
        "python": {
          "source": "tasks.EmrCreateCluster(self, \"Create Cluster\",\n    instances=tasks.EmrCreateCluster.InstancesConfigProperty(),\n    name=sfn.TaskInput.from_json_path_at(\"$.ClusterName\").value,\n    step_concurrency_level=10\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrCreateCluster(this, \"Create Cluster\", new EmrCreateClusterProps {\n    Instances = new InstancesConfigProperty { },\n    Name = TaskInput.FromJsonPathAt(\"$.ClusterName\").Value,\n    StepConcurrencyLevel = 10\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrCreateCluster.Builder.create(this, \"Create Cluster\")\n        .instances(InstancesConfigProperty.builder().build())\n        .name(TaskInput.fromJsonPathAt(\"$.ClusterName\").getValue())\n        .stepConcurrencyLevel(10)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrCreateCluster(this, jsii.String(\"Create Cluster\"), &emrCreateClusterProps{\n\tinstances: &instancesConfigProperty{\n\t},\n\tname: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.ClusterName\")).value,\n\tstepConcurrencyLevel: jsii.Number(10),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrCreateCluster(this, 'Create Cluster', {\n  instances: {},\n  name: sfn.TaskInput.fromJsonPathAt('$.ClusterName').value,\n  stepConcurrencyLevel: 10,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 719
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstancesConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrCreateCluster(this, 'Create Cluster', {\n  instances: {},\n  name: sfn.TaskInput.fromJsonPathAt('$.ClusterName').value,\n  stepConcurrencyLevel: 10,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "2e38df9e3610a9b25cca7e5c72305462116bd80ad3d7ec62eee89962d5cfdfc3"
    },
    "c0687accc33d0aa04b41fb402cbbbbc9377b78e888d94422f6209f5f43fbab68": {
      "translations": {
        "python": {
          "source": "tasks.EmrSetClusterTerminationProtection(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    termination_protected=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrSetClusterTerminationProtection(this, \"Task\", new EmrSetClusterTerminationProtectionProps {\n    ClusterId = \"ClusterId\",\n    TerminationProtected = false\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrSetClusterTerminationProtection.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .terminationProtected(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrSetClusterTerminationProtection(this, jsii.String(\"Task\"), &emrSetClusterTerminationProtectionProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tterminationProtected: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrSetClusterTerminationProtection(this, 'Task', {\n  clusterId: 'ClusterId',\n  terminationProtected: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 734
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrSetClusterTerminationProtection",
        "@aws-cdk/aws-stepfunctions-tasks.EmrSetClusterTerminationProtectionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrSetClusterTerminationProtection(this, 'Task', {\n  clusterId: 'ClusterId',\n  terminationProtected: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "9729e1f2bfde8ecfa52b834f47f84e780729cd4dd4b09ca45dac468a2a9a0d2c"
    },
    "35291beabc7f0e5753b505e64170daecab09817ec60dabfe914f29243a5ca5d3": {
      "translations": {
        "python": {
          "source": "tasks.EmrTerminateCluster(self, \"Task\",\n    cluster_id=\"ClusterId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrTerminateCluster(this, \"Task\", new EmrTerminateClusterProps {\n    ClusterId = \"ClusterId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrTerminateCluster.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrTerminateCluster(this, jsii.String(\"Task\"), &emrTerminateClusterProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrTerminateCluster(this, 'Task', {\n  clusterId: 'ClusterId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 746
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrTerminateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrTerminateClusterProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrTerminateCluster(this, 'Task', {\n  clusterId: 'ClusterId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "2ee89db8944f13fc8f35e9ca61644f9925e2f648b021d7746d654b2b60081a4a"
    },
    "bc298daaae5743bb9535356db2985012ceb0b59c3ef6c957478643352717b086": {
      "translations": {
        "python": {
          "source": "tasks.EmrAddStep(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    name=\"StepName\",\n    jar=\"Jar\",\n    action_on_failure=tasks.ActionOnFailure.CONTINUE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrAddStep(this, \"Task\", new EmrAddStepProps {\n    ClusterId = \"ClusterId\",\n    Name = \"StepName\",\n    Jar = \"Jar\",\n    ActionOnFailure = ActionOnFailure.CONTINUE\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrAddStep.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .name(\"StepName\")\n        .jar(\"Jar\")\n        .actionOnFailure(ActionOnFailure.CONTINUE)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrAddStep(this, jsii.String(\"Task\"), &emrAddStepProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tname: jsii.String(\"StepName\"),\n\tjar: jsii.String(\"Jar\"),\n\tactionOnFailure: tasks.actionOnFailure_CONTINUE,\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrAddStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  name: 'StepName',\n  jar: 'Jar',\n  actionOnFailure: tasks.ActionOnFailure.CONTINUE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 757
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ActionOnFailure",
        "@aws-cdk/aws-stepfunctions-tasks.ActionOnFailure#CONTINUE",
        "@aws-cdk/aws-stepfunctions-tasks.EmrAddStep",
        "@aws-cdk/aws-stepfunctions-tasks.EmrAddStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrAddStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  name: 'StepName',\n  jar: 'Jar',\n  actionOnFailure: tasks.ActionOnFailure.CONTINUE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "5d569175d3effd76c258793f5de01eb19668a01dfeb7b7cdfade748229b3fb90"
    },
    "0e521eafc4faadfd46faba311eeaf23058acca966a041d3d75b5f9f40fb9f671": {
      "translations": {
        "python": {
          "source": "tasks.EmrCancelStep(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    step_id=\"StepId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrCancelStep(this, \"Task\", new EmrCancelStepProps {\n    ClusterId = \"ClusterId\",\n    StepId = \"StepId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrCancelStep.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .stepId(\"StepId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrCancelStep(this, jsii.String(\"Task\"), &emrCancelStepProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tstepId: jsii.String(\"StepId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrCancelStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  stepId: 'StepId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 771
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCancelStep",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCancelStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrCancelStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  stepId: 'StepId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "2e34968d5811c29e242057f7024998f84a487f4ba6fa6c13ea38f007ae2a9b51"
    },
    "e33c46544be1ad83b17b39d993c9a38651dd59a63af71dd279fd5b01fda4befc": {
      "translations": {
        "python": {
          "source": "tasks.EmrModifyInstanceFleetByName(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    instance_fleet_name=\"InstanceFleetName\",\n    target_on_demand_capacity=2,\n    target_spot_capacity=0\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrModifyInstanceFleetByName(this, \"Task\", new EmrModifyInstanceFleetByNameProps {\n    ClusterId = \"ClusterId\",\n    InstanceFleetName = \"InstanceFleetName\",\n    TargetOnDemandCapacity = 2,\n    TargetSpotCapacity = 0\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrModifyInstanceFleetByName.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .instanceFleetName(\"InstanceFleetName\")\n        .targetOnDemandCapacity(2)\n        .targetSpotCapacity(0)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrModifyInstanceFleetByName(this, jsii.String(\"Task\"), &emrModifyInstanceFleetByNameProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tinstanceFleetName: jsii.String(\"InstanceFleetName\"),\n\ttargetOnDemandCapacity: jsii.Number(2),\n\ttargetSpotCapacity: jsii.Number(0),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrModifyInstanceFleetByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceFleetName: 'InstanceFleetName',\n  targetOnDemandCapacity: 2,\n  targetSpotCapacity: 0,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 785
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceFleetByName",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceFleetByNameProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrModifyInstanceFleetByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceFleetName: 'InstanceFleetName',\n  targetOnDemandCapacity: 2,\n  targetSpotCapacity: 0,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "3843dd63e7601832dd644a3322d78ce5c259344031ed214a2cc3cb0dbc205c68"
    },
    "961dbcb6abeea204e79e8437392f0d10eca76d5be89461db6bac2d70e8de94d6": {
      "translations": {
        "python": {
          "source": "tasks.EmrModifyInstanceGroupByName(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    instance_group_name=sfn.JsonPath.string_at(\"$.InstanceGroupName\"),\n    instance_group=tasks.EmrModifyInstanceGroupByName.InstanceGroupModifyConfigProperty(\n        instance_count=1\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrModifyInstanceGroupByName(this, \"Task\", new EmrModifyInstanceGroupByNameProps {\n    ClusterId = \"ClusterId\",\n    InstanceGroupName = JsonPath.StringAt(\"$.InstanceGroupName\"),\n    InstanceGroup = new InstanceGroupModifyConfigProperty {\n        InstanceCount = 1\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrModifyInstanceGroupByName.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .instanceGroupName(JsonPath.stringAt(\"$.InstanceGroupName\"))\n        .instanceGroup(InstanceGroupModifyConfigProperty.builder()\n                .instanceCount(1)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrModifyInstanceGroupByName(this, jsii.String(\"Task\"), &emrModifyInstanceGroupByNameProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tinstanceGroupName: sfn.jsonPath.stringAt(jsii.String(\"$.InstanceGroupName\")),\n\tinstanceGroup: &instanceGroupModifyConfigProperty{\n\t\tinstanceCount: jsii.Number(1),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrModifyInstanceGroupByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceGroupName: sfn.JsonPath.stringAt('$.InstanceGroupName'),\n  instanceGroup: {\n    instanceCount: 1,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 800
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName.InstanceGroupModifyConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByNameProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrModifyInstanceGroupByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceGroupName: sfn.JsonPath.stringAt('$.InstanceGroupName'),\n  instanceGroup: {\n    instanceCount: 1,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "8fc4c105d448150f89e195ec445325bf1a3b4ba20f7d29fab7a4e05df0aacec4"
    },
    "ebb4430810795d578fcf79310447bee4a0c18e608073134a461926e5145811dd": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersCreateVirtualCluster(self, \"Create a Virtual Cluster\",\n    eks_cluster=tasks.EksClusterInput.from_task_input(sfn.TaskInput.from_text(\"clusterId\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersCreateVirtualCluster(this, \"Create a Virtual Cluster\", new EmrContainersCreateVirtualClusterProps {\n    EksCluster = EksClusterInput.FromTaskInput(TaskInput.FromText(\"clusterId\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersCreateVirtualCluster.Builder.create(this, \"Create a Virtual Cluster\")\n        .eksCluster(EksClusterInput.fromTaskInput(TaskInput.fromText(\"clusterId\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersCreateVirtualCluster(this, jsii.String(\"Create a Virtual Cluster\"), &emrContainersCreateVirtualClusterProps{\n\teksCluster: tasks.eksClusterInput.fromTaskInput(sfn.taskInput.fromText(jsii.String(\"clusterId\"))),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromTaskInput(sfn.TaskInput.fromText('clusterId')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 825
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput#fromTaskInput",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromTaskInput(sfn.TaskInput.fromText('clusterId')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "b80c4d32a746368cac6968e7f924f895b263582c8c8282f0e73bcc5c73b55a0a"
    },
    "88044870a1178492201747a974cf30271e66b9409a90bc6624031b035f9ccb4a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_eks as eks\n\n# eks_cluster: eks.Cluster\n\n\ntasks.EmrContainersCreateVirtualCluster(self, \"Create a Virtual Cluster\",\n    eks_cluster=tasks.EksClusterInput.from_cluster(eks_cluster)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EKS;\n\nCluster eksCluster;\n\n\nnew EmrContainersCreateVirtualCluster(this, \"Create a Virtual Cluster\", new EmrContainersCreateVirtualClusterProps {\n    EksCluster = EksClusterInput.FromCluster(eksCluster)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.eks.*;\n\nCluster eksCluster;\n\n\nEmrContainersCreateVirtualCluster.Builder.create(this, \"Create a Virtual Cluster\")\n        .eksCluster(EksClusterInput.fromCluster(eksCluster))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nvar eksCluster cluster\n\ntasks.NewEmrContainersCreateVirtualCluster(this, jsii.String(\"Create a Virtual Cluster\"), &emrContainersCreateVirtualClusterProps{\n\teksCluster: tasks.eksClusterInput.fromCluster(eksCluster),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as eks from '@aws-cdk/aws-eks';\n\ndeclare const eksCluster: eks.Cluster;\n\nnew tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromCluster(eksCluster),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 833
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput#fromCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualClusterProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const eksCluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromCluster(eksCluster),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "418e26c00d09696bfc7adc931807e79032a892999f1117288f40c49caadee765"
    },
    "126ecca5cec9575c11039707b38270499a9fad1a7758b7d0d96866f553290a27": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersCreateVirtualCluster(self, \"Create a Virtual Cluster\",\n    eks_cluster=tasks.EksClusterInput.from_task_input(sfn.TaskInput.from_text(\"clusterId\")),\n    eks_namespace=\"specified-namespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersCreateVirtualCluster(this, \"Create a Virtual Cluster\", new EmrContainersCreateVirtualClusterProps {\n    EksCluster = EksClusterInput.FromTaskInput(TaskInput.FromText(\"clusterId\")),\n    EksNamespace = \"specified-namespace\"\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersCreateVirtualCluster.Builder.create(this, \"Create a Virtual Cluster\")\n        .eksCluster(EksClusterInput.fromTaskInput(TaskInput.fromText(\"clusterId\")))\n        .eksNamespace(\"specified-namespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersCreateVirtualCluster(this, jsii.String(\"Create a Virtual Cluster\"), &emrContainersCreateVirtualClusterProps{\n\teksCluster: tasks.eksClusterInput.fromTaskInput(sfn.taskInput.fromText(jsii.String(\"clusterId\"))),\n\teksNamespace: jsii.String(\"specified-namespace\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromTaskInput(sfn.TaskInput.fromText('clusterId')),\n  eksNamespace: 'specified-namespace',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 845
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput#fromTaskInput",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromTaskInput(sfn.TaskInput.fromText('clusterId')),\n  eksNamespace: 'specified-namespace',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "b80c4d32a746368cac6968e7f924f895b263582c8c8282f0e73bcc5c73b55a0a"
    },
    "ee45aefca3d65bc40befa4473ab74e085d0aae36c90ba00b7f087f79b0b34c5a": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersDeleteVirtualCluster(self, \"Delete a Virtual Cluster\",\n    virtual_cluster_id=sfn.TaskInput.from_json_path_at(\"$.virtualCluster\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersDeleteVirtualCluster(this, \"Delete a Virtual Cluster\", new EmrContainersDeleteVirtualClusterProps {\n    VirtualClusterId = TaskInput.FromJsonPathAt(\"$.virtualCluster\")\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersDeleteVirtualCluster.Builder.create(this, \"Delete a Virtual Cluster\")\n        .virtualClusterId(TaskInput.fromJsonPathAt(\"$.virtualCluster\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersDeleteVirtualCluster(this, jsii.String(\"Delete a Virtual Cluster\"), &emrContainersDeleteVirtualClusterProps{\n\tvirtualClusterId: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.virtualCluster\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersDeleteVirtualCluster(this, 'Delete a Virtual Cluster', {\n  virtualClusterId: sfn.TaskInput.fromJsonPathAt('$.virtualCluster'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 856
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersDeleteVirtualCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersDeleteVirtualClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersDeleteVirtualCluster(this, 'Delete a Virtual Cluster', {\n  virtualClusterId: sfn.TaskInput.fromJsonPathAt('$.virtualCluster'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "a6077da2ec208e5ff726ced8e114cb0e03657d3df9e82225096599be81a49a66"
    },
    "6f792ee537d07d06d1f4272908f1a70e9e8b7a3260cf0bfb6793ef9469b67439": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            spark_submit_parameters=\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            SparkSubmitParameters = \"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .sparkSubmitParameters(\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t\tsparkSubmitParameters: jsii.String(\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 879
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "193": 3,
        "194": 7,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "70e452c3f83715285f0fc116ec20cfb716e953bc9a47c19966c197ed01d4a65d"
    },
    "7f696026bc7445fc1fa2161858c925ba07849e81404a68a7527c43dc087d1973": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_name=\"EMR-Containers-Job\",\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        )\n    ),\n    application_config=[tasks.ApplicationConfiguration(\n        classification=tasks.Classification.SPARK_DEFAULTS,\n        properties={\n            \"spark.executor.instances\": \"1\",\n            \"spark.executor.memory\": \"512M\"\n        }\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobName = \"EMR-Containers-Job\",\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        }\n    },\n    ApplicationConfig = new [] { new ApplicationConfiguration {\n        Classification = Classification.SPARK_DEFAULTS,\n        Properties = new Dictionary<string, string> {\n            { \"spark.executor.instances\", \"1\" },\n            { \"spark.executor.memory\", \"512M\" }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobName(\"EMR-Containers-Job\")\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .build())\n                .build())\n        .applicationConfig(List.of(ApplicationConfiguration.builder()\n                .classification(Classification.SPARK_DEFAULTS)\n                .properties(Map.of(\n                        \"spark.executor.instances\", \"1\",\n                        \"spark.executor.memory\", \"512M\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobName: jsii.String(\"EMR-Containers-Job\"),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t},\n\t},\n\tapplicationConfig: []applicationConfiguration{\n\t\t&applicationConfiguration{\n\t\t\tclassification: tasks.classification_SPARK_DEFAULTS(),\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"spark.executor.instances\": jsii.String(\"1\"),\n\t\t\t\t\"spark.executor.memory\": jsii.String(\"512M\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 894
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.Classification",
        "@aws-cdk/aws-stepfunctions-tasks.Classification#SPARK_DEFAULTS",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 23,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 11
      },
      "fqnsFingerprint": "f326c63003a23b7bc92021d0409fcc199f142e6192e2f115710fd3ed22301c96"
    },
    "1c672469285f1a8ecae623ab5d43fca518800c5754eba11da7df67c2fcde2cb3": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            spark_submit_parameters=\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        )\n    ),\n    monitoring=tasks.Monitoring(\n        logging=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            SparkSubmitParameters = \"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        }\n    },\n    Monitoring = new Monitoring {\n        Logging = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .sparkSubmitParameters(\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\")\n                        .build())\n                .build())\n        .monitoring(Monitoring.builder()\n                .logging(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t\tsparkSubmitParameters: jsii.String(\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"),\n\t\t},\n\t},\n\tmonitoring: &monitoring{\n\t\tlogging: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n  monitoring: {\n    logging: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 916
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.Monitoring",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n  monitoring: {\n    logging: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 1,
        "106": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 8
      },
      "fqnsFingerprint": "78590f203cbda285f99fc64bbbf70fdca618458749f07518e5a18a2188d3c364"
    },
    "effb1e904e353b5586d877af6fe3d026c399773cd0e6350b2abff6de86f8ad2d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"Log Group\")\nlog_bucket = s3.Bucket(self, \"S3 Bucket\")\n\ntasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            spark_submit_parameters=\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        )\n    ),\n    monitoring=tasks.Monitoring(\n        log_group=log_group,\n        log_bucket=log_bucket\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\n\n\nLogGroup logGroup = new LogGroup(this, \"Log Group\");\nBucket logBucket = new Bucket(this, \"S3 Bucket\");\n\nnew EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            SparkSubmitParameters = \"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        }\n    },\n    Monitoring = new Monitoring {\n        LogGroup = logGroup,\n        LogBucket = logBucket\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = new LogGroup(this, \"Log Group\");\nBucket logBucket = new Bucket(this, \"S3 Bucket\");\n\nEmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .sparkSubmitParameters(\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\")\n                        .build())\n                .build())\n        .monitoring(Monitoring.builder()\n                .logGroup(logGroup)\n                .logBucket(logBucket)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import logs \"github.com/aws-samples/dummy/awscdkawslogs\"\n\nlogGroup := logs.NewLogGroup(this, jsii.String(\"Log Group\"))\nlogBucket := s3.NewBucket(this, jsii.String(\"S3 Bucket\"))\n\ntasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t\tsparkSubmitParameters: jsii.String(\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"),\n\t\t},\n\t},\n\tmonitoring: &monitoring{\n\t\tlogGroup: logGroup,\n\t\tlogBucket: logBucket,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'Log Group');\nconst logBucket = new s3.Bucket(this, 'S3 Bucket')\n\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n  monitoring: {\n    logGroup: logGroup,\n    logBucket: logBucket,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 934
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.Monitoring",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'Log Group');\nconst logBucket = new s3.Bucket(this, 'S3 Bucket')\n\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n  monitoring: {\n    logGroup: logGroup,\n    logBucket: logBucket,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 29,
        "104": 3,
        "193": 4,
        "194": 9,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "20d55b6267ba0262391da9ecbadb24749381caa1a8ef6e585187d44144e2c94e"
    },
    "76452567ae05b81e058d559e6a1cadb6fb186a1d80539ff4af997b587854d69f": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_task_input(sfn.TaskInput.from_json_path_at(\"$.VirtualClusterId\")),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_name=\"EMR-Containers-Job\",\n    execution_role=iam.Role.from_role_arn(self, \"Job-Execution-Role\", \"arn:aws:iam::xxxxxxxxxxxx:role/JobExecutionRole\"),\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            spark_submit_parameters=\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromTaskInput(TaskInput.FromJsonPathAt(\"$.VirtualClusterId\")),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobName = \"EMR-Containers-Job\",\n    ExecutionRole = Role.FromRoleArn(this, \"Job-Execution-Role\", \"arn:aws:iam::xxxxxxxxxxxx:role/JobExecutionRole\"),\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            SparkSubmitParameters = \"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromTaskInput(TaskInput.fromJsonPathAt(\"$.VirtualClusterId\")))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobName(\"EMR-Containers-Job\")\n        .executionRole(Role.fromRoleArn(this, \"Job-Execution-Role\", \"arn:aws:iam::xxxxxxxxxxxx:role/JobExecutionRole\"))\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .sparkSubmitParameters(\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromTaskInput(sfn.taskInput.fromJsonPathAt(jsii.String(\"$.VirtualClusterId\"))),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobName: jsii.String(\"EMR-Containers-Job\"),\n\texecutionRole: iam.role.fromRoleArn(this, jsii.String(\"Job-Execution-Role\"), jsii.String(\"arn:aws:iam::xxxxxxxxxxxx:role/JobExecutionRole\")),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.*taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t\tsparkSubmitParameters: jsii.String(\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster:tasks.VirtualClusterInput.fromTaskInput(sfn.TaskInput.fromJsonPathAt('$.VirtualClusterId')),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  executionRole: iam.Role.fromRoleArn(this, 'Job-Execution-Role', 'arn:aws:iam::xxxxxxxxxxxx:role/JobExecutionRole'),\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 958
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromTaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster:tasks.VirtualClusterInput.fromTaskInput(sfn.TaskInput.fromJsonPathAt('$.VirtualClusterId')),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  executionRole: iam.Role.fromRoleArn(this, 'Job-Execution-Role', 'arn:aws:iam::xxxxxxxxxxxx:role/JobExecutionRole'),\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 25,
        "104": 2,
        "193": 3,
        "194": 11,
        "196": 4,
        "197": 1,
        "226": 1,
        "281": 8
      },
      "fqnsFingerprint": "a21d494edbd1d0ebdaf4116a6c6bb50297b15cb2df8b87f75368b62bf249d8a2"
    },
    "c88c14ea4b3343e22fb8fb9edca7c96445a41d0276883dd45a32d36ce5cef1fd": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_eks as eks\n\n\nmy_eks_cluster = eks.Cluster(self, \"my sample cluster\",\n    version=eks.KubernetesVersion.V1_18,\n    cluster_name=\"myEksCluster\"\n)\n\ntasks.EksCall(self, \"Call a EKS Endpoint\",\n    cluster=my_eks_cluster,\n    http_method=tasks.HttpMethods.GET,\n    http_path=\"/api/v1/namespaces/default/pods\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EKS;\n\n\nCluster myEksCluster = new Cluster(this, \"my sample cluster\", new ClusterProps {\n    Version = KubernetesVersion.V1_18,\n    ClusterName = \"myEksCluster\"\n});\n\nnew EksCall(this, \"Call a EKS Endpoint\", new EksCallProps {\n    Cluster = myEksCluster,\n    HttpMethod = HttpMethods.GET,\n    HttpPath = \"/api/v1/namespaces/default/pods\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.eks.*;\n\n\nCluster myEksCluster = Cluster.Builder.create(this, \"my sample cluster\")\n        .version(KubernetesVersion.V1_18)\n        .clusterName(\"myEksCluster\")\n        .build();\n\nEksCall.Builder.create(this, \"Call a EKS Endpoint\")\n        .cluster(myEksCluster)\n        .httpMethod(HttpMethods.GET)\n        .httpPath(\"/api/v1/namespaces/default/pods\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nmyEksCluster := eks.NewCluster(this, jsii.String(\"my sample cluster\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_18(),\n\tclusterName: jsii.String(\"myEksCluster\"),\n})\n\ntasks.NewEksCall(this, jsii.String(\"Call a EKS Endpoint\"), &eksCallProps{\n\tcluster: myEksCluster,\n\thttpMethod: tasks.httpMethods_GET,\n\thttpPath: jsii.String(\"/api/v1/namespaces/default/pods\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as eks from '@aws-cdk/aws-eks';\n\nconst myEksCluster = new eks.Cluster(this, 'my sample cluster', {\n  version: eks.KubernetesVersion.V1_18,\n  clusterName: 'myEksCluster',\n});\n\nnew tasks.EksCall(this, 'Call a EKS Endpoint', {\n  cluster: myEksCluster,\n  httpMethod: tasks.HttpMethods.GET,\n  httpPath: '/api/v1/namespaces/default/pods',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 987
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_18",
        "@aws-cdk/aws-stepfunctions-tasks.EksCall",
        "@aws-cdk/aws-stepfunctions-tasks.EksCallProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethods",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethods#GET",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myEksCluster = new eks.Cluster(this, 'my sample cluster', {\n  version: eks.KubernetesVersion.V1_18,\n  clusterName: 'myEksCluster',\n});\n\nnew tasks.EksCall(this, 'Call a EKS Endpoint', {\n  cluster: myEksCluster,\n  httpMethod: tasks.HttpMethods.GET,\n  httpPath: '/api/v1/namespaces/default/pods',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 2,
        "193": 2,
        "194": 6,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2045a691be88a167462fca387dd6f1b77faf19bca3e58702fa3a7aa576860826"
    },
    "a307d0082136cfd26613ffb93946f574863a7c0df177e0de1142c56b9a2e1683": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_events as events\n\n\nmy_event_bus = events.EventBus(self, \"EventBus\",\n    event_bus_name=\"MyEventBus1\"\n)\n\ntasks.EventBridgePutEvents(self, \"Send an event to EventBridge\",\n    entries=[tasks.EventBridgePutEventsEntry(\n        detail=sfn.TaskInput.from_object({\n            \"Message\": \"Hello from Step Functions!\"\n        }),\n        event_bus=my_event_bus,\n        detail_type=\"MessageFromStepFunctions\",\n        source=\"step.functions\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\n\n\nEventBus myEventBus = new EventBus(this, \"EventBus\", new EventBusProps {\n    EventBusName = \"MyEventBus1\"\n});\n\nnew EventBridgePutEvents(this, \"Send an event to EventBridge\", new EventBridgePutEventsProps {\n    Entries = new [] { new EventBridgePutEventsEntry {\n        Detail = TaskInput.FromObject(new Dictionary<string, object> {\n            { \"Message\", \"Hello from Step Functions!\" }\n        }),\n        EventBus = myEventBus,\n        DetailType = \"MessageFromStepFunctions\",\n        Source = \"step.functions\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.*;\n\n\nEventBus myEventBus = EventBus.Builder.create(this, \"EventBus\")\n        .eventBusName(\"MyEventBus1\")\n        .build();\n\nEventBridgePutEvents.Builder.create(this, \"Send an event to EventBridge\")\n        .entries(List.of(EventBridgePutEventsEntry.builder()\n                .detail(TaskInput.fromObject(Map.of(\n                        \"Message\", \"Hello from Step Functions!\")))\n                .eventBus(myEventBus)\n                .detailType(\"MessageFromStepFunctions\")\n                .source(\"step.functions\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\n\nmyEventBus := events.NewEventBus(this, jsii.String(\"EventBus\"), &eventBusProps{\n\teventBusName: jsii.String(\"MyEventBus1\"),\n})\n\ntasks.NewEventBridgePutEvents(this, jsii.String(\"Send an event to EventBridge\"), &eventBridgePutEventsProps{\n\tentries: []eventBridgePutEventsEntry{\n\t\t&eventBridgePutEventsEntry{\n\t\t\tdetail: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\t\t\"Message\": jsii.String(\"Hello from Step Functions!\"),\n\t\t\t}),\n\t\t\teventBus: myEventBus,\n\t\t\tdetailType: jsii.String(\"MessageFromStepFunctions\"),\n\t\t\tsource: jsii.String(\"step.functions\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as events from '@aws-cdk/aws-events';\n\nconst myEventBus = new events.EventBus(this, 'EventBus', {\n  eventBusName: 'MyEventBus1',\n});\n\nnew tasks.EventBridgePutEvents(this, 'Send an event to EventBridge', {\n  entries: [{\n    detail: sfn.TaskInput.fromObject({\n      Message: 'Hello from Step Functions!',\n    }),\n    eventBus: myEventBus,\n    detailType: 'MessageFromStepFunctions',\n    source: 'step.functions',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1016
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBusProps",
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/aws-stepfunctions-tasks.EventBridgePutEvents",
        "@aws-cdk/aws-stepfunctions-tasks.EventBridgePutEventsProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myEventBus = new events.EventBus(this, 'EventBus', {\n  eventBusName: 'MyEventBus1',\n});\n\nnew tasks.EventBridgePutEvents(this, 'Send an event to EventBridge', {\n  entries: [{\n    detail: sfn.TaskInput.fromObject({\n      Message: 'Hello from Step Functions!',\n    }),\n    eventBus: myEventBus,\n    detailType: 'MessageFromStepFunctions',\n    source: 'step.functions',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 17,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "abf119bd80799a041776a9bbf752e294ddf24d8e053d557268e9fe4388bca81e"
    },
    "93b8407d26871a83d61c1be89ed911cb290fae6bf616ed68d15edfc32eb037ce": {
      "translations": {
        "python": {
          "source": "tasks.GlueStartJobRun(self, \"Task\",\n    glue_job_name=\"my-glue-job\",\n    arguments=sfn.TaskInput.from_object({\n        \"key\": \"value\"\n    }),\n    timeout=Duration.minutes(30),\n    notify_delay_after=Duration.minutes(5)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new GlueStartJobRun(this, \"Task\", new GlueStartJobRunProps {\n    GlueJobName = \"my-glue-job\",\n    Arguments = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"key\", \"value\" }\n    }),\n    Timeout = Duration.Minutes(30),\n    NotifyDelayAfter = Duration.Minutes(5)\n});",
          "version": "1"
        },
        "java": {
          "source": "GlueStartJobRun.Builder.create(this, \"Task\")\n        .glueJobName(\"my-glue-job\")\n        .arguments(TaskInput.fromObject(Map.of(\n                \"key\", \"value\")))\n        .timeout(Duration.minutes(30))\n        .notifyDelayAfter(Duration.minutes(5))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewGlueStartJobRun(this, jsii.String(\"Task\"), &glueStartJobRunProps{\n\tglueJobName: jsii.String(\"my-glue-job\"),\n\targuments: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"key\": jsii.String(\"value\"),\n\t}),\n\ttimeout: duration.minutes(jsii.Number(30)),\n\tnotifyDelayAfter: *duration.minutes(jsii.Number(5)),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.GlueStartJobRun(this, 'Task', {\n  glueJobName: 'my-glue-job',\n  arguments: sfn.TaskInput.fromObject({\n    key: 'value',\n  }),\n  timeout: Duration.minutes(30),\n  notifyDelayAfter: Duration.minutes(5),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1041
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.GlueStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.GlueStartJobRunProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.GlueStartJobRun(this, 'Task', {\n  glueJobName: 'my-glue-job',\n  arguments: sfn.TaskInput.fromObject({\n    key: 'value',\n  }),\n  timeout: Duration.minutes(30),\n  notifyDelayAfter: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 2,
        "194": 5,
        "196": 3,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "c7f826cc3eff5642f2d17e5494473ccd44da53ab9c6a3e2bb129c9a9e592ab21"
    },
    "b6e361f0da3a864a4f46b58e39f19336c686fef28559e2ba0fb080f1929648a5": {
      "translations": {
        "python": {
          "source": "tasks.GlueDataBrewStartJobRun(self, \"Task\",\n    name=\"databrew-job\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new GlueDataBrewStartJobRun(this, \"Task\", new GlueDataBrewStartJobRunProps {\n    Name = \"databrew-job\"\n});",
          "version": "1"
        },
        "java": {
          "source": "GlueDataBrewStartJobRun.Builder.create(this, \"Task\")\n        .name(\"databrew-job\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewGlueDataBrewStartJobRun(this, jsii.String(\"Task\"), &glueDataBrewStartJobRunProps{\n\tname: jsii.String(\"databrew-job\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.GlueDataBrewStartJobRun(this, 'Task', {\n  name: 'databrew-job',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1058
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.GlueDataBrewStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.GlueDataBrewStartJobRunProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.GlueDataBrewStartJobRun(this, 'Task', {\n  name: 'databrew-job',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "9841cafffab3a2caad0c6ad4d3f7cdb8bc43306bd751b25ca0699b81b2ba783c"
    },
    "68cc7655b9603f53686d389a979711f20a4a107a644a00931e16ba0121123be9": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\ntasks.LambdaInvoke(self, \"Invoke with state input\",\n    lambda_function=fn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nnew LambdaInvoke(this, \"Invoke with state input\", new LambdaInvokeProps {\n    LambdaFunction = fn\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nLambdaInvoke.Builder.create(this, \"Invoke with state input\")\n        .lambdaFunction(fn)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\ntasks.NewLambdaInvoke(this, jsii.String(\"Invoke with state input\"), &lambdaInvokeProps{\n\tlambdaFunction: fn,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke with state input', {\n  lambdaFunction: fn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1075
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.LambdaInvoke(this, 'Invoke with state input', {\n  lambdaFunction: fn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "693c9716b22909a466b52d694fb2a81bcd1ec2411810518dc1def4791b965e71"
    },
    "618ab78c25f03f76a1632e3398647e2685aa01c25ee6525a4f7f6a400fea12ed": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\ntasks.LambdaInvoke(self, \"Invoke with empty object as payload\",\n    lambda_function=fn,\n    payload=sfn.TaskInput.from_object({})\n)\n\n# use the output of fn as input\ntasks.LambdaInvoke(self, \"Invoke with payload field in the state input\",\n    lambda_function=fn,\n    payload=sfn.TaskInput.from_json_path_at(\"$.Payload\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nnew LambdaInvoke(this, \"Invoke with empty object as payload\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    Payload = TaskInput.FromObject(new Dictionary<string, object> { })\n});\n\n// use the output of fn as input\n// use the output of fn as input\nnew LambdaInvoke(this, \"Invoke with payload field in the state input\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    Payload = TaskInput.FromJsonPathAt(\"$.Payload\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nLambdaInvoke.Builder.create(this, \"Invoke with empty object as payload\")\n        .lambdaFunction(fn)\n        .payload(TaskInput.fromObject(Map.of()))\n        .build();\n\n// use the output of fn as input\n// use the output of fn as input\nLambdaInvoke.Builder.create(this, \"Invoke with payload field in the state input\")\n        .lambdaFunction(fn)\n        .payload(TaskInput.fromJsonPathAt(\"$.Payload\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\ntasks.NewLambdaInvoke(this, jsii.String(\"Invoke with empty object as payload\"), &lambdaInvokeProps{\n\tlambdaFunction: fn,\n\tpayload: sfn.taskInput.fromObject(map[string]interface{}{\n\t}),\n})\n\n// use the output of fn as input\n// use the output of fn as input\ntasks.NewLambdaInvoke(this, jsii.String(\"Invoke with payload field in the state input\"), &lambdaInvokeProps{\n\tlambdaFunction: fn,\n\tpayload: sfn.*taskInput.fromJsonPathAt(jsii.String(\"$.Payload\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke with empty object as payload', {\n  lambdaFunction: fn,\n  payload: sfn.TaskInput.fromObject({}),\n});\n\n// use the output of fn as input\nnew tasks.LambdaInvoke(this, 'Invoke with payload field in the state input', {\n  lambdaFunction: fn,\n  payload: sfn.TaskInput.fromJsonPathAt('$.Payload'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1091
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.LambdaInvoke(this, 'Invoke with empty object as payload', {\n  lambdaFunction: fn,\n  payload: sfn.TaskInput.fromObject({}),\n});\n\n// use the output of fn as input\nnew tasks.LambdaInvoke(this, 'Invoke with payload field in the state input', {\n  lambdaFunction: fn,\n  payload: sfn.TaskInput.fromJsonPathAt('$.Payload'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "3c47f87602362a4552b03ace42cf9ad24cc95ec3b997f315ee905f3732419d38"
    },
    "102db9f30faf553c305e25298828b204c72db0d592b4e24984f6a85acc3e296e": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\ntasks.LambdaInvoke(self, \"Invoke and set function response as task output\",\n    lambda_function=fn,\n    output_path=\"$.Payload\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nnew LambdaInvoke(this, \"Invoke and set function response as task output\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    OutputPath = \"$.Payload\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nLambdaInvoke.Builder.create(this, \"Invoke and set function response as task output\")\n        .lambdaFunction(fn)\n        .outputPath(\"$.Payload\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\ntasks.NewLambdaInvoke(this, jsii.String(\"Invoke and set function response as task output\"), &lambdaInvokeProps{\n\tlambdaFunction: fn,\n\toutputPath: jsii.String(\"$.Payload\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke and set function response as task output', {\n  lambdaFunction: fn,\n  outputPath: '$.Payload',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1108
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.LambdaInvoke(this, 'Invoke and set function response as task output', {\n  lambdaFunction: fn,\n  outputPath: '$.Payload',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "693c9716b22909a466b52d694fb2a81bcd1ec2411810518dc1def4791b965e71"
    },
    "49500c6ee30e57e3e3531ee93443817da5a15405f717c5338c905717590eee0b": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\ntasks.LambdaInvoke(self, \"Invoke and combine function response with task input\",\n    lambda_function=fn,\n    payload_response_only=True,\n    result_path=\"$.fn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nnew LambdaInvoke(this, \"Invoke and combine function response with task input\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    PayloadResponseOnly = true,\n    ResultPath = \"$.fn\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nLambdaInvoke.Builder.create(this, \"Invoke and combine function response with task input\")\n        .lambdaFunction(fn)\n        .payloadResponseOnly(true)\n        .resultPath(\"$.fn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\ntasks.NewLambdaInvoke(this, jsii.String(\"Invoke and combine function response with task input\"), &lambdaInvokeProps{\n\tlambdaFunction: fn,\n\tpayloadResponseOnly: jsii.Boolean(true),\n\tresultPath: jsii.String(\"$.fn\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke and combine function response with task input', {\n  lambdaFunction: fn,\n  payloadResponseOnly: true,\n  resultPath: '$.fn',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1121
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.LambdaInvoke(this, 'Invoke and combine function response with task input', {\n  lambdaFunction: fn,\n  payloadResponseOnly: true,\n  resultPath: '$.fn',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "693c9716b22909a466b52d694fb2a81bcd1ec2411810518dc1def4791b965e71"
    },
    "b24348c09df2f6fb6e86efc702f3c1d58f58ba15f657e6768f243c152ebfda28": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\ntasks.LambdaInvoke(self, \"Invoke with callback\",\n    lambda_function=fn,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    payload=sfn.TaskInput.from_object({\n        \"token\": sfn.JsonPath.task_token,\n        \"input\": sfn.JsonPath.string_at(\"$.someField\")\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nnew LambdaInvoke(this, \"Invoke with callback\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Payload = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"token\", JsonPath.TaskToken },\n        { \"input\", JsonPath.StringAt(\"$.someField\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nLambdaInvoke.Builder.create(this, \"Invoke with callback\")\n        .lambdaFunction(fn)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .payload(TaskInput.fromObject(Map.of(\n                \"token\", JsonPath.getTaskToken(),\n                \"input\", JsonPath.stringAt(\"$.someField\"))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\ntasks.NewLambdaInvoke(this, jsii.String(\"Invoke with callback\"), &lambdaInvokeProps{\n\tlambdaFunction: fn,\n\tintegrationPattern: sfn.integrationPattern_WAIT_FOR_TASK_TOKEN,\n\tpayload: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"token\": sfn.JsonPath.taskToken,\n\t\t\"input\": sfn.JsonPath.stringAt(jsii.String(\"$.someField\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke with callback', {\n  lambdaFunction: fn,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  payload: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    input: sfn.JsonPath.stringAt('$.someField'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1140
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.LambdaInvoke(this, 'Invoke with callback', {\n  lambdaFunction: fn,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  payload: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    input: sfn.JsonPath.stringAt('$.someField'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 23,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 9,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "df949be05d20219b2339f456c7455a3eda21615867c5197b47bafb813b3616e8"
    },
    "8b3e608b9990cf2ccb22dc9be64d71d0818ea9d67e13f0befbcf1c095fd62b6c": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1176
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "ab3814284efc83998e4c1556bbf3e65fe4dcaa2eec9020ceada18cb11dc5011a": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTransformJob(self, \"Batch Inference\",\n    transform_job_name=\"MyTransformJob\",\n    model_name=\"MyModelName\",\n    model_client_options=tasks.ModelClientOptions(\n        invocations_max_retries=3,  # default is 0\n        invocations_timeout=Duration.minutes(5)\n    ),\n    transform_input=tasks.TransformInput(\n        transform_data_source=tasks.TransformDataSource(\n            s3_data_source=tasks.TransformS3DataSource(\n                s3_uri=\"s3://inputbucket/train\",\n                s3_data_type=tasks.S3DataType.S3_PREFIX\n            )\n        )\n    ),\n    transform_output=tasks.TransformOutput(\n        s3_output_path=\"s3://outputbucket/TransformJobOutputPath\"\n    ),\n    transform_resources=tasks.TransformResources(\n        instance_count=1,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTransformJob(this, \"Batch Inference\", new SageMakerCreateTransformJobProps {\n    TransformJobName = \"MyTransformJob\",\n    ModelName = \"MyModelName\",\n    ModelClientOptions = new ModelClientOptions {\n        InvocationsMaxRetries = 3,  // default is 0\n        InvocationsTimeout = Duration.Minutes(5)\n    },\n    TransformInput = new TransformInput {\n        TransformDataSource = new TransformDataSource {\n            S3DataSource = new TransformS3DataSource {\n                S3Uri = \"s3://inputbucket/train\",\n                S3DataType = S3DataType.S3_PREFIX\n            }\n        }\n    },\n    TransformOutput = new TransformOutput {\n        S3OutputPath = \"s3://outputbucket/TransformJobOutputPath\"\n    },\n    TransformResources = new TransformResources {\n        InstanceCount = 1,\n        InstanceType = InstanceType.Of(InstanceClass.M4, InstanceSize.XLARGE)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTransformJob.Builder.create(this, \"Batch Inference\")\n        .transformJobName(\"MyTransformJob\")\n        .modelName(\"MyModelName\")\n        .modelClientOptions(ModelClientOptions.builder()\n                .invocationsMaxRetries(3) // default is 0\n                .invocationsTimeout(Duration.minutes(5))\n                .build())\n        .transformInput(TransformInput.builder()\n                .transformDataSource(TransformDataSource.builder()\n                        .s3DataSource(TransformS3DataSource.builder()\n                                .s3Uri(\"s3://inputbucket/train\")\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .build())\n                        .build())\n                .build())\n        .transformOutput(TransformOutput.builder()\n                .s3OutputPath(\"s3://outputbucket/TransformJobOutputPath\")\n                .build())\n        .transformResources(TransformResources.builder()\n                .instanceCount(1)\n                .instanceType(InstanceType.of(InstanceClass.M4, InstanceSize.XLARGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTransformJob(this, jsii.String(\"Batch Inference\"), &sageMakerCreateTransformJobProps{\n\ttransformJobName: jsii.String(\"MyTransformJob\"),\n\tmodelName: jsii.String(\"MyModelName\"),\n\tmodelClientOptions: &modelClientOptions{\n\t\tinvocationsMaxRetries: jsii.Number(3),\n\t\t // default is 0\n\t\tinvocationsTimeout: duration.minutes(jsii.Number(5)),\n\t},\n\ttransformInput: &transformInput{\n\t\ttransformDataSource: &transformDataSource{\n\t\t\ts3DataSource: &transformS3DataSource{\n\t\t\t\ts3Uri: jsii.String(\"s3://inputbucket/train\"),\n\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t},\n\t\t},\n\t},\n\ttransformOutput: &transformOutput{\n\t\ts3OutputPath: jsii.String(\"s3://outputbucket/TransformJobOutputPath\"),\n\t},\n\ttransformResources: &transformResources{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M4, ec2.instanceSize_XLARGE),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1210
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M4",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.ModelClientOptions",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.TransformDataSource",
        "@aws-cdk/aws-stepfunctions-tasks.TransformInput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformOutput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformResources",
        "@aws-cdk/aws-stepfunctions-tasks.TransformS3DataSource",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 31,
        "104": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 15
      },
      "fqnsFingerprint": "fd299dab2d91364d338c465c76cc2f657ae1e29ff838db159e29f333974ba0fb"
    },
    "7018a59cb633cf19b94b933cbbda00f3d991072c735b874c2cfbe87894ec26b5": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateEndpoint(self, \"SagemakerEndpoint\",\n    endpoint_name=sfn.JsonPath.string_at(\"$.EndpointName\"),\n    endpoint_config_name=sfn.JsonPath.string_at(\"$.EndpointConfigName\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateEndpoint(this, \"SagemakerEndpoint\", new SageMakerCreateEndpointProps {\n    EndpointName = JsonPath.StringAt(\"$.EndpointName\"),\n    EndpointConfigName = JsonPath.StringAt(\"$.EndpointConfigName\")\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateEndpoint.Builder.create(this, \"SagemakerEndpoint\")\n        .endpointName(JsonPath.stringAt(\"$.EndpointName\"))\n        .endpointConfigName(JsonPath.stringAt(\"$.EndpointConfigName\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateEndpoint(this, jsii.String(\"SagemakerEndpoint\"), &sageMakerCreateEndpointProps{\n\tendpointName: sfn.jsonPath.stringAt(jsii.String(\"$.EndpointName\")),\n\tendpointConfigName: sfn.*jsonPath.stringAt(jsii.String(\"$.EndpointConfigName\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.EndpointName'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.EndpointConfigName'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1241
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.EndpointName'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.EndpointConfigName'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "eaf2966b4774d956f39544d673985e29bf622770e180f5eab7eac06fd0a0af95"
    },
    "4874e23ea026ba732a7d36557d6003bad133bd86d307fcf58c2935b14aa5b037": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateEndpointConfig(self, \"SagemakerEndpointConfig\",\n    endpoint_config_name=\"MyEndpointConfig\",\n    production_variants=[tasks.ProductionVariant(\n        initial_instance_count=2,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.XLARGE),\n        model_name=\"MyModel\",\n        variant_name=\"awesome-variant\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateEndpointConfig(this, \"SagemakerEndpointConfig\", new SageMakerCreateEndpointConfigProps {\n    EndpointConfigName = \"MyEndpointConfig\",\n    ProductionVariants = new [] { new ProductionVariant {\n        InitialInstanceCount = 2,\n        InstanceType = InstanceType.Of(InstanceClass.M5, InstanceSize.XLARGE),\n        ModelName = \"MyModel\",\n        VariantName = \"awesome-variant\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateEndpointConfig.Builder.create(this, \"SagemakerEndpointConfig\")\n        .endpointConfigName(\"MyEndpointConfig\")\n        .productionVariants(List.of(ProductionVariant.builder()\n                .initialInstanceCount(2)\n                .instanceType(InstanceType.of(InstanceClass.M5, InstanceSize.XLARGE))\n                .modelName(\"MyModel\")\n                .variantName(\"awesome-variant\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateEndpointConfig(this, jsii.String(\"SagemakerEndpointConfig\"), &sageMakerCreateEndpointConfigProps{\n\tendpointConfigName: jsii.String(\"MyEndpointConfig\"),\n\tproductionVariants: []productionVariant{\n\t\t&productionVariant{\n\t\t\tinitialInstanceCount: jsii.Number(2),\n\t\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M5, ec2.instanceSize_XLARGE),\n\t\t\tmodelName: jsii.String(\"MyModel\"),\n\t\t\tvariantName: jsii.String(\"awesome-variant\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateEndpointConfig(this, 'SagemakerEndpointConfig', {\n  endpointConfigName: 'MyEndpointConfig',\n  productionVariants: [{\n  initialInstanceCount: 2,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.XLARGE),\n    modelName: 'MyModel',\n    variantName: 'awesome-variant',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1252
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointConfig",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointConfigProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateEndpointConfig(this, 'SagemakerEndpointConfig', {\n  endpointConfigName: 'MyEndpointConfig',\n  productionVariants: [{\n  initialInstanceCount: 2,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.XLARGE),\n    modelName: 'MyModel',\n    variantName: 'awesome-variant',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 17,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "67e671070d669fa6cc3abe3f77934897aebe7e0bffaa120f977a8c7baf7e8982"
    },
    "b4a2a4f089b9dd5743dd0dfe22a7e0e6c44c98dea691acf48800ac3f6296c224": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateModel(self, \"Sagemaker\",\n    model_name=\"MyModel\",\n    primary_container=tasks.ContainerDefinition(\n        image=tasks.DockerImage.from_json_expression(sfn.JsonPath.string_at(\"$.Model.imageName\")),\n        mode=tasks.Mode.SINGLE_MODEL,\n        model_s3_location=tasks.S3Location.from_json_expression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateModel(this, \"Sagemaker\", new SageMakerCreateModelProps {\n    ModelName = \"MyModel\",\n    PrimaryContainer = new ContainerDefinition(new ContainerDefinitionOptions {\n        Image = DockerImage.FromJsonExpression(JsonPath.StringAt(\"$.Model.imageName\")),\n        Mode = Mode.SINGLE_MODEL,\n        ModelS3Location = S3Location.FromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateModel.Builder.create(this, \"Sagemaker\")\n        .modelName(\"MyModel\")\n        .primaryContainer(ContainerDefinition.Builder.create()\n                .image(DockerImage.fromJsonExpression(JsonPath.stringAt(\"$.Model.imageName\")))\n                .mode(Mode.SINGLE_MODEL)\n                .modelS3Location(S3Location.fromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateModel(this, jsii.String(\"Sagemaker\"), &sageMakerCreateModelProps{\n\tmodelName: jsii.String(\"MyModel\"),\n\tprimaryContainer: tasks.NewContainerDefinition(&containerDefinitionOptions{\n\t\timage: tasks.dockerImage.fromJsonExpression(sfn.jsonPath.stringAt(jsii.String(\"$.Model.imageName\"))),\n\t\tmode: tasks.mode_SINGLE_MODEL,\n\t\tmodelS3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1268
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinitionOptions",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.IContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.Mode",
        "@aws-cdk/aws-stepfunctions-tasks.Mode#SINGLE_MODEL",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModel",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModelProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "193": 2,
        "194": 10,
        "196": 3,
        "197": 2,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "b1970df7f72e14acedbd643173af4da87ef70ae8be1bea9122c50f2481b3c3ee"
    },
    "1d1b8fd808fc01ea5ca5f45da88a5f287f3caa240eb2c282cf9e0584e375ab21": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerUpdateEndpoint(self, \"SagemakerEndpoint\",\n    endpoint_name=sfn.JsonPath.string_at(\"$.Endpoint.Name\"),\n    endpoint_config_name=sfn.JsonPath.string_at(\"$.Endpoint.EndpointConfig\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerUpdateEndpoint(this, \"SagemakerEndpoint\", new SageMakerUpdateEndpointProps {\n    EndpointName = JsonPath.StringAt(\"$.Endpoint.Name\"),\n    EndpointConfigName = JsonPath.StringAt(\"$.Endpoint.EndpointConfig\")\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerUpdateEndpoint.Builder.create(this, \"SagemakerEndpoint\")\n        .endpointName(JsonPath.stringAt(\"$.Endpoint.Name\"))\n        .endpointConfigName(JsonPath.stringAt(\"$.Endpoint.EndpointConfig\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerUpdateEndpoint(this, jsii.String(\"SagemakerEndpoint\"), &sageMakerUpdateEndpointProps{\n\tendpointName: sfn.jsonPath.stringAt(jsii.String(\"$.Endpoint.Name\")),\n\tendpointConfigName: sfn.*jsonPath.stringAt(jsii.String(\"$.Endpoint.EndpointConfig\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerUpdateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.Endpoint.Name'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.Endpoint.EndpointConfig'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1283
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerUpdateEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerUpdateEndpointProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerUpdateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.Endpoint.Name'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.Endpoint.EndpointConfig'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "87bd5f1d476a7f9521bf31e574dc19bb67cbbda7a701836eefc1513e60694dad"
    },
    "6c753e6bf74c256cfcba3c90d364717c6912b23fa6936c3fc2749c709a83e5f9": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\")\n\n# Use a field from the execution data as message.\ntask1 = tasks.SnsPublish(self, \"Publish1\",\n    topic=topic,\n    integration_pattern=sfn.IntegrationPattern.REQUEST_RESPONSE,\n    message=sfn.TaskInput.from_data_at(\"$.state.message\"),\n    message_attributes={\n        \"place\": tasks.MessageAttribute(\n            value=sfn.JsonPath.string_at(\"$.place\")\n        ),\n        \"pic\": tasks.MessageAttribute(\n            # BINARY must be explicitly set\n            data_type=tasks.MessageAttributeDataType.BINARY,\n            value=sfn.JsonPath.string_at(\"$.pic\")\n        ),\n        \"people\": tasks.MessageAttribute(\n            value=4\n        ),\n        \"handles\": tasks.MessageAttribute(\n            value=[\"@kslater\", \"@jjf\", null, \"@mfanning\"]\n        )\n    }\n)\n\n# Combine a field from the execution data with\n# a literal object.\ntask2 = tasks.SnsPublish(self, \"Publish2\",\n    topic=topic,\n    message=sfn.TaskInput.from_object({\n        \"field1\": \"somedata\",\n        \"field2\": sfn.JsonPath.string_at(\"$.field2\")\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\");\n\n// Use a field from the execution data as message.\nSnsPublish task1 = new SnsPublish(this, \"Publish1\", new SnsPublishProps {\n    Topic = topic,\n    IntegrationPattern = IntegrationPattern.REQUEST_RESPONSE,\n    Message = TaskInput.FromDataAt(\"$.state.message\"),\n    MessageAttributes = new Dictionary<string, MessageAttribute> {\n        { \"place\", new MessageAttribute {\n            Value = JsonPath.StringAt(\"$.place\")\n        } },\n        { \"pic\", new MessageAttribute {\n            // BINARY must be explicitly set\n            DataType = MessageAttributeDataType.BINARY,\n            Value = JsonPath.StringAt(\"$.pic\")\n        } },\n        { \"people\", new MessageAttribute {\n            Value = 4\n        } },\n        { \"handles\", new MessageAttribute {\n            Value = new [] { \"@kslater\", \"@jjf\", null, \"@mfanning\" }\n        } }\n    }\n});\n\n// Combine a field from the execution data with\n// a literal object.\nSnsPublish task2 = new SnsPublish(this, \"Publish2\", new SnsPublishProps {\n    Topic = topic,\n    Message = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"field1\", \"somedata\" },\n        { \"field2\", JsonPath.StringAt(\"$.field2\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"Topic\");\n\n// Use a field from the execution data as message.\nSnsPublish task1 = SnsPublish.Builder.create(this, \"Publish1\")\n        .topic(topic)\n        .integrationPattern(IntegrationPattern.REQUEST_RESPONSE)\n        .message(TaskInput.fromDataAt(\"$.state.message\"))\n        .messageAttributes(Map.of(\n                \"place\", MessageAttribute.builder()\n                        .value(JsonPath.stringAt(\"$.place\"))\n                        .build(),\n                \"pic\", MessageAttribute.builder()\n                        // BINARY must be explicitly set\n                        .dataType(MessageAttributeDataType.BINARY)\n                        .value(JsonPath.stringAt(\"$.pic\"))\n                        .build(),\n                \"people\", MessageAttribute.builder()\n                        .value(4)\n                        .build(),\n                \"handles\", MessageAttribute.builder()\n                        .value(List.of(\"@kslater\", \"@jjf\", null, \"@mfanning\"))\n                        .build()))\n        .build();\n\n// Combine a field from the execution data with\n// a literal object.\nSnsPublish task2 = SnsPublish.Builder.create(this, \"Publish2\")\n        .topic(topic)\n        .message(TaskInput.fromObject(Map.of(\n                \"field1\", \"somedata\",\n                \"field2\", JsonPath.stringAt(\"$.field2\"))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "topic := sns.NewTopic(this, jsii.String(\"Topic\"))\n\n// Use a field from the execution data as message.\ntask1 := tasks.NewSnsPublish(this, jsii.String(\"Publish1\"), &snsPublishProps{\n\ttopic: topic,\n\tintegrationPattern: sfn.integrationPattern_REQUEST_RESPONSE,\n\tmessage: sfn.taskInput.fromDataAt(jsii.String(\"$.state.message\")),\n\tmessageAttributes: map[string]messageAttribute{\n\t\t\"place\": &messageAttribute{\n\t\t\t\"value\": sfn.JsonPath.stringAt(jsii.String(\"$.place\")),\n\t\t},\n\t\t\"pic\": &messageAttribute{\n\t\t\t// BINARY must be explicitly set\n\t\t\t\"dataType\": tasks.MessageAttributeDataType_BINARY,\n\t\t\t\"value\": sfn.JsonPath.stringAt(jsii.String(\"$.pic\")),\n\t\t},\n\t\t\"people\": &messageAttribute{\n\t\t\t\"value\": jsii.Number(4),\n\t\t},\n\t\t\"handles\": &messageAttribute{\n\t\t\t\"value\": []interface{}{\n\t\t\t\tjsii.String(\"@kslater\"),\n\t\t\t\tjsii.String(\"@jjf\"),\n\t\t\t\tnil,\n\t\t\t\tjsii.String(\"@mfanning\"),\n\t\t\t},\n\t\t},\n\t},\n})\n\n// Combine a field from the execution data with\n// a literal object.\ntask2 := tasks.NewSnsPublish(this, jsii.String(\"Publish2\"), &snsPublishProps{\n\ttopic: topic,\n\tmessage: sfn.*taskInput.fromObject(map[string]interface{}{\n\t\t\"field1\": jsii.String(\"somedata\"),\n\t\t\"field2\": sfn.JsonPath.stringAt(jsii.String(\"$.field2\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SnsPublish(this, 'Publish1', {\n  topic,\n  integrationPattern: sfn.IntegrationPattern.REQUEST_RESPONSE,\n  message: sfn.TaskInput.fromDataAt('$.state.message'),\n  messageAttributes: {\n    place: {\n      value: sfn.JsonPath.stringAt('$.place'),\n    },\n    pic: {\n      // BINARY must be explicitly set\n      dataType: tasks.MessageAttributeDataType.BINARY,\n      value: sfn.JsonPath.stringAt('$.pic'),\n    },\n    people: {\n      value: 4,\n    },\n    handles: {\n      value: ['@kslater', '@jjf', null, '@mfanning'],\n    },\n  },\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SnsPublish(this, 'Publish2', {\n  topic,\n  message: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1296
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-stepfunctions-tasks.MessageAttribute",
        "@aws-cdk/aws-stepfunctions-tasks.MessageAttributeDataType",
        "@aws-cdk/aws-stepfunctions-tasks.MessageAttributeDataType#BINARY",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublish",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#REQUEST_RESPONSE",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromDataAt",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SnsPublish(this, 'Publish1', {\n  topic,\n  integrationPattern: sfn.IntegrationPattern.REQUEST_RESPONSE,\n  message: sfn.TaskInput.fromDataAt('$.state.message'),\n  messageAttributes: {\n    place: {\n      value: sfn.JsonPath.stringAt('$.place'),\n    },\n    pic: {\n      // BINARY must be explicitly set\n      dataType: tasks.MessageAttributeDataType.BINARY,\n      value: sfn.JsonPath.stringAt('$.pic'),\n    },\n    people: {\n      value: 4,\n    },\n    handles: {\n      value: ['@kslater', '@jjf', null, '@mfanning'],\n    },\n  },\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SnsPublish(this, 'Publish2', {\n  topic,\n  message: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 11,
        "75": 47,
        "100": 1,
        "104": 3,
        "192": 1,
        "193": 8,
        "194": 17,
        "196": 5,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 15,
        "282": 2
      },
      "fqnsFingerprint": "685bbc194d92bf39863849a797859bc5bffcbe55292677e3dc7e59b158e7a94f"
    },
    "a577b6f4dd632d128ac22155b8c29b81e65e05bf03e23ffa4b11735042dd4cfb": {
      "translations": {
        "python": {
          "source": "# Define a state machine with one Pass state\nchild = sfn.StateMachine(self, \"ChildStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"PassState\"))\n)\n\n# Include the state machine in a Task state with callback pattern\ntask = tasks.StepFunctionsStartExecution(self, \"ChildTask\",\n    state_machine=child,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    input=sfn.TaskInput.from_object({\n        \"token\": sfn.JsonPath.task_token,\n        \"foo\": \"bar\"\n    }),\n    name=\"MyExecutionName\"\n)\n\n# Define a second state machine with the Task state above\nsfn.StateMachine(self, \"ParentStateMachine\",\n    definition=task\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Define a state machine with one Pass state\nStateMachine child = new StateMachine(this, \"ChildStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"PassState\"))\n});\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = new StepFunctionsStartExecution(this, \"ChildTask\", new StepFunctionsStartExecutionProps {\n    StateMachine = child,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Input = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"token\", JsonPath.TaskToken },\n        { \"foo\", \"bar\" }\n    }),\n    Name = \"MyExecutionName\"\n});\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nnew StateMachine(this, \"ParentStateMachine\", new StateMachineProps {\n    Definition = task\n});",
          "version": "1"
        },
        "java": {
          "source": "// Define a state machine with one Pass state\nStateMachine child = StateMachine.Builder.create(this, \"ChildStateMachine\")\n        .definition(Chain.start(new Pass(this, \"PassState\")))\n        .build();\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = StepFunctionsStartExecution.Builder.create(this, \"ChildTask\")\n        .stateMachine(child)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .input(TaskInput.fromObject(Map.of(\n                \"token\", JsonPath.getTaskToken(),\n                \"foo\", \"bar\")))\n        .name(\"MyExecutionName\")\n        .build();\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nStateMachine.Builder.create(this, \"ParentStateMachine\")\n        .definition(task)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Define a state machine with one Pass state\nchild := sfn.NewStateMachine(this, jsii.String(\"ChildStateMachine\"), &stateMachineProps{\n\tdefinition: sfn.chain.start(sfn.NewPass(this, jsii.String(\"PassState\"))),\n})\n\n// Include the state machine in a Task state with callback pattern\ntask := tasks.NewStepFunctionsStartExecution(this, jsii.String(\"ChildTask\"), &stepFunctionsStartExecutionProps{\n\tstateMachine: child,\n\tintegrationPattern: sfn.integrationPattern_WAIT_FOR_TASK_TOKEN,\n\tinput: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"token\": sfn.JsonPath.taskToken,\n\t\t\"foo\": jsii.String(\"bar\"),\n\t}),\n\tname: jsii.String(\"MyExecutionName\"),\n})\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nsfn.NewStateMachine(this, jsii.String(\"ParentStateMachine\"), &stateMachineProps{\n\tdefinition: task,\n})",
          "version": "1"
        },
        "$": {
          "source": "// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1341
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecution",
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecutionProps",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 32,
        "104": 4,
        "193": 4,
        "194": 12,
        "196": 2,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "61eb42c592cb642cc8e058db2cd663e1685d0fe3207a62baaae7f4f7fb4a0833"
    },
    "60fc169392b12a0747e48275099072a4c1dbf6c25d8fd7ae6dbcfa83a3346144": {
      "translations": {
        "python": {
          "source": "# child: sfn.StateMachine\n\ntask = tasks.StepFunctionsStartExecution(self, \"ChildTask\",\n    state_machine=child,\n    associate_with_parent=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "StateMachine child;\n\nStepFunctionsStartExecution task = new StepFunctionsStartExecution(this, \"ChildTask\", new StepFunctionsStartExecutionProps {\n    StateMachine = child,\n    AssociateWithParent = true\n});",
          "version": "1"
        },
        "java": {
          "source": "StateMachine child;\n\nStepFunctionsStartExecution task = StepFunctionsStartExecution.Builder.create(this, \"ChildTask\")\n        .stateMachine(child)\n        .associateWithParent(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var child stateMachine\ntask := tasks.NewStepFunctionsStartExecution(this, jsii.String(\"ChildTask\"), &stepFunctionsStartExecutionProps{\n\tstateMachine: child,\n\tassociateWithParent: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const child: sfn.StateMachine;\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  associateWithParent: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1368
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecution",
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecutionProps",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const child: sfn.StateMachine;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  associateWithParent: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9dea455c4646b3da5cce1e97d6ffc6336b6cbb1f0cf683ef48b087629f7c52ea"
    },
    "352776b46f36e138b4eadbd3fdb475fd0e9d1d91faf5affebf291f5b777d8d9e": {
      "translations": {
        "python": {
          "source": "submit_job_activity = sfn.Activity(self, \"SubmitJob\")\n\ntasks.StepFunctionsInvokeActivity(self, \"Submit Job\",\n    activity=submit_job_activity\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Activity submitJobActivity = new Activity(this, \"SubmitJob\");\n\nnew StepFunctionsInvokeActivity(this, \"Submit Job\", new StepFunctionsInvokeActivityProps {\n    Activity = submitJobActivity\n});",
          "version": "1"
        },
        "java": {
          "source": "Activity submitJobActivity = new Activity(this, \"SubmitJob\");\n\nStepFunctionsInvokeActivity.Builder.create(this, \"Submit Job\")\n        .activity(submitJobActivity)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "submitJobActivity := sfn.NewActivity(this, jsii.String(\"SubmitJob\"))\n\ntasks.NewStepFunctionsInvokeActivity(this, jsii.String(\"Submit Job\"), &stepFunctionsInvokeActivityProps{\n\tactivity: submitJobActivity,\n})",
          "version": "1"
        },
        "$": {
          "source": "const submitJobActivity = new sfn.Activity(this, 'SubmitJob');\n\nnew tasks.StepFunctionsInvokeActivity(this, 'Submit Job', {\n  activity: submitJobActivity,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1399
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsInvokeActivity",
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsInvokeActivityProps",
        "@aws-cdk/aws-stepfunctions.Activity",
        "@aws-cdk/aws-stepfunctions.IActivity",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst submitJobActivity = new sfn.Activity(this, 'SubmitJob');\n\nnew tasks.StepFunctionsInvokeActivity(this, 'Submit Job', {\n  activity: submitJobActivity,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "41e6d5f4c35795bf6b506a252089e04606d32259ec2884561b5e35bd55a9c86e"
    },
    "f4655d1aa6e316de3eec730fad2558dd7ed02cd5381509cc3f04f75d81265976": {
      "translations": {
        "python": {
          "source": "queue = sqs.Queue(self, \"Queue\")\n\n# Use a field from the execution data as message.\ntask1 = tasks.SqsSendMessage(self, \"Send1\",\n    queue=queue,\n    message_body=sfn.TaskInput.from_json_path_at(\"$.message\")\n)\n\n# Combine a field from the execution data with\n# a literal object.\ntask2 = tasks.SqsSendMessage(self, \"Send2\",\n    queue=queue,\n    message_body=sfn.TaskInput.from_object({\n        \"field1\": \"somedata\",\n        \"field2\": sfn.JsonPath.string_at(\"$.field2\")\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Queue queue = new Queue(this, \"Queue\");\n\n// Use a field from the execution data as message.\nSqsSendMessage task1 = new SqsSendMessage(this, \"Send1\", new SqsSendMessageProps {\n    Queue = queue,\n    MessageBody = TaskInput.FromJsonPathAt(\"$.message\")\n});\n\n// Combine a field from the execution data with\n// a literal object.\nSqsSendMessage task2 = new SqsSendMessage(this, \"Send2\", new SqsSendMessageProps {\n    Queue = queue,\n    MessageBody = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"field1\", \"somedata\" },\n        { \"field2\", JsonPath.StringAt(\"$.field2\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Queue queue = new Queue(this, \"Queue\");\n\n// Use a field from the execution data as message.\nSqsSendMessage task1 = SqsSendMessage.Builder.create(this, \"Send1\")\n        .queue(queue)\n        .messageBody(TaskInput.fromJsonPathAt(\"$.message\"))\n        .build();\n\n// Combine a field from the execution data with\n// a literal object.\nSqsSendMessage task2 = SqsSendMessage.Builder.create(this, \"Send2\")\n        .queue(queue)\n        .messageBody(TaskInput.fromObject(Map.of(\n                \"field1\", \"somedata\",\n                \"field2\", JsonPath.stringAt(\"$.field2\"))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "queue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\n// Use a field from the execution data as message.\ntask1 := tasks.NewSqsSendMessage(this, jsii.String(\"Send1\"), &sqsSendMessageProps{\n\tqueue: queue,\n\tmessageBody: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.message\")),\n})\n\n// Combine a field from the execution data with\n// a literal object.\ntask2 := tasks.NewSqsSendMessage(this, jsii.String(\"Send2\"), &sqsSendMessageProps{\n\tqueue: queue,\n\tmessageBody: sfn.*taskInput.fromObject(map[string]interface{}{\n\t\t\"field1\": jsii.String(\"somedata\"),\n\t\t\"field2\": sfn.JsonPath.stringAt(jsii.String(\"$.field2\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const queue = new sqs.Queue(this, 'Queue');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SqsSendMessage(this, 'Send1', {\n  queue,\n  messageBody: sfn.TaskInput.fromJsonPathAt('$.message'),\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SqsSendMessage(this, 'Send2', {\n  queue,\n  messageBody: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions-tasks"
        },
        "field": {
          "field": "markdown",
          "line": 1414
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-stepfunctions-tasks.SqsSendMessage",
        "@aws-cdk/aws-stepfunctions-tasks.SqsSendMessageProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst queue = new sqs.Queue(this, 'Queue');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SqsSendMessage(this, 'Send1', {\n  queue,\n  messageBody: sfn.TaskInput.fromJsonPathAt('$.message'),\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SqsSendMessage(this, 'Send2', {\n  queue,\n  messageBody: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 24,
        "104": 3,
        "193": 3,
        "194": 9,
        "196": 3,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 2
      },
      "fqnsFingerprint": "e526fb6f266c3dc84e3192708616cea057700b098051ef8c2619f94d33e99063"
    },
    "6a263f2f0686c17f9f093b62c29d38b6beb2dc0eff1e1338e07d6e1cb6c9f8e6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\naccelerator_class = stepfunctions_tasks.AcceleratorClass.of(\"version\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nAcceleratorClass acceleratorClass = AcceleratorClass.Of(\"version\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nAcceleratorClass acceleratorClass = AcceleratorClass.of(\"version\");",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nacceleratorClass := stepfunctions_tasks.acceleratorClass.of(jsii.String(\"version\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst acceleratorClass = stepfunctions_tasks.AcceleratorClass.of('version');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.AcceleratorClass"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AcceleratorClass",
        "@aws-cdk/aws-stepfunctions-tasks.AcceleratorClass#of"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst acceleratorClass = stepfunctions_tasks.AcceleratorClass.of('version');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "65c6d21733248e777ca9fd1b5b2824de697e749ad1ac4776b5bc9ef60da71f36"
    },
    "63e1d00c725d7fb61ec70508117312cd72198e0c57fb1f8b2ef143c5d4cb65ea": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\naccelerator_type = stepfunctions_tasks.AcceleratorType(\"instanceTypeIdentifier\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nAcceleratorType acceleratorType = new AcceleratorType(\"instanceTypeIdentifier\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nAcceleratorType acceleratorType = new AcceleratorType(\"instanceTypeIdentifier\");",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nacceleratorType := stepfunctions_tasks.NewAcceleratorType(jsii.String(\"instanceTypeIdentifier\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst acceleratorType = new stepfunctions_tasks.AcceleratorType('instanceTypeIdentifier');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.AcceleratorType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AcceleratorType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst acceleratorType = new stepfunctions_tasks.AcceleratorType('instanceTypeIdentifier');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "57332efcee8e59436441650dcfad9911af502075fccce40bc68fdce77bc4f6df"
    },
    "a5de3085f1256c88b7ef300e970d26753859cd91dada9d5495175c9167213122": {
      "translations": {
        "python": {
          "source": "tasks.EmrAddStep(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    name=\"StepName\",\n    jar=\"Jar\",\n    action_on_failure=tasks.ActionOnFailure.CONTINUE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrAddStep(this, \"Task\", new EmrAddStepProps {\n    ClusterId = \"ClusterId\",\n    Name = \"StepName\",\n    Jar = \"Jar\",\n    ActionOnFailure = ActionOnFailure.CONTINUE\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrAddStep.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .name(\"StepName\")\n        .jar(\"Jar\")\n        .actionOnFailure(ActionOnFailure.CONTINUE)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrAddStep(this, jsii.String(\"Task\"), &emrAddStepProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tname: jsii.String(\"StepName\"),\n\tjar: jsii.String(\"Jar\"),\n\tactionOnFailure: tasks.actionOnFailure_CONTINUE,\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrAddStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  name: 'StepName',\n  jar: 'Jar',\n  actionOnFailure: tasks.ActionOnFailure.CONTINUE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ActionOnFailure"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ActionOnFailure",
        "@aws-cdk/aws-stepfunctions-tasks.ActionOnFailure#CONTINUE",
        "@aws-cdk/aws-stepfunctions-tasks.EmrAddStep",
        "@aws-cdk/aws-stepfunctions-tasks.EmrAddStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrAddStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  name: 'StepName',\n  jar: 'Jar',\n  actionOnFailure: tasks.ActionOnFailure.CONTINUE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "5d569175d3effd76c258793f5de01eb19668a01dfeb7b7cdfade748229b3fb90"
    },
    "895afe226dcdbcbe7aee02d9bcda191793e6b4801c685c1b39d0ea6c568ab91a": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "8e4550a83506da3d9034d70dd43b20ab23746fd20d13588ac29a9de64d316f0a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# application_configuration_: stepfunctions_tasks.ApplicationConfiguration\n# classification: stepfunctions_tasks.Classification\n\napplication_configuration = stepfunctions_tasks.ApplicationConfiguration(\n    classification=classification,\n\n    # the properties below are optional\n    nested_config=[stepfunctions_tasks.ApplicationConfiguration(\n        classification=classification,\n\n        # the properties below are optional\n        nested_config=[application_configuration_],\n        properties={\n            \"properties_key\": \"properties\"\n        }\n    )],\n    properties={\n        \"properties_key\": \"properties\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nApplicationConfiguration applicationConfiguration_;\nClassification classification;\n\nApplicationConfiguration applicationConfiguration = new ApplicationConfiguration {\n    Classification = classification,\n\n    // the properties below are optional\n    NestedConfig = new [] { new ApplicationConfiguration {\n        Classification = classification,\n\n        // the properties below are optional\n        NestedConfig = new [] { applicationConfiguration_ },\n        Properties = new Dictionary<string, string> {\n            { \"propertiesKey\", \"properties\" }\n        }\n    } },\n    Properties = new Dictionary<string, string> {\n        { \"propertiesKey\", \"properties\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nApplicationConfiguration applicationConfiguration_;\nClassification classification;\n\nApplicationConfiguration applicationConfiguration = ApplicationConfiguration.builder()\n        .classification(classification)\n\n        // the properties below are optional\n        .nestedConfig(List.of(ApplicationConfiguration.builder()\n                .classification(classification)\n\n                // the properties below are optional\n                .nestedConfig(List.of(applicationConfiguration_))\n                .properties(Map.of(\n                        \"propertiesKey\", \"properties\"))\n                .build()))\n        .properties(Map.of(\n                \"propertiesKey\", \"properties\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar applicationConfiguration_ applicationConfiguration\nvar classification classification\napplicationConfiguration := &applicationConfiguration{\n\tclassification: classification,\n\n\t// the properties below are optional\n\tnestedConfig: []*applicationConfiguration{\n\t\t&applicationConfiguration{\n\t\t\tclassification: classification,\n\n\t\t\t// the properties below are optional\n\t\t\tnestedConfig: []*applicationConfiguration{\n\t\t\t\tapplicationConfiguration_,\n\t\t\t},\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"propertiesKey\": jsii.String(\"properties\"),\n\t\t\t},\n\t\t},\n\t},\n\tproperties: map[string]*string{\n\t\t\"propertiesKey\": jsii.String(\"properties\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const applicationConfiguration_: stepfunctions_tasks.ApplicationConfiguration;\ndeclare const classification: stepfunctions_tasks.Classification;\nconst applicationConfiguration: stepfunctions_tasks.ApplicationConfiguration = {\n  classification: classification,\n\n  // the properties below are optional\n  nestedConfig: [{\n    classification: classification,\n\n    // the properties below are optional\n    nestedConfig: [applicationConfiguration_],\n    properties: {\n      propertiesKey: 'properties',\n    },\n  }],\n  properties: {\n    propertiesKey: 'properties',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ApplicationConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ApplicationConfiguration",
        "@aws-cdk/aws-stepfunctions-tasks.Classification"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const applicationConfiguration_: stepfunctions_tasks.ApplicationConfiguration;\ndeclare const classification: stepfunctions_tasks.Classification;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst applicationConfiguration: stepfunctions_tasks.ApplicationConfiguration = {\n  classification: classification,\n\n  // the properties below are optional\n  nestedConfig: [{\n    classification: classification,\n\n    // the properties below are optional\n    nestedConfig: [applicationConfiguration_],\n    properties: {\n      propertiesKey: 'properties',\n    },\n  }],\n  properties: {\n    propertiesKey: 'properties',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "7423afd8986ba381c4cd0d725073c25a1a2b5d9028e9bf28784759896a57449c"
    },
    "c5f1df53c2c816c8f7dbc18d2e0eec0d76e68d6c9cfb9067c29322fd4f468435": {
      "translations": {
        "python": {
          "source": "get_query_execution_job = tasks.AthenaGetQueryExecution(self, \"Get Query Execution\",\n    query_execution_id=sfn.JsonPath.string_at(\"$.QueryExecutionId\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaGetQueryExecution getQueryExecutionJob = new AthenaGetQueryExecution(this, \"Get Query Execution\", new AthenaGetQueryExecutionProps {\n    QueryExecutionId = JsonPath.StringAt(\"$.QueryExecutionId\")\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaGetQueryExecution getQueryExecutionJob = AthenaGetQueryExecution.Builder.create(this, \"Get Query Execution\")\n        .queryExecutionId(JsonPath.stringAt(\"$.QueryExecutionId\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "getQueryExecutionJob := tasks.NewAthenaGetQueryExecution(this, jsii.String(\"Get Query Execution\"), &athenaGetQueryExecutionProps{\n\tqueryExecutionId: sfn.jsonPath.stringAt(jsii.String(\"$.QueryExecutionId\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const getQueryExecutionJob = new tasks.AthenaGetQueryExecution(this, 'Get Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryExecution"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getQueryExecutionJob = new tasks.AthenaGetQueryExecution(this, 'Get Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "501e103775b71b7e45b2f60e96c7cb987e38c68bc001246ea3f5b617186c070c"
    },
    "952334cbcf54302aa4f8a30cc4decbfe8aa2a6ef6d60ae25f6581e22abc1f0cf": {
      "translations": {
        "python": {
          "source": "get_query_execution_job = tasks.AthenaGetQueryExecution(self, \"Get Query Execution\",\n    query_execution_id=sfn.JsonPath.string_at(\"$.QueryExecutionId\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaGetQueryExecution getQueryExecutionJob = new AthenaGetQueryExecution(this, \"Get Query Execution\", new AthenaGetQueryExecutionProps {\n    QueryExecutionId = JsonPath.StringAt(\"$.QueryExecutionId\")\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaGetQueryExecution getQueryExecutionJob = AthenaGetQueryExecution.Builder.create(this, \"Get Query Execution\")\n        .queryExecutionId(JsonPath.stringAt(\"$.QueryExecutionId\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "getQueryExecutionJob := tasks.NewAthenaGetQueryExecution(this, jsii.String(\"Get Query Execution\"), &athenaGetQueryExecutionProps{\n\tqueryExecutionId: sfn.jsonPath.stringAt(jsii.String(\"$.QueryExecutionId\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const getQueryExecutionJob = new tasks.AthenaGetQueryExecution(this, 'Get Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryExecutionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getQueryExecutionJob = new tasks.AthenaGetQueryExecution(this, 'Get Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "501e103775b71b7e45b2f60e96c7cb987e38c68bc001246ea3f5b617186c070c"
    },
    "68b6d48bc767192f0242f2865dccda7b975ca83847fedd142ee3139e94370876": {
      "translations": {
        "python": {
          "source": "get_query_results_job = tasks.AthenaGetQueryResults(self, \"Get Query Results\",\n    query_execution_id=sfn.JsonPath.string_at(\"$.QueryExecutionId\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaGetQueryResults getQueryResultsJob = new AthenaGetQueryResults(this, \"Get Query Results\", new AthenaGetQueryResultsProps {\n    QueryExecutionId = JsonPath.StringAt(\"$.QueryExecutionId\")\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaGetQueryResults getQueryResultsJob = AthenaGetQueryResults.Builder.create(this, \"Get Query Results\")\n        .queryExecutionId(JsonPath.stringAt(\"$.QueryExecutionId\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "getQueryResultsJob := tasks.NewAthenaGetQueryResults(this, jsii.String(\"Get Query Results\"), &athenaGetQueryResultsProps{\n\tqueryExecutionId: sfn.jsonPath.stringAt(jsii.String(\"$.QueryExecutionId\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const getQueryResultsJob = new tasks.AthenaGetQueryResults(this, 'Get Query Results', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryResults"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryResults",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryResultsProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getQueryResultsJob = new tasks.AthenaGetQueryResults(this, 'Get Query Results', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "df0ced513361140a56305a8b3ac03d82983c57b9f80c7b839077345bc937adbd"
    },
    "53f9d2b89c0cead823eacd06250437b7455ce5d31e9bfaddafd7b8a5af61d8e9": {
      "translations": {
        "python": {
          "source": "get_query_results_job = tasks.AthenaGetQueryResults(self, \"Get Query Results\",\n    query_execution_id=sfn.JsonPath.string_at(\"$.QueryExecutionId\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaGetQueryResults getQueryResultsJob = new AthenaGetQueryResults(this, \"Get Query Results\", new AthenaGetQueryResultsProps {\n    QueryExecutionId = JsonPath.StringAt(\"$.QueryExecutionId\")\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaGetQueryResults getQueryResultsJob = AthenaGetQueryResults.Builder.create(this, \"Get Query Results\")\n        .queryExecutionId(JsonPath.stringAt(\"$.QueryExecutionId\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "getQueryResultsJob := tasks.NewAthenaGetQueryResults(this, jsii.String(\"Get Query Results\"), &athenaGetQueryResultsProps{\n\tqueryExecutionId: sfn.jsonPath.stringAt(jsii.String(\"$.QueryExecutionId\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const getQueryResultsJob = new tasks.AthenaGetQueryResults(this, 'Get Query Results', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryResultsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryResults",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaGetQueryResultsProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getQueryResultsJob = new tasks.AthenaGetQueryResults(this, 'Get Query Results', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "df0ced513361140a56305a8b3ac03d82983c57b9f80c7b839077345bc937adbd"
    },
    "a2b71ff652d3f3c4d828cdd4e20bb6bc7e8364b6d3c1f02e30e623d7df5e1750": {
      "translations": {
        "python": {
          "source": "start_query_execution_job = tasks.AthenaStartQueryExecution(self, \"Athena Start Query\",\n    query_string=sfn.JsonPath.format(\"select contacts where year={};\", sfn.JsonPath.string_at(\"$.year\")),\n    query_execution_context=tasks.QueryExecutionContext(\n        database_name=\"interactions\"\n    ),\n    result_configuration=tasks.ResultConfiguration(\n        encryption_configuration=tasks.EncryptionConfiguration(\n            encryption_option=tasks.EncryptionOption.S3_MANAGED\n        ),\n        output_location=s3.Location(\n            bucket_name=\"mybucket\",\n            object_key=\"myprefix\"\n        )\n    ),\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = new AthenaStartQueryExecution(this, \"Athena Start Query\", new AthenaStartQueryExecutionProps {\n    QueryString = JsonPath.Format(\"select contacts where year={};\", JsonPath.StringAt(\"$.year\")),\n    QueryExecutionContext = new QueryExecutionContext {\n        DatabaseName = \"interactions\"\n    },\n    ResultConfiguration = new ResultConfiguration {\n        EncryptionConfiguration = new EncryptionConfiguration {\n            EncryptionOption = EncryptionOption.S3_MANAGED\n        },\n        OutputLocation = new Location {\n            BucketName = \"mybucket\",\n            ObjectKey = \"myprefix\"\n        }\n    },\n    IntegrationPattern = IntegrationPattern.RUN_JOB\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = AthenaStartQueryExecution.Builder.create(this, \"Athena Start Query\")\n        .queryString(JsonPath.format(\"select contacts where year={};\", JsonPath.stringAt(\"$.year\")))\n        .queryExecutionContext(QueryExecutionContext.builder()\n                .databaseName(\"interactions\")\n                .build())\n        .resultConfiguration(ResultConfiguration.builder()\n                .encryptionConfiguration(EncryptionConfiguration.builder()\n                        .encryptionOption(EncryptionOption.S3_MANAGED)\n                        .build())\n                .outputLocation(Location.builder()\n                        .bucketName(\"mybucket\")\n                        .objectKey(\"myprefix\")\n                        .build())\n                .build())\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "startQueryExecutionJob := tasks.NewAthenaStartQueryExecution(this, jsii.String(\"Athena Start Query\"), &athenaStartQueryExecutionProps{\n\tqueryString: sfn.jsonPath.format(jsii.String(\"select contacts where year={};\"), sfn.*jsonPath.stringAt(jsii.String(\"$.year\"))),\n\tqueryExecutionContext: &queryExecutionContext{\n\t\tdatabaseName: jsii.String(\"interactions\"),\n\t},\n\tresultConfiguration: &resultConfiguration{\n\t\tencryptionConfiguration: &encryptionConfiguration{\n\t\t\tencryptionOption: tasks.encryptionOption_S3_MANAGED,\n\t\t},\n\t\toutputLocation: &location{\n\t\t\tbucketName: jsii.String(\"mybucket\"),\n\t\t\tobjectKey: jsii.String(\"myprefix\"),\n\t\t},\n\t},\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n})",
          "version": "1"
        },
        "$": {
          "source": "const startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecution"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionConfiguration",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption#S3_MANAGED",
        "@aws-cdk/aws-stepfunctions-tasks.QueryExecutionContext",
        "@aws-cdk/aws-stepfunctions-tasks.ResultConfiguration",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#format",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "18ccfd09b7dfcdcde29c0cc0b620e945875db2aef84e404c5df86ce1cec06402"
    },
    "757be3f8e91de75aeededc983addb58cd768e664c560cacf852e9f8e694f3b75": {
      "translations": {
        "python": {
          "source": "start_query_execution_job = tasks.AthenaStartQueryExecution(self, \"Athena Start Query\",\n    query_string=sfn.JsonPath.format(\"select contacts where year={};\", sfn.JsonPath.string_at(\"$.year\")),\n    query_execution_context=tasks.QueryExecutionContext(\n        database_name=\"interactions\"\n    ),\n    result_configuration=tasks.ResultConfiguration(\n        encryption_configuration=tasks.EncryptionConfiguration(\n            encryption_option=tasks.EncryptionOption.S3_MANAGED\n        ),\n        output_location=s3.Location(\n            bucket_name=\"mybucket\",\n            object_key=\"myprefix\"\n        )\n    ),\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = new AthenaStartQueryExecution(this, \"Athena Start Query\", new AthenaStartQueryExecutionProps {\n    QueryString = JsonPath.Format(\"select contacts where year={};\", JsonPath.StringAt(\"$.year\")),\n    QueryExecutionContext = new QueryExecutionContext {\n        DatabaseName = \"interactions\"\n    },\n    ResultConfiguration = new ResultConfiguration {\n        EncryptionConfiguration = new EncryptionConfiguration {\n            EncryptionOption = EncryptionOption.S3_MANAGED\n        },\n        OutputLocation = new Location {\n            BucketName = \"mybucket\",\n            ObjectKey = \"myprefix\"\n        }\n    },\n    IntegrationPattern = IntegrationPattern.RUN_JOB\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = AthenaStartQueryExecution.Builder.create(this, \"Athena Start Query\")\n        .queryString(JsonPath.format(\"select contacts where year={};\", JsonPath.stringAt(\"$.year\")))\n        .queryExecutionContext(QueryExecutionContext.builder()\n                .databaseName(\"interactions\")\n                .build())\n        .resultConfiguration(ResultConfiguration.builder()\n                .encryptionConfiguration(EncryptionConfiguration.builder()\n                        .encryptionOption(EncryptionOption.S3_MANAGED)\n                        .build())\n                .outputLocation(Location.builder()\n                        .bucketName(\"mybucket\")\n                        .objectKey(\"myprefix\")\n                        .build())\n                .build())\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "startQueryExecutionJob := tasks.NewAthenaStartQueryExecution(this, jsii.String(\"Athena Start Query\"), &athenaStartQueryExecutionProps{\n\tqueryString: sfn.jsonPath.format(jsii.String(\"select contacts where year={};\"), sfn.*jsonPath.stringAt(jsii.String(\"$.year\"))),\n\tqueryExecutionContext: &queryExecutionContext{\n\t\tdatabaseName: jsii.String(\"interactions\"),\n\t},\n\tresultConfiguration: &resultConfiguration{\n\t\tencryptionConfiguration: &encryptionConfiguration{\n\t\t\tencryptionOption: tasks.encryptionOption_S3_MANAGED,\n\t\t},\n\t\toutputLocation: &location{\n\t\t\tbucketName: jsii.String(\"mybucket\"),\n\t\t\tobjectKey: jsii.String(\"myprefix\"),\n\t\t},\n\t},\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n})",
          "version": "1"
        },
        "$": {
          "source": "const startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecutionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionConfiguration",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption#S3_MANAGED",
        "@aws-cdk/aws-stepfunctions-tasks.QueryExecutionContext",
        "@aws-cdk/aws-stepfunctions-tasks.ResultConfiguration",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#format",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "18ccfd09b7dfcdcde29c0cc0b620e945875db2aef84e404c5df86ce1cec06402"
    },
    "d792a5fc011e0e27718fdf76e0db4a8ea350a872e44664c6cd3b1ff47efee833": {
      "translations": {
        "python": {
          "source": "stop_query_execution_job = tasks.AthenaStopQueryExecution(self, \"Stop Query Execution\",\n    query_execution_id=sfn.JsonPath.string_at(\"$.QueryExecutionId\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaStopQueryExecution stopQueryExecutionJob = new AthenaStopQueryExecution(this, \"Stop Query Execution\", new AthenaStopQueryExecutionProps {\n    QueryExecutionId = JsonPath.StringAt(\"$.QueryExecutionId\")\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStopQueryExecution stopQueryExecutionJob = AthenaStopQueryExecution.Builder.create(this, \"Stop Query Execution\")\n        .queryExecutionId(JsonPath.stringAt(\"$.QueryExecutionId\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "stopQueryExecutionJob := tasks.NewAthenaStopQueryExecution(this, jsii.String(\"Stop Query Execution\"), &athenaStopQueryExecutionProps{\n\tqueryExecutionId: sfn.jsonPath.stringAt(jsii.String(\"$.QueryExecutionId\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const stopQueryExecutionJob = new tasks.AthenaStopQueryExecution(this, 'Stop Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.AthenaStopQueryExecution"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStopQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStopQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stopQueryExecutionJob = new tasks.AthenaStopQueryExecution(this, 'Stop Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "4fbc564f43a829ad3fdd38f789ca7664845725c8333f4534db458f804700181a"
    },
    "da75bd7da82bb3f212ad377e20886231e6f3de142e11fcc60bb5ad7e694b055f": {
      "translations": {
        "python": {
          "source": "stop_query_execution_job = tasks.AthenaStopQueryExecution(self, \"Stop Query Execution\",\n    query_execution_id=sfn.JsonPath.string_at(\"$.QueryExecutionId\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaStopQueryExecution stopQueryExecutionJob = new AthenaStopQueryExecution(this, \"Stop Query Execution\", new AthenaStopQueryExecutionProps {\n    QueryExecutionId = JsonPath.StringAt(\"$.QueryExecutionId\")\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStopQueryExecution stopQueryExecutionJob = AthenaStopQueryExecution.Builder.create(this, \"Stop Query Execution\")\n        .queryExecutionId(JsonPath.stringAt(\"$.QueryExecutionId\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "stopQueryExecutionJob := tasks.NewAthenaStopQueryExecution(this, jsii.String(\"Stop Query Execution\"), &athenaStopQueryExecutionProps{\n\tqueryExecutionId: sfn.jsonPath.stringAt(jsii.String(\"$.QueryExecutionId\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const stopQueryExecutionJob = new tasks.AthenaStopQueryExecution(this, 'Stop Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.AthenaStopQueryExecutionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStopQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStopQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stopQueryExecutionJob = new tasks.AthenaStopQueryExecution(this, 'Stop Query Execution', {\n  queryExecutionId: sfn.JsonPath.stringAt('$.QueryExecutionId'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "4fbc564f43a829ad3fdd38f789ca7664845725c8333f4534db458f804700181a"
    },
    "f59e3569149ba288d28f49ff6ff3e1681aadefa66817e3845a908c41be848232": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# instance_type: ec2.InstanceType\n# size: cdk.Size\n\nbatch_container_overrides = stepfunctions_tasks.BatchContainerOverrides(\n    command=[\"command\"],\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    gpu_count=123,\n    instance_type=instance_type,\n    memory=size,\n    vcpus=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nInstanceType instanceType;\nSize size;\nBatchContainerOverrides batchContainerOverrides = new BatchContainerOverrides {\n    Command = new [] { \"command\" },\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    GpuCount = 123,\n    InstanceType = instanceType,\n    Memory = size,\n    Vcpus = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nInstanceType instanceType;\nSize size;\n\nBatchContainerOverrides batchContainerOverrides = BatchContainerOverrides.builder()\n        .command(List.of(\"command\"))\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .gpuCount(123)\n        .instanceType(instanceType)\n        .memory(size)\n        .vcpus(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar instanceType instanceType\nvar size size\nbatchContainerOverrides := &batchContainerOverrides{\n\tcommand: []*string{\n\t\tjsii.String(\"command\"),\n\t},\n\tenvironment: map[string]*string{\n\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t},\n\tgpuCount: jsii.Number(123),\n\tinstanceType: instanceType,\n\tmemory: size,\n\tvcpus: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const instanceType: ec2.InstanceType;\ndeclare const size: cdk.Size;\nconst batchContainerOverrides: stepfunctions_tasks.BatchContainerOverrides = {\n  command: ['command'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  gpuCount: 123,\n  instanceType: instanceType,\n  memory: size,\n  vcpus: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.BatchContainerOverrides"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-stepfunctions-tasks.BatchContainerOverrides",
        "@aws-cdk/core.Size"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const instanceType: ec2.InstanceType;\ndeclare const size: cdk.Size;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst batchContainerOverrides: stepfunctions_tasks.BatchContainerOverrides = {\n  command: ['command'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  gpuCount: 123,\n  instanceType: instanceType,\n  memory: size,\n  vcpus: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 21,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "726f07dc8d380e873478abcb37761395a2525b76e3b845b2e7d22cda42a42486"
    },
    "e0ad11a6989acdead8acae29f75260151ac870007fa16938d05e41838763f111": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nbatch_job_dependency = stepfunctions_tasks.BatchJobDependency(\n    job_id=\"jobId\",\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nBatchJobDependency batchJobDependency = new BatchJobDependency {\n    JobId = \"jobId\",\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nBatchJobDependency batchJobDependency = BatchJobDependency.builder()\n        .jobId(\"jobId\")\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nbatchJobDependency := &batchJobDependency{\n\tjobId: jsii.String(\"jobId\"),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst batchJobDependency: stepfunctions_tasks.BatchJobDependency = {\n  jobId: 'jobId',\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.BatchJobDependency"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.BatchJobDependency"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst batchJobDependency: stepfunctions_tasks.BatchJobDependency = {\n  jobId: 'jobId',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7353d7f7d2d4ce59d61ba3dec81597c5512b2d00dc71bc59a1554819e872ab53"
    },
    "ac3d041fa10d157ceb6aef4f06a3261c9568872e4aa56506f9cd904e9154b1c2": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_batch as batch\n# batch_job_definition: batch.JobDefinition\n# batch_queue: batch.JobQueue\n\n\ntask = tasks.BatchSubmitJob(self, \"Submit Job\",\n    job_definition_arn=batch_job_definition.job_definition_arn,\n    job_name=\"MyJob\",\n    job_queue_arn=batch_queue.job_queue_arn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Batch;\nJobDefinition batchJobDefinition;\nJobQueue batchQueue;\n\n\nBatchSubmitJob task = new BatchSubmitJob(this, \"Submit Job\", new BatchSubmitJobProps {\n    JobDefinitionArn = batchJobDefinition.JobDefinitionArn,\n    JobName = \"MyJob\",\n    JobQueueArn = batchQueue.JobQueueArn\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.batch.*;\nJobDefinition batchJobDefinition;\nJobQueue batchQueue;\n\n\nBatchSubmitJob task = BatchSubmitJob.Builder.create(this, \"Submit Job\")\n        .jobDefinitionArn(batchJobDefinition.getJobDefinitionArn())\n        .jobName(\"MyJob\")\n        .jobQueueArn(batchQueue.getJobQueueArn())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import batch \"github.com/aws-samples/dummy/awscdkawsbatch\"\nvar batchJobDefinition jobDefinition\nvar batchQueue jobQueue\n\ntask := tasks.NewBatchSubmitJob(this, jsii.String(\"Submit Job\"), &batchSubmitJobProps{\n\tjobDefinitionArn: batchJobDefinition.jobDefinitionArn,\n\tjobName: jsii.String(\"MyJob\"),\n\tjobQueueArn: batchQueue.jobQueueArn,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as batch from '@aws-cdk/aws-batch';\ndeclare const batchJobDefinition: batch.JobDefinition;\ndeclare const batchQueue: batch.JobQueue;\n\nconst task = new tasks.BatchSubmitJob(this, 'Submit Job', {\n  jobDefinitionArn: batchJobDefinition.jobDefinitionArn,\n  jobName: 'MyJob',\n  jobQueueArn: batchQueue.jobQueueArn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.BatchSubmitJob"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.JobDefinition#jobDefinitionArn",
        "@aws-cdk/aws-batch.JobQueue#jobQueueArn",
        "@aws-cdk/aws-stepfunctions-tasks.BatchSubmitJob",
        "@aws-cdk/aws-stepfunctions-tasks.BatchSubmitJobProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as batch from '@aws-cdk/aws-batch';\ndeclare const batchJobDefinition: batch.JobDefinition;\ndeclare const batchQueue: batch.JobQueue;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst task = new tasks.BatchSubmitJob(this, 'Submit Job', {\n  jobDefinitionArn: batchJobDefinition.jobDefinitionArn,\n  jobName: 'MyJob',\n  jobQueueArn: batchQueue.jobQueueArn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1a1a3fa67f95bcf89e142a199bb8e270e57f1d8e3360097be63cc64cfb427752"
    },
    "4d65ffdbb3058f8367a200dee6ebdc36ea6234747e86ebe0b285e400c83a9de5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_batch as batch\n# batch_job_definition: batch.JobDefinition\n# batch_queue: batch.JobQueue\n\n\ntask = tasks.BatchSubmitJob(self, \"Submit Job\",\n    job_definition_arn=batch_job_definition.job_definition_arn,\n    job_name=\"MyJob\",\n    job_queue_arn=batch_queue.job_queue_arn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Batch;\nJobDefinition batchJobDefinition;\nJobQueue batchQueue;\n\n\nBatchSubmitJob task = new BatchSubmitJob(this, \"Submit Job\", new BatchSubmitJobProps {\n    JobDefinitionArn = batchJobDefinition.JobDefinitionArn,\n    JobName = \"MyJob\",\n    JobQueueArn = batchQueue.JobQueueArn\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.batch.*;\nJobDefinition batchJobDefinition;\nJobQueue batchQueue;\n\n\nBatchSubmitJob task = BatchSubmitJob.Builder.create(this, \"Submit Job\")\n        .jobDefinitionArn(batchJobDefinition.getJobDefinitionArn())\n        .jobName(\"MyJob\")\n        .jobQueueArn(batchQueue.getJobQueueArn())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import batch \"github.com/aws-samples/dummy/awscdkawsbatch\"\nvar batchJobDefinition jobDefinition\nvar batchQueue jobQueue\n\ntask := tasks.NewBatchSubmitJob(this, jsii.String(\"Submit Job\"), &batchSubmitJobProps{\n\tjobDefinitionArn: batchJobDefinition.jobDefinitionArn,\n\tjobName: jsii.String(\"MyJob\"),\n\tjobQueueArn: batchQueue.jobQueueArn,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as batch from '@aws-cdk/aws-batch';\ndeclare const batchJobDefinition: batch.JobDefinition;\ndeclare const batchQueue: batch.JobQueue;\n\nconst task = new tasks.BatchSubmitJob(this, 'Submit Job', {\n  jobDefinitionArn: batchJobDefinition.jobDefinitionArn,\n  jobName: 'MyJob',\n  jobQueueArn: batchQueue.jobQueueArn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.BatchSubmitJobProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.JobDefinition#jobDefinitionArn",
        "@aws-cdk/aws-batch.JobQueue#jobQueueArn",
        "@aws-cdk/aws-stepfunctions-tasks.BatchSubmitJob",
        "@aws-cdk/aws-stepfunctions-tasks.BatchSubmitJobProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as batch from '@aws-cdk/aws-batch';\ndeclare const batchJobDefinition: batch.JobDefinition;\ndeclare const batchQueue: batch.JobQueue;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst task = new tasks.BatchSubmitJob(this, 'Submit Job', {\n  jobDefinitionArn: batchJobDefinition.jobDefinitionArn,\n  jobName: 'MyJob',\n  jobQueueArn: batchQueue.jobQueueArn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1a1a3fa67f95bcf89e142a199bb8e270e57f1d8e3360097be63cc64cfb427752"
    },
    "71e07a8333e3699ecf47bf421b91703537c5527934d8fe6840d0b6875e215c38": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# result_selector: Any\n# task_input: stepfunctions.TaskInput\n\ncall_api_gateway_endpoint_base_props = stepfunctions_tasks.CallApiGatewayEndpointBaseProps(\n    method=stepfunctions_tasks.HttpMethod.GET,\n\n    # the properties below are optional\n    api_path=\"apiPath\",\n    auth_type=stepfunctions_tasks.AuthType.NO_AUTH,\n    comment=\"comment\",\n    headers=task_input,\n    heartbeat=cdk.Duration.minutes(30),\n    input_path=\"inputPath\",\n    integration_pattern=stepfunctions.IntegrationPattern.REQUEST_RESPONSE,\n    output_path=\"outputPath\",\n    query_parameters=task_input,\n    request_body=task_input,\n    result_path=\"resultPath\",\n    result_selector={\n        \"result_selector_key\": result_selector\n    },\n    timeout=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nvar resultSelector;\nTaskInput taskInput;\nCallApiGatewayEndpointBaseProps callApiGatewayEndpointBaseProps = new CallApiGatewayEndpointBaseProps {\n    Method = HttpMethod.GET,\n\n    // the properties below are optional\n    ApiPath = \"apiPath\",\n    AuthType = AuthType.NO_AUTH,\n    Comment = \"comment\",\n    Headers = taskInput,\n    Heartbeat = Duration.Minutes(30),\n    InputPath = \"inputPath\",\n    IntegrationPattern = IntegrationPattern.REQUEST_RESPONSE,\n    OutputPath = \"outputPath\",\n    QueryParameters = taskInput,\n    RequestBody = taskInput,\n    ResultPath = \"resultPath\",\n    ResultSelector = new Dictionary<string, object> {\n        { \"resultSelectorKey\", resultSelector }\n    },\n    Timeout = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nObject resultSelector;\nTaskInput taskInput;\n\nCallApiGatewayEndpointBaseProps callApiGatewayEndpointBaseProps = CallApiGatewayEndpointBaseProps.builder()\n        .method(HttpMethod.GET)\n\n        // the properties below are optional\n        .apiPath(\"apiPath\")\n        .authType(AuthType.NO_AUTH)\n        .comment(\"comment\")\n        .headers(taskInput)\n        .heartbeat(Duration.minutes(30))\n        .inputPath(\"inputPath\")\n        .integrationPattern(IntegrationPattern.REQUEST_RESPONSE)\n        .outputPath(\"outputPath\")\n        .queryParameters(taskInput)\n        .requestBody(taskInput)\n        .resultPath(\"resultPath\")\n        .resultSelector(Map.of(\n                \"resultSelectorKey\", resultSelector))\n        .timeout(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar resultSelector interface{}\nvar taskInput taskInput\ncallApiGatewayEndpointBaseProps := &callApiGatewayEndpointBaseProps{\n\tmethod: stepfunctions_tasks.httpMethod_GET,\n\n\t// the properties below are optional\n\tapiPath: jsii.String(\"apiPath\"),\n\tauthType: stepfunctions_tasks.authType_NO_AUTH,\n\tcomment: jsii.String(\"comment\"),\n\theaders: taskInput,\n\theartbeat: cdk.duration.minutes(jsii.Number(30)),\n\tinputPath: jsii.String(\"inputPath\"),\n\tintegrationPattern: stepfunctions.integrationPattern_REQUEST_RESPONSE,\n\toutputPath: jsii.String(\"outputPath\"),\n\tqueryParameters: taskInput,\n\trequestBody: taskInput,\n\tresultPath: jsii.String(\"resultPath\"),\n\tresultSelector: map[string]interface{}{\n\t\t\"resultSelectorKey\": resultSelector,\n\t},\n\ttimeout: cdk.*duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const resultSelector: any;\ndeclare const taskInput: stepfunctions.TaskInput;\nconst callApiGatewayEndpointBaseProps: stepfunctions_tasks.CallApiGatewayEndpointBaseProps = {\n  method: stepfunctions_tasks.HttpMethod.GET,\n\n  // the properties below are optional\n  apiPath: 'apiPath',\n  authType: stepfunctions_tasks.AuthType.NO_AUTH,\n  comment: 'comment',\n  headers: taskInput,\n  heartbeat: cdk.Duration.minutes(30),\n  inputPath: 'inputPath',\n  integrationPattern: stepfunctions.IntegrationPattern.REQUEST_RESPONSE,\n  outputPath: 'outputPath',\n  queryParameters: taskInput,\n  requestBody: taskInput,\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n  timeout: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayEndpointBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.AuthType",
        "@aws-cdk/aws-stepfunctions-tasks.AuthType#NO_AUTH",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayEndpointBaseProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod#GET",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#REQUEST_RESPONSE",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const resultSelector: any;\ndeclare const taskInput: stepfunctions.TaskInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst callApiGatewayEndpointBaseProps: stepfunctions_tasks.CallApiGatewayEndpointBaseProps = {\n  method: stepfunctions_tasks.HttpMethod.GET,\n\n  // the properties below are optional\n  apiPath: 'apiPath',\n  authType: stepfunctions_tasks.AuthType.NO_AUTH,\n  comment: 'comment',\n  headers: taskInput,\n  heartbeat: cdk.Duration.minutes(30),\n  inputPath: 'inputPath',\n  integrationPattern: stepfunctions.IntegrationPattern.REQUEST_RESPONSE,\n  outputPath: 'outputPath',\n  queryParameters: taskInput,\n  requestBody: taskInput,\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n  timeout: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 44,
        "125": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 10,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "d908abe40256b3680bc226ad7650f8db8268a8be2e0bbede32f88fd0d1b71241"
    },
    "a5bb26418c6669d8ca9be1fb4e613786ad43f6a5210d1db3232cf3c02214eeee": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigatewayv2 as apigatewayv2\n\nhttp_api = apigatewayv2.HttpApi(self, \"MyHttpApi\")\n\ninvoke_task = tasks.CallApiGatewayHttpApiEndpoint(self, \"Call HTTP API\",\n    api_id=http_api.api_id,\n    api_stack=Stack.of(http_api),\n    method=tasks.HttpMethod.GET\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2;\n\nHttpApi httpApi = new HttpApi(this, \"MyHttpApi\");\n\nCallApiGatewayHttpApiEndpoint invokeTask = new CallApiGatewayHttpApiEndpoint(this, \"Call HTTP API\", new CallApiGatewayHttpApiEndpointProps {\n    ApiId = httpApi.ApiId,\n    ApiStack = Stack.Of(httpApi),\n    Method = HttpMethod.GET\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.*;\n\nHttpApi httpApi = new HttpApi(this, \"MyHttpApi\");\n\nCallApiGatewayHttpApiEndpoint invokeTask = CallApiGatewayHttpApiEndpoint.Builder.create(this, \"Call HTTP API\")\n        .apiId(httpApi.getApiId())\n        .apiStack(Stack.of(httpApi))\n        .method(HttpMethod.GET)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2 \"github.com/aws-samples/dummy/awscdkawsapigatewayv2\"\nhttpApi := apigatewayv2.NewHttpApi(this, jsii.String(\"MyHttpApi\"))\n\ninvokeTask := tasks.NewCallApiGatewayHttpApiEndpoint(this, jsii.String(\"Call HTTP API\"), &callApiGatewayHttpApiEndpointProps{\n\tapiId: httpApi.apiId,\n\tapiStack: *stack.of(httpApi),\n\tmethod: tasks.httpMethod_GET,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nconst httpApi = new apigatewayv2.HttpApi(this, 'MyHttpApi');\n\nconst invokeTask = new tasks.CallApiGatewayHttpApiEndpoint(this, 'Call HTTP API', {\n  apiId: httpApi.apiId,\n  apiStack: Stack.of(httpApi),\n  method: tasks.HttpMethod.GET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayHttpApiEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#apiId",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayHttpApiEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayHttpApiEndpointProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod#GET",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst httpApi = new apigatewayv2.HttpApi(this, 'MyHttpApi');\n\nconst invokeTask = new tasks.CallApiGatewayHttpApiEndpoint(this, 'Call HTTP API', {\n  apiId: httpApi.apiId,\n  apiStack: Stack.of(httpApi),\n  method: tasks.HttpMethod.GET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0b40c896e6f6945c653310b6f8b23466b9b8b19ade6731e0ef44d51367f07be2"
    },
    "5e60c8dfd40cf2132aba8f12e9b509263e9c3f1dcd29420cad7ca28c638ce03d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigatewayv2 as apigatewayv2\n\nhttp_api = apigatewayv2.HttpApi(self, \"MyHttpApi\")\n\ninvoke_task = tasks.CallApiGatewayHttpApiEndpoint(self, \"Call HTTP API\",\n    api_id=http_api.api_id,\n    api_stack=Stack.of(http_api),\n    method=tasks.HttpMethod.GET\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2;\n\nHttpApi httpApi = new HttpApi(this, \"MyHttpApi\");\n\nCallApiGatewayHttpApiEndpoint invokeTask = new CallApiGatewayHttpApiEndpoint(this, \"Call HTTP API\", new CallApiGatewayHttpApiEndpointProps {\n    ApiId = httpApi.ApiId,\n    ApiStack = Stack.Of(httpApi),\n    Method = HttpMethod.GET\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.*;\n\nHttpApi httpApi = new HttpApi(this, \"MyHttpApi\");\n\nCallApiGatewayHttpApiEndpoint invokeTask = CallApiGatewayHttpApiEndpoint.Builder.create(this, \"Call HTTP API\")\n        .apiId(httpApi.getApiId())\n        .apiStack(Stack.of(httpApi))\n        .method(HttpMethod.GET)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2 \"github.com/aws-samples/dummy/awscdkawsapigatewayv2\"\nhttpApi := apigatewayv2.NewHttpApi(this, jsii.String(\"MyHttpApi\"))\n\ninvokeTask := tasks.NewCallApiGatewayHttpApiEndpoint(this, jsii.String(\"Call HTTP API\"), &callApiGatewayHttpApiEndpointProps{\n\tapiId: httpApi.apiId,\n\tapiStack: *stack.of(httpApi),\n\tmethod: tasks.httpMethod_GET,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nconst httpApi = new apigatewayv2.HttpApi(this, 'MyHttpApi');\n\nconst invokeTask = new tasks.CallApiGatewayHttpApiEndpoint(this, 'Call HTTP API', {\n  apiId: httpApi.apiId,\n  apiStack: Stack.of(httpApi),\n  method: tasks.HttpMethod.GET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayHttpApiEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#apiId",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayHttpApiEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayHttpApiEndpointProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod#GET",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst httpApi = new apigatewayv2.HttpApi(this, 'MyHttpApi');\n\nconst invokeTask = new tasks.CallApiGatewayHttpApiEndpoint(this, 'Call HTTP API', {\n  apiId: httpApi.apiId,\n  apiStack: Stack.of(httpApi),\n  method: tasks.HttpMethod.GET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0b40c896e6f6945c653310b6f8b23466b9b8b19ade6731e0ef44d51367f07be2"
    },
    "9620c1ace5427aaf0ae19faf28dd624f80dc834e05ad6008aa4b550c79adf82f": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as apigateway\n# api: apigateway.RestApi\n\n\ntasks.CallApiGatewayRestApiEndpoint(self, \"Endpoint\",\n    api=api,\n    stage_name=\"Stage\",\n    method=tasks.HttpMethod.PUT,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    headers=sfn.TaskInput.from_object({\n        \"TaskToken\": sfn.JsonPath.array(sfn.JsonPath.task_token)\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\nRestApi api;\n\n\nnew CallApiGatewayRestApiEndpoint(this, \"Endpoint\", new CallApiGatewayRestApiEndpointProps {\n    Api = api,\n    StageName = \"Stage\",\n    Method = HttpMethod.PUT,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Headers = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"TaskToken\", JsonPath.Array(JsonPath.TaskToken) }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\nRestApi api;\n\n\nCallApiGatewayRestApiEndpoint.Builder.create(this, \"Endpoint\")\n        .api(api)\n        .stageName(\"Stage\")\n        .method(HttpMethod.PUT)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .headers(TaskInput.fromObject(Map.of(\n                \"TaskToken\", JsonPath.array(JsonPath.getTaskToken()))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nvar api restApi\n\ntasks.NewCallApiGatewayRestApiEndpoint(this, jsii.String(\"Endpoint\"), &callApiGatewayRestApiEndpointProps{\n\tapi: api,\n\tstageName: jsii.String(\"Stage\"),\n\tmethod: tasks.httpMethod_PUT,\n\tintegrationPattern: sfn.integrationPattern_WAIT_FOR_TASK_TOKEN,\n\theaders: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"TaskToken\": sfn.JsonPath.array(sfn.JsonPath.taskToken),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as apigateway from '@aws-cdk/aws-apigateway';\ndeclare const api: apigateway.RestApi;\n\nnew tasks.CallApiGatewayRestApiEndpoint(this, 'Endpoint', {\n   api,\n   stageName: 'Stage',\n   method: tasks.HttpMethod.PUT,\n   integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n   headers: sfn.TaskInput.fromObject({\n     TaskToken: sfn.JsonPath.array(sfn.JsonPath.taskToken),\n   }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpoint"
        },
        "field": {
          "field": "markdown",
          "line": 5
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpointProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod#PUT",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#array",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigateway from '@aws-cdk/aws-apigateway';\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew tasks.CallApiGatewayRestApiEndpoint(this, 'Endpoint', {\n   api,\n   stageName: 'Stage',\n   method: tasks.HttpMethod.PUT,\n   integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n   headers: sfn.TaskInput.fromObject({\n     TaskToken: sfn.JsonPath.array(sfn.JsonPath.taskToken),\n   }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 11,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "ee0e5b5174c0974f2a953c060e785ae2f802d67d2476aec12a7838479c9fe82a"
    },
    "518bcaeca46d5c822e73c3cf20013315ad11ce94089e46d6487bea2b4cc564c8": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as apigateway\n# api: apigateway.RestApi\n\n\ntasks.CallApiGatewayRestApiEndpoint(self, \"Endpoint\",\n    api=api,\n    stage_name=\"Stage\",\n    method=tasks.HttpMethod.PUT,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    headers=sfn.TaskInput.from_object({\n        \"TaskToken\": sfn.JsonPath.array(sfn.JsonPath.task_token)\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\nRestApi api;\n\n\nnew CallApiGatewayRestApiEndpoint(this, \"Endpoint\", new CallApiGatewayRestApiEndpointProps {\n    Api = api,\n    StageName = \"Stage\",\n    Method = HttpMethod.PUT,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Headers = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"TaskToken\", JsonPath.Array(JsonPath.TaskToken) }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\nRestApi api;\n\n\nCallApiGatewayRestApiEndpoint.Builder.create(this, \"Endpoint\")\n        .api(api)\n        .stageName(\"Stage\")\n        .method(HttpMethod.PUT)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .headers(TaskInput.fromObject(Map.of(\n                \"TaskToken\", JsonPath.array(JsonPath.getTaskToken()))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nvar api restApi\n\ntasks.NewCallApiGatewayRestApiEndpoint(this, jsii.String(\"Endpoint\"), &callApiGatewayRestApiEndpointProps{\n\tapi: api,\n\tstageName: jsii.String(\"Stage\"),\n\tmethod: tasks.httpMethod_PUT,\n\tintegrationPattern: sfn.integrationPattern_WAIT_FOR_TASK_TOKEN,\n\theaders: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"TaskToken\": sfn.JsonPath.array(sfn.JsonPath.taskToken),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as apigateway from '@aws-cdk/aws-apigateway';\ndeclare const api: apigateway.RestApi;\n\nnew tasks.CallApiGatewayRestApiEndpoint(this, 'Endpoint', {\n  api,\n  stageName: 'Stage',\n  method: tasks.HttpMethod.PUT,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  headers: sfn.TaskInput.fromObject({\n    TaskToken: sfn.JsonPath.array(sfn.JsonPath.taskToken),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpointProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod#PUT",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#array",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigateway from '@aws-cdk/aws-apigateway';\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew tasks.CallApiGatewayRestApiEndpoint(this, 'Endpoint', {\n  api,\n  stageName: 'Stage',\n  method: tasks.HttpMethod.PUT,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  headers: sfn.TaskInput.fromObject({\n    TaskToken: sfn.JsonPath.array(sfn.JsonPath.taskToken),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 11,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "ee0e5b5174c0974f2a953c060e785ae2f802d67d2476aec12a7838479c9fe82a"
    },
    "90b2e06eacbd887311baa244647ccaafe7a4c293799bf65d60d3d856df7a8cf9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as apigateway\n# api: apigateway.RestApi\n\n\ntasks.CallApiGatewayRestApiEndpoint(self, \"Endpoint\",\n    api=api,\n    stage_name=\"Stage\",\n    method=tasks.HttpMethod.PUT,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    headers=sfn.TaskInput.from_object({\n        \"TaskToken\": sfn.JsonPath.array(sfn.JsonPath.task_token)\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\nRestApi api;\n\n\nnew CallApiGatewayRestApiEndpoint(this, \"Endpoint\", new CallApiGatewayRestApiEndpointProps {\n    Api = api,\n    StageName = \"Stage\",\n    Method = HttpMethod.PUT,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Headers = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"TaskToken\", JsonPath.Array(JsonPath.TaskToken) }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\nRestApi api;\n\n\nCallApiGatewayRestApiEndpoint.Builder.create(this, \"Endpoint\")\n        .api(api)\n        .stageName(\"Stage\")\n        .method(HttpMethod.PUT)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .headers(TaskInput.fromObject(Map.of(\n                \"TaskToken\", JsonPath.array(JsonPath.getTaskToken()))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nvar api restApi\n\ntasks.NewCallApiGatewayRestApiEndpoint(this, jsii.String(\"Endpoint\"), &callApiGatewayRestApiEndpointProps{\n\tapi: api,\n\tstageName: jsii.String(\"Stage\"),\n\tmethod: tasks.httpMethod_PUT,\n\tintegrationPattern: sfn.integrationPattern_WAIT_FOR_TASK_TOKEN,\n\theaders: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"TaskToken\": sfn.JsonPath.array(sfn.JsonPath.taskToken),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as apigateway from '@aws-cdk/aws-apigateway';\ndeclare const api: apigateway.RestApi;\n\nnew tasks.CallApiGatewayRestApiEndpoint(this, 'Endpoint', {\n  api,\n  stageName: 'Stage',\n  method: tasks.HttpMethod.PUT,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  headers: sfn.TaskInput.fromObject({\n    TaskToken: sfn.JsonPath.array(sfn.JsonPath.taskToken),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayRestApiEndpointProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod#PUT",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#array",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigateway from '@aws-cdk/aws-apigateway';\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew tasks.CallApiGatewayRestApiEndpoint(this, 'Endpoint', {\n  api,\n  stageName: 'Stage',\n  method: tasks.HttpMethod.PUT,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  headers: sfn.TaskInput.fromObject({\n    TaskToken: sfn.JsonPath.array(sfn.JsonPath.taskToken),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 11,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "ee0e5b5174c0974f2a953c060e785ae2f802d67d2476aec12a7838479c9fe82a"
    },
    "1e012f94c1c96bf42cd8ae7b5ae04b4a373cff764af34d833390eeb06ed46e37": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\nget_object = tasks.CallAwsService(self, \"GetObject\",\n    service=\"s3\",\n    action=\"getObject\",\n    parameters={\n        \"Bucket\": my_bucket.bucket_name,\n        \"Key\": sfn.JsonPath.string_at(\"$.key\")\n    },\n    iam_resources=[my_bucket.arn_for_objects(\"*\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\nCallAwsService getObject = new CallAwsService(this, \"GetObject\", new CallAwsServiceProps {\n    Service = \"s3\",\n    Action = \"getObject\",\n    Parameters = new Dictionary<string, object> {\n        { \"Bucket\", myBucket.BucketName },\n        { \"Key\", JsonPath.StringAt(\"$.key\") }\n    },\n    IamResources = new [] { myBucket.ArnForObjects(\"*\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\nCallAwsService getObject = CallAwsService.Builder.create(this, \"GetObject\")\n        .service(\"s3\")\n        .action(\"getObject\")\n        .parameters(Map.of(\n                \"Bucket\", myBucket.getBucketName(),\n                \"Key\", JsonPath.stringAt(\"$.key\")))\n        .iamResources(List.of(myBucket.arnForObjects(\"*\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\ngetObject := tasks.NewCallAwsService(this, jsii.String(\"GetObject\"), &callAwsServiceProps{\n\tservice: jsii.String(\"s3\"),\n\taction: jsii.String(\"getObject\"),\n\tparameters: map[string]interface{}{\n\t\t\"Bucket\": myBucket.bucketName,\n\t\t\"Key\": sfn.JsonPath.stringAt(jsii.String(\"$.key\")),\n\t},\n\tiamResources: []*string{\n\t\tmyBucket.arnForObjects(jsii.String(\"*\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\nconst getObject = new tasks.CallAwsService(this, 'GetObject', {\n  service: 's3',\n  action: 'getObject',\n  parameters: {\n    Bucket: myBucket.bucketName,\n    Key: sfn.JsonPath.stringAt('$.key')\n  },\n  iamResources: [myBucket.arnForObjects('*')],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.CallAwsService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket#bucketName",
        "@aws-cdk/aws-s3.BucketBase#arnForObjects",
        "@aws-cdk/aws-stepfunctions-tasks.CallAwsService",
        "@aws-cdk/aws-stepfunctions-tasks.CallAwsServiceProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst getObject = new tasks.CallAwsService(this, 'GetObject', {\n  service: 's3',\n  action: 'getObject',\n  parameters: {\n    Bucket: myBucket.bucketName,\n    Key: sfn.JsonPath.stringAt('$.key')\n  },\n  iamResources: [myBucket.arnForObjects('*')],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "1c6820a9c13b8d21ee186b702db95bce0a238b6239024ab68c43e257a88e60e7"
    },
    "0b3e0eb4642583fbab4f79f776981d311045675cc029ce19159cf10b01f58b43": {
      "translations": {
        "python": {
          "source": "# my_bucket: s3.Bucket\n\nget_object = tasks.CallAwsService(self, \"GetObject\",\n    service=\"s3\",\n    action=\"getObject\",\n    parameters={\n        \"Bucket\": my_bucket.bucket_name,\n        \"Key\": sfn.JsonPath.string_at(\"$.key\")\n    },\n    iam_resources=[my_bucket.arn_for_objects(\"*\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\nCallAwsService getObject = new CallAwsService(this, \"GetObject\", new CallAwsServiceProps {\n    Service = \"s3\",\n    Action = \"getObject\",\n    Parameters = new Dictionary<string, object> {\n        { \"Bucket\", myBucket.BucketName },\n        { \"Key\", JsonPath.StringAt(\"$.key\") }\n    },\n    IamResources = new [] { myBucket.ArnForObjects(\"*\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\nCallAwsService getObject = CallAwsService.Builder.create(this, \"GetObject\")\n        .service(\"s3\")\n        .action(\"getObject\")\n        .parameters(Map.of(\n                \"Bucket\", myBucket.getBucketName(),\n                \"Key\", JsonPath.stringAt(\"$.key\")))\n        .iamResources(List.of(myBucket.arnForObjects(\"*\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myBucket bucket\ngetObject := tasks.NewCallAwsService(this, jsii.String(\"GetObject\"), &callAwsServiceProps{\n\tservice: jsii.String(\"s3\"),\n\taction: jsii.String(\"getObject\"),\n\tparameters: map[string]interface{}{\n\t\t\"Bucket\": myBucket.bucketName,\n\t\t\"Key\": sfn.JsonPath.stringAt(jsii.String(\"$.key\")),\n\t},\n\tiamResources: []*string{\n\t\tmyBucket.arnForObjects(jsii.String(\"*\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\nconst getObject = new tasks.CallAwsService(this, 'GetObject', {\n  service: 's3',\n  action: 'getObject',\n  parameters: {\n    Bucket: myBucket.bucketName,\n    Key: sfn.JsonPath.stringAt('$.key')\n  },\n  iamResources: [myBucket.arnForObjects('*')],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.CallAwsServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket#bucketName",
        "@aws-cdk/aws-s3.BucketBase#arnForObjects",
        "@aws-cdk/aws-stepfunctions-tasks.CallAwsService",
        "@aws-cdk/aws-stepfunctions-tasks.CallAwsServiceProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst getObject = new tasks.CallAwsService(this, 'GetObject', {\n  service: 's3',\n  action: 'getObject',\n  parameters: {\n    Bucket: myBucket.bucketName,\n    Key: sfn.JsonPath.stringAt('$.key')\n  },\n  iamResources: [myBucket.arnForObjects('*')],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "1c6820a9c13b8d21ee186b702db95bce0a238b6239024ab68c43e257a88e60e7"
    },
    "83a2f655a7832c7fa0e0042d42dae2414ed3cf3e496c2b3e53ac8f6d2de81491": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# s3_location: stepfunctions_tasks.S3Location\n\nchannel = stepfunctions_tasks.Channel(\n    channel_name=\"channelName\",\n    data_source=stepfunctions_tasks.DataSource(\n        s3_data_source=stepfunctions_tasks.S3DataSource(\n            s3_location=s3_location,\n\n            # the properties below are optional\n            attribute_names=[\"attributeNames\"],\n            s3_data_distribution_type=stepfunctions_tasks.S3DataDistributionType.FULLY_REPLICATED,\n            s3_data_type=stepfunctions_tasks.S3DataType.MANIFEST_FILE\n        )\n    ),\n\n    # the properties below are optional\n    compression_type=stepfunctions_tasks.CompressionType.NONE,\n    content_type=\"contentType\",\n    input_mode=stepfunctions_tasks.InputMode.PIPE,\n    record_wrapper_type=stepfunctions_tasks.RecordWrapperType.NONE,\n    shuffle_config=stepfunctions_tasks.ShuffleConfig(\n        seed=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nS3Location s3Location;\n\nChannel channel = new Channel {\n    ChannelName = \"channelName\",\n    DataSource = new DataSource {\n        S3DataSource = new S3DataSource {\n            S3Location = s3Location,\n\n            // the properties below are optional\n            AttributeNames = new [] { \"attributeNames\" },\n            S3DataDistributionType = S3DataDistributionType.FULLY_REPLICATED,\n            S3DataType = S3DataType.MANIFEST_FILE\n        }\n    },\n\n    // the properties below are optional\n    CompressionType = CompressionType.NONE,\n    ContentType = \"contentType\",\n    InputMode = InputMode.PIPE,\n    RecordWrapperType = RecordWrapperType.NONE,\n    ShuffleConfig = new ShuffleConfig {\n        Seed = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nS3Location s3Location;\n\nChannel channel = Channel.builder()\n        .channelName(\"channelName\")\n        .dataSource(DataSource.builder()\n                .s3DataSource(S3DataSource.builder()\n                        .s3Location(s3Location)\n\n                        // the properties below are optional\n                        .attributeNames(List.of(\"attributeNames\"))\n                        .s3DataDistributionType(S3DataDistributionType.FULLY_REPLICATED)\n                        .s3DataType(S3DataType.MANIFEST_FILE)\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .compressionType(CompressionType.NONE)\n        .contentType(\"contentType\")\n        .inputMode(InputMode.PIPE)\n        .recordWrapperType(RecordWrapperType.NONE)\n        .shuffleConfig(ShuffleConfig.builder()\n                .seed(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar s3Location s3Location\nchannel := &channel{\n\tchannelName: jsii.String(\"channelName\"),\n\tdataSource: &dataSource{\n\t\ts3DataSource: &s3DataSource{\n\t\t\ts3Location: s3Location,\n\n\t\t\t// the properties below are optional\n\t\t\tattributeNames: []*string{\n\t\t\t\tjsii.String(\"attributeNames\"),\n\t\t\t},\n\t\t\ts3DataDistributionType: stepfunctions_tasks.s3DataDistributionType_FULLY_REPLICATED,\n\t\t\ts3DataType: stepfunctions_tasks.s3DataType_MANIFEST_FILE,\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tcompressionType: stepfunctions_tasks.compressionType_NONE,\n\tcontentType: jsii.String(\"contentType\"),\n\tinputMode: stepfunctions_tasks.inputMode_PIPE,\n\trecordWrapperType: stepfunctions_tasks.recordWrapperType_NONE,\n\tshuffleConfig: &shuffleConfig{\n\t\tseed: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const s3Location: stepfunctions_tasks.S3Location;\nconst channel: stepfunctions_tasks.Channel = {\n  channelName: 'channelName',\n  dataSource: {\n    s3DataSource: {\n      s3Location: s3Location,\n\n      // the properties below are optional\n      attributeNames: ['attributeNames'],\n      s3DataDistributionType: stepfunctions_tasks.S3DataDistributionType.FULLY_REPLICATED,\n      s3DataType: stepfunctions_tasks.S3DataType.MANIFEST_FILE,\n    },\n  },\n\n  // the properties below are optional\n  compressionType: stepfunctions_tasks.CompressionType.NONE,\n  contentType: 'contentType',\n  inputMode: stepfunctions_tasks.InputMode.PIPE,\n  recordWrapperType: stepfunctions_tasks.RecordWrapperType.NONE,\n  shuffleConfig: {\n    seed: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.Channel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.Channel",
        "@aws-cdk/aws-stepfunctions-tasks.CompressionType",
        "@aws-cdk/aws-stepfunctions-tasks.CompressionType#NONE",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#PIPE",
        "@aws-cdk/aws-stepfunctions-tasks.RecordWrapperType",
        "@aws-cdk/aws-stepfunctions-tasks.RecordWrapperType#NONE",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataDistributionType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataDistributionType#FULLY_REPLICATED",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#MANIFEST_FILE",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.ShuffleConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const s3Location: stepfunctions_tasks.S3Location;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst channel: stepfunctions_tasks.Channel = {\n  channelName: 'channelName',\n  dataSource: {\n    s3DataSource: {\n      s3Location: s3Location,\n\n      // the properties below are optional\n      attributeNames: ['attributeNames'],\n      s3DataDistributionType: stepfunctions_tasks.S3DataDistributionType.FULLY_REPLICATED,\n      s3DataType: stepfunctions_tasks.S3DataType.MANIFEST_FILE,\n    },\n  },\n\n  // the properties below are optional\n  compressionType: stepfunctions_tasks.CompressionType.NONE,\n  contentType: 'contentType',\n  inputMode: stepfunctions_tasks.InputMode.PIPE,\n  recordWrapperType: stepfunctions_tasks.RecordWrapperType.NONE,\n  shuffleConfig: {\n    seed: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 36,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 4,
        "194": 10,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "e4aa1769e108e1de1be733932354e7e4d1e2e58735d166a1457ec979b8eb35ad"
    },
    "bd89ee833443515413a87acc22c4ef86f27f0f37f241114c360d3f65de770783": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_name=\"EMR-Containers-Job\",\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        )\n    ),\n    application_config=[tasks.ApplicationConfiguration(\n        classification=tasks.Classification.SPARK_DEFAULTS,\n        properties={\n            \"spark.executor.instances\": \"1\",\n            \"spark.executor.memory\": \"512M\"\n        }\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobName = \"EMR-Containers-Job\",\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        }\n    },\n    ApplicationConfig = new [] { new ApplicationConfiguration {\n        Classification = Classification.SPARK_DEFAULTS,\n        Properties = new Dictionary<string, string> {\n            { \"spark.executor.instances\", \"1\" },\n            { \"spark.executor.memory\", \"512M\" }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobName(\"EMR-Containers-Job\")\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .build())\n                .build())\n        .applicationConfig(List.of(ApplicationConfiguration.builder()\n                .classification(Classification.SPARK_DEFAULTS)\n                .properties(Map.of(\n                        \"spark.executor.instances\", \"1\",\n                        \"spark.executor.memory\", \"512M\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobName: jsii.String(\"EMR-Containers-Job\"),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t},\n\t},\n\tapplicationConfig: []applicationConfiguration{\n\t\t&applicationConfiguration{\n\t\t\tclassification: tasks.classification_SPARK_DEFAULTS(),\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"spark.executor.instances\": jsii.String(\"1\"),\n\t\t\t\t\"spark.executor.memory\": jsii.String(\"512M\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.Classification"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.Classification",
        "@aws-cdk/aws-stepfunctions-tasks.Classification#SPARK_DEFAULTS",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 23,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 11
      },
      "fqnsFingerprint": "f326c63003a23b7bc92021d0409fcc199f142e6192e2f115710fd3ed22301c96"
    },
    "517e90cd29ac4ec0f165dc7416e9d6217430c9551541ab0319060dc15e3f77f0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild\n\n\ncodebuild_project = codebuild.Project(self, \"Project\",\n    project_name=\"MyTestProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"echo \\\"Hello, CodeBuild!\\\"\"\n                ]\n            }\n        }\n    })\n)\n\ntask = tasks.CodeBuildStartBuild(self, \"Task\",\n    project=codebuild_project,\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    environment_variables_override={\n        \"ZONE\": codebuild.BuildEnvironmentVariable(\n            type=codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n            value=sfn.JsonPath.string_at(\"$.envVariables.zone\")\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;\n\n\nProject codebuildProject = new Project(this, \"Project\", new ProjectProps {\n    ProjectName = \"MyTestProject\",\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"echo \\\"Hello, CodeBuild!\\\"\" }\n            } }\n        } }\n    })\n});\n\nCodeBuildStartBuild task = new CodeBuildStartBuild(this, \"Task\", new CodeBuildStartBuildProps {\n    Project = codebuildProject,\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    EnvironmentVariablesOverride = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"ZONE\", new BuildEnvironmentVariable {\n            Type = BuildEnvironmentVariableType.PLAINTEXT,\n            Value = JsonPath.StringAt(\"$.envVariables.zone\")\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;\n\n\nProject codebuildProject = Project.Builder.create(this, \"Project\")\n        .projectName(\"MyTestProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"echo \\\"Hello, CodeBuild!\\\"\"))))))\n        .build();\n\nCodeBuildStartBuild task = CodeBuildStartBuild.Builder.create(this, \"Task\")\n        .project(codebuildProject)\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .environmentVariablesOverride(Map.of(\n                \"ZONE\", BuildEnvironmentVariable.builder()\n                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                        .value(JsonPath.stringAt(\"$.envVariables.zone\"))\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import codebuild \"github.com/aws-samples/dummy/awscdkawscodebuild\"\n\ncodebuildProject := codebuild.NewProject(this, jsii.String(\"Project\"), &projectProps{\n\tprojectName: jsii.String(\"MyTestProject\"),\n\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\"phases\": map[string]map[string][]*string{\n\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\"commands\": []*string{\n\t\t\t\t\tjsii.String(\"echo \\\"Hello, CodeBuild!\\\"\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}),\n})\n\ntask := tasks.NewCodeBuildStartBuild(this, jsii.String(\"Task\"), &codeBuildStartBuildProps{\n\tproject: codebuildProject,\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tenvironmentVariablesOverride: map[string]buildEnvironmentVariable{\n\t\t\"ZONE\": &buildEnvironmentVariable{\n\t\t\t\"type\": codebuild.BuildEnvironmentVariableType_PLAINTEXT,\n\t\t\t\"value\": sfn.JsonPath.stringAt(jsii.String(\"$.envVariables.zone\")),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';\n\nconst codebuildProject = new codebuild.Project(this, 'Project', {\n  projectName: 'MyTestProject',\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});\n\nconst task = new tasks.CodeBuildStartBuild(this, 'Task', {\n  project: codebuildProject,\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  environmentVariablesOverride: {\n    ZONE: {\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      value: sfn.JsonPath.stringAt('$.envVariables.zone'),\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuild"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuild",
        "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuildProps",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst codebuildProject = new codebuild.Project(this, 'Project', {\n  projectName: 'MyTestProject',\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});\n\nconst task = new tasks.CodeBuildStartBuild(this, 'Task', {\n  project: codebuildProject,\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  environmentVariablesOverride: {\n    ZONE: {\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      value: sfn.JsonPath.stringAt('$.envVariables.zone'),\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 32,
        "104": 2,
        "192": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "9db5638683d5d530acafc4246cc0ff506bcf97927355826362e75fa95c20f75c"
    },
    "978008ed2b21b348866aea4da416b17e9dc7faf33123eb89d9083aa8d11e1b2f": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild\n\n\ncodebuild_project = codebuild.Project(self, \"Project\",\n    project_name=\"MyTestProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"echo \\\"Hello, CodeBuild!\\\"\"\n                ]\n            }\n        }\n    })\n)\n\ntask = tasks.CodeBuildStartBuild(self, \"Task\",\n    project=codebuild_project,\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    environment_variables_override={\n        \"ZONE\": codebuild.BuildEnvironmentVariable(\n            type=codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n            value=sfn.JsonPath.string_at(\"$.envVariables.zone\")\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;\n\n\nProject codebuildProject = new Project(this, \"Project\", new ProjectProps {\n    ProjectName = \"MyTestProject\",\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"echo \\\"Hello, CodeBuild!\\\"\" }\n            } }\n        } }\n    })\n});\n\nCodeBuildStartBuild task = new CodeBuildStartBuild(this, \"Task\", new CodeBuildStartBuildProps {\n    Project = codebuildProject,\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    EnvironmentVariablesOverride = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"ZONE\", new BuildEnvironmentVariable {\n            Type = BuildEnvironmentVariableType.PLAINTEXT,\n            Value = JsonPath.StringAt(\"$.envVariables.zone\")\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;\n\n\nProject codebuildProject = Project.Builder.create(this, \"Project\")\n        .projectName(\"MyTestProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"echo \\\"Hello, CodeBuild!\\\"\"))))))\n        .build();\n\nCodeBuildStartBuild task = CodeBuildStartBuild.Builder.create(this, \"Task\")\n        .project(codebuildProject)\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .environmentVariablesOverride(Map.of(\n                \"ZONE\", BuildEnvironmentVariable.builder()\n                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                        .value(JsonPath.stringAt(\"$.envVariables.zone\"))\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import codebuild \"github.com/aws-samples/dummy/awscdkawscodebuild\"\n\ncodebuildProject := codebuild.NewProject(this, jsii.String(\"Project\"), &projectProps{\n\tprojectName: jsii.String(\"MyTestProject\"),\n\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\"phases\": map[string]map[string][]*string{\n\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\"commands\": []*string{\n\t\t\t\t\tjsii.String(\"echo \\\"Hello, CodeBuild!\\\"\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}),\n})\n\ntask := tasks.NewCodeBuildStartBuild(this, jsii.String(\"Task\"), &codeBuildStartBuildProps{\n\tproject: codebuildProject,\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tenvironmentVariablesOverride: map[string]buildEnvironmentVariable{\n\t\t\"ZONE\": &buildEnvironmentVariable{\n\t\t\t\"type\": codebuild.BuildEnvironmentVariableType_PLAINTEXT,\n\t\t\t\"value\": sfn.JsonPath.stringAt(jsii.String(\"$.envVariables.zone\")),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';\n\nconst codebuildProject = new codebuild.Project(this, 'Project', {\n  projectName: 'MyTestProject',\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});\n\nconst task = new tasks.CodeBuildStartBuild(this, 'Task', {\n  project: codebuildProject,\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  environmentVariablesOverride: {\n    ZONE: {\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      value: sfn.JsonPath.stringAt('$.envVariables.zone'),\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuildProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuild",
        "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuildProps",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst codebuildProject = new codebuild.Project(this, 'Project', {\n  projectName: 'MyTestProject',\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});\n\nconst task = new tasks.CodeBuildStartBuild(this, 'Task', {\n  project: codebuildProject,\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  environmentVariablesOverride: {\n    ZONE: {\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      value: sfn.JsonPath.stringAt('$.envVariables.zone'),\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 32,
        "104": 2,
        "192": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "9db5638683d5d530acafc4246cc0ff506bcf97927355826362e75fa95c20f75c"
    },
    "f07db810dda172f01a837dcccec3711fc74a155878d7bfd42b3a2a9b2292e2fc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# task_definition: ecs.TaskDefinition\n\ncommon_ecs_run_task_props = stepfunctions_tasks.CommonEcsRunTaskProps(\n    cluster=cluster,\n    task_definition=task_definition,\n\n    # the properties below are optional\n    container_overrides=[stepfunctions_tasks.ContainerOverride(\n        container_definition=container_definition,\n\n        # the properties below are optional\n        command=[\"command\"],\n        cpu=123,\n        environment=[stepfunctions_tasks.TaskEnvironmentVariable(\n            name=\"name\",\n            value=\"value\"\n        )],\n        memory_limit=123,\n        memory_reservation=123\n    )],\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nTaskDefinition taskDefinition;\n\nCommonEcsRunTaskProps commonEcsRunTaskProps = new CommonEcsRunTaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n\n    // the properties below are optional\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Cpu = 123,\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        MemoryLimit = 123,\n        MemoryReservation = 123\n    } },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nTaskDefinition taskDefinition;\n\nCommonEcsRunTaskProps commonEcsRunTaskProps = CommonEcsRunTaskProps.builder()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n\n        // the properties below are optional\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .cpu(123)\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .memoryLimit(123)\n                .memoryReservation(123)\n                .build()))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar cluster cluster\nvar containerDefinition containerDefinition\nvar taskDefinition taskDefinition\ncommonEcsRunTaskProps := &commonEcsRunTaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\n\t// the properties below are optional\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerDefinition: containerDefinition,\n\n\t\t\t// the properties below are optional\n\t\t\tcommand: []*string{\n\t\t\t\tjsii.String(\"command\"),\n\t\t\t},\n\t\t\tcpu: jsii.Number(123),\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmemoryLimit: jsii.Number(123),\n\t\t\tmemoryReservation: jsii.Number(123),\n\t\t},\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst commonEcsRunTaskProps: stepfunctions_tasks.CommonEcsRunTaskProps = {\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.CommonEcsRunTaskProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.CommonEcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst commonEcsRunTaskProps: stepfunctions_tasks.CommonEcsRunTaskProps = {\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 33,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 3,
        "193": 3,
        "194": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "95eb5691b526b990814c468b4c206186d7caddf02cb3ec367340b4bf0292d419"
    },
    "996dec65a4b0c1b94dd96f370871e1c34bfd4397aed85ff28e70ef0179a9a98c": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateModel(self, \"Sagemaker\",\n    model_name=\"MyModel\",\n    primary_container=tasks.ContainerDefinition(\n        image=tasks.DockerImage.from_json_expression(sfn.JsonPath.string_at(\"$.Model.imageName\")),\n        mode=tasks.Mode.SINGLE_MODEL,\n        model_s3_location=tasks.S3Location.from_json_expression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateModel(this, \"Sagemaker\", new SageMakerCreateModelProps {\n    ModelName = \"MyModel\",\n    PrimaryContainer = new ContainerDefinition(new ContainerDefinitionOptions {\n        Image = DockerImage.FromJsonExpression(JsonPath.StringAt(\"$.Model.imageName\")),\n        Mode = Mode.SINGLE_MODEL,\n        ModelS3Location = S3Location.FromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateModel.Builder.create(this, \"Sagemaker\")\n        .modelName(\"MyModel\")\n        .primaryContainer(ContainerDefinition.Builder.create()\n                .image(DockerImage.fromJsonExpression(JsonPath.stringAt(\"$.Model.imageName\")))\n                .mode(Mode.SINGLE_MODEL)\n                .modelS3Location(S3Location.fromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateModel(this, jsii.String(\"Sagemaker\"), &sageMakerCreateModelProps{\n\tmodelName: jsii.String(\"MyModel\"),\n\tprimaryContainer: tasks.NewContainerDefinition(&containerDefinitionOptions{\n\t\timage: tasks.dockerImage.fromJsonExpression(sfn.jsonPath.stringAt(jsii.String(\"$.Model.imageName\"))),\n\t\tmode: tasks.mode_SINGLE_MODEL,\n\t\tmodelS3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinitionOptions",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.IContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.Mode",
        "@aws-cdk/aws-stepfunctions-tasks.Mode#SINGLE_MODEL",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModel",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModelProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "193": 2,
        "194": 10,
        "196": 3,
        "197": 2,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "b1970df7f72e14acedbd643173af4da87ef70ae8be1bea9122c50f2481b3c3ee"
    },
    "5a861899ff2f5abb5ba749fe7e34ba40cf0f83a4887a5b918fdd13e9d6a233ae": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# parameters: Any\n\ncontainer_definition_config = stepfunctions_tasks.ContainerDefinitionConfig(\n    parameters={\n        \"parameters_key\": parameters\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nvar parameters;\n\nContainerDefinitionConfig containerDefinitionConfig = new ContainerDefinitionConfig {\n    Parameters = new Dictionary<string, object> {\n        { \"parametersKey\", parameters }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nObject parameters;\n\nContainerDefinitionConfig containerDefinitionConfig = ContainerDefinitionConfig.builder()\n        .parameters(Map.of(\n                \"parametersKey\", parameters))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar parameters interface{}\ncontainerDefinitionConfig := &containerDefinitionConfig{\n\tparameters: map[string]interface{}{\n\t\t\"parametersKey\": parameters,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const parameters: any;\nconst containerDefinitionConfig: stepfunctions_tasks.ContainerDefinitionConfig = {\n  parameters: {\n    parametersKey: parameters,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinitionConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinitionConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const parameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst containerDefinitionConfig: stepfunctions_tasks.ContainerDefinitionConfig = {\n  parameters: {\n    parametersKey: parameters,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "08f879be648a7ab86447dea6fdee912bfcbeb2d234868074f8f4da737233e5be"
    },
    "561a5e16968b66dd73774e79702c84a7e18643979e06121590b743ca5242904b": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateModel(self, \"Sagemaker\",\n    model_name=\"MyModel\",\n    primary_container=tasks.ContainerDefinition(\n        image=tasks.DockerImage.from_json_expression(sfn.JsonPath.string_at(\"$.Model.imageName\")),\n        mode=tasks.Mode.SINGLE_MODEL,\n        model_s3_location=tasks.S3Location.from_json_expression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateModel(this, \"Sagemaker\", new SageMakerCreateModelProps {\n    ModelName = \"MyModel\",\n    PrimaryContainer = new ContainerDefinition(new ContainerDefinitionOptions {\n        Image = DockerImage.FromJsonExpression(JsonPath.StringAt(\"$.Model.imageName\")),\n        Mode = Mode.SINGLE_MODEL,\n        ModelS3Location = S3Location.FromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateModel.Builder.create(this, \"Sagemaker\")\n        .modelName(\"MyModel\")\n        .primaryContainer(ContainerDefinition.Builder.create()\n                .image(DockerImage.fromJsonExpression(JsonPath.stringAt(\"$.Model.imageName\")))\n                .mode(Mode.SINGLE_MODEL)\n                .modelS3Location(S3Location.fromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateModel(this, jsii.String(\"Sagemaker\"), &sageMakerCreateModelProps{\n\tmodelName: jsii.String(\"MyModel\"),\n\tprimaryContainer: tasks.NewContainerDefinition(&containerDefinitionOptions{\n\t\timage: tasks.dockerImage.fromJsonExpression(sfn.jsonPath.stringAt(jsii.String(\"$.Model.imageName\"))),\n\t\tmode: tasks.mode_SINGLE_MODEL,\n\t\tmodelS3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinitionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinitionOptions",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.IContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.Mode",
        "@aws-cdk/aws-stepfunctions-tasks.Mode#SINGLE_MODEL",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModel",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModelProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "193": 2,
        "194": 10,
        "196": 3,
        "197": 2,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "b1970df7f72e14acedbd643173af4da87ef70ae8be1bea9122c50f2481b3c3ee"
    },
    "b33a206fc8261b340d0574bdd2b05d5fbb707858a153cf89cc2609544e70cc4e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# container_definition: ecs.ContainerDefinition\n\ncontainer_override = stepfunctions_tasks.ContainerOverride(\n    container_definition=container_definition,\n\n    # the properties below are optional\n    command=[\"command\"],\n    cpu=123,\n    environment=[stepfunctions_tasks.TaskEnvironmentVariable(\n        name=\"name\",\n        value=\"value\"\n    )],\n    memory_limit=123,\n    memory_reservation=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nContainerDefinition containerDefinition;\n\nContainerOverride containerOverride = new ContainerOverride {\n    ContainerDefinition = containerDefinition,\n\n    // the properties below are optional\n    Command = new [] { \"command\" },\n    Cpu = 123,\n    Environment = new [] { new TaskEnvironmentVariable {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    MemoryLimit = 123,\n    MemoryReservation = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nContainerDefinition containerDefinition;\n\nContainerOverride containerOverride = ContainerOverride.builder()\n        .containerDefinition(containerDefinition)\n\n        // the properties below are optional\n        .command(List.of(\"command\"))\n        .cpu(123)\n        .environment(List.of(TaskEnvironmentVariable.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .memoryLimit(123)\n        .memoryReservation(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar containerDefinition containerDefinition\ncontainerOverride := &containerOverride{\n\tcontainerDefinition: containerDefinition,\n\n\t// the properties below are optional\n\tcommand: []*string{\n\t\tjsii.String(\"command\"),\n\t},\n\tcpu: jsii.Number(123),\n\tenvironment: []taskEnvironmentVariable{\n\t\t&taskEnvironmentVariable{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tmemoryLimit: jsii.Number(123),\n\tmemoryReservation: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const containerDefinition: ecs.ContainerDefinition;\nconst containerOverride: stepfunctions_tasks.ContainerOverride = {\n  containerDefinition: containerDefinition,\n\n  // the properties below are optional\n  command: ['command'],\n  cpu: 123,\n  environment: [{\n    name: 'name',\n    value: 'value',\n  }],\n  memoryLimit: 123,\n  memoryReservation: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ContainerOverride"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.ContainerOverride"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const containerDefinition: ecs.ContainerDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst containerOverride: stepfunctions_tasks.ContainerOverride = {\n  containerDefinition: containerDefinition,\n\n  // the properties below are optional\n  command: ['command'],\n  cpu: 123,\n  environment: [{\n    name: 'name',\n    value: 'value',\n  }],\n  memoryLimit: 123,\n  memoryReservation: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 17,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "c2e554f7de6f3326ac3d282bf10f6ef634e177bfe6613844ad329a8d0878d014"
    },
    "7a82d077f917f9c3e99dc3969662f77ea67636723b2691b8cef6d0585916aa73": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# instance_type: ec2.InstanceType\n\ncontainer_overrides = stepfunctions_tasks.ContainerOverrides(\n    command=[\"command\"],\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    gpu_count=123,\n    instance_type=instance_type,\n    memory=123,\n    vcpus=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nInstanceType instanceType;\n\nContainerOverrides containerOverrides = new ContainerOverrides {\n    Command = new [] { \"command\" },\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    GpuCount = 123,\n    InstanceType = instanceType,\n    Memory = 123,\n    Vcpus = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nInstanceType instanceType;\n\nContainerOverrides containerOverrides = ContainerOverrides.builder()\n        .command(List.of(\"command\"))\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .gpuCount(123)\n        .instanceType(instanceType)\n        .memory(123)\n        .vcpus(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar instanceType instanceType\ncontainerOverrides := &containerOverrides{\n\tcommand: []*string{\n\t\tjsii.String(\"command\"),\n\t},\n\tenvironment: map[string]*string{\n\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t},\n\tgpuCount: jsii.Number(123),\n\tinstanceType: instanceType,\n\tmemory: jsii.Number(123),\n\tvcpus: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const instanceType: ec2.InstanceType;\nconst containerOverrides: stepfunctions_tasks.ContainerOverrides = {\n  command: ['command'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  gpuCount: 123,\n  instanceType: instanceType,\n  memory: 123,\n  vcpus: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ContainerOverrides"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-stepfunctions-tasks.ContainerOverrides"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst containerOverrides: stepfunctions_tasks.ContainerOverrides = {\n  command: ['command'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  gpuCount: 123,\n  instanceType: instanceType,\n  memory: 123,\n  vcpus: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 16,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "6735a82d767b1900aa8a19073abab3449866995a77e82f9e10fc2b31113c2531"
    },
    "520fa0b3e76a603b0d2ba0f956dae7cd5a5811fc8c634fce094e578ed4c825c6": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "07178f764b0e543769c8ec6c711756a4240eb326dd0640c6bfc0e3b2d54b21bd": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateModel(self, \"Sagemaker\",\n    model_name=\"MyModel\",\n    primary_container=tasks.ContainerDefinition(\n        image=tasks.DockerImage.from_json_expression(sfn.JsonPath.string_at(\"$.Model.imageName\")),\n        mode=tasks.Mode.SINGLE_MODEL,\n        model_s3_location=tasks.S3Location.from_json_expression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateModel(this, \"Sagemaker\", new SageMakerCreateModelProps {\n    ModelName = \"MyModel\",\n    PrimaryContainer = new ContainerDefinition(new ContainerDefinitionOptions {\n        Image = DockerImage.FromJsonExpression(JsonPath.StringAt(\"$.Model.imageName\")),\n        Mode = Mode.SINGLE_MODEL,\n        ModelS3Location = S3Location.FromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateModel.Builder.create(this, \"Sagemaker\")\n        .modelName(\"MyModel\")\n        .primaryContainer(ContainerDefinition.Builder.create()\n                .image(DockerImage.fromJsonExpression(JsonPath.stringAt(\"$.Model.imageName\")))\n                .mode(Mode.SINGLE_MODEL)\n                .modelS3Location(S3Location.fromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateModel(this, jsii.String(\"Sagemaker\"), &sageMakerCreateModelProps{\n\tmodelName: jsii.String(\"MyModel\"),\n\tprimaryContainer: tasks.NewContainerDefinition(&containerDefinitionOptions{\n\t\timage: tasks.dockerImage.fromJsonExpression(sfn.jsonPath.stringAt(jsii.String(\"$.Model.imageName\"))),\n\t\tmode: tasks.mode_SINGLE_MODEL,\n\t\tmodelS3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DockerImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinitionOptions",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.IContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.Mode",
        "@aws-cdk/aws-stepfunctions-tasks.Mode#SINGLE_MODEL",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModel",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModelProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "193": 2,
        "194": 10,
        "196": 3,
        "197": 2,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "b1970df7f72e14acedbd643173af4da87ef70ae8be1bea9122c50f2481b3c3ee"
    },
    "4eae49f11a88e703d88ad2ce0dad3fbc80b09f165a3136aaca0c38137e7dac65": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\ndocker_image_config = stepfunctions_tasks.DockerImageConfig(\n    image_uri=\"imageUri\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nDockerImageConfig dockerImageConfig = new DockerImageConfig {\n    ImageUri = \"imageUri\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nDockerImageConfig dockerImageConfig = DockerImageConfig.builder()\n        .imageUri(\"imageUri\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\ndockerImageConfig := &dockerImageConfig{\n\timageUri: jsii.String(\"imageUri\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst dockerImageConfig: stepfunctions_tasks.DockerImageConfig = {\n  imageUri: 'imageUri',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DockerImageConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.DockerImageConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dockerImageConfig: stepfunctions_tasks.DockerImageConfig = {\n  imageUri: 'imageUri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "8c21b2305b95b8262d5461b2e94607cf9d0ed3488a2e7eb171bdedb5a98b2a3a"
    },
    "bcdeeffe7c1ed03421eab48a11cc72000de55411e3e457e6f3af93b9162bd470": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoDeleteItem(self, \"DeleteItem\",\n    key={\"MessageId\": tasks.DynamoAttributeValue.from_string(\"message-007\")},\n    table=my_table,\n    result_path=sfn.JsonPath.DISCARD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoDeleteItem(this, \"DeleteItem\", new DynamoDeleteItemProps {\n    Key = new Dictionary<string, DynamoAttributeValue> { { \"MessageId\", DynamoAttributeValue.FromString(\"message-007\") } },\n    Table = myTable,\n    ResultPath = JsonPath.DISCARD\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoDeleteItem.Builder.create(this, \"DeleteItem\")\n        .key(Map.of(\"MessageId\", DynamoAttributeValue.fromString(\"message-007\")))\n        .table(myTable)\n        .resultPath(JsonPath.DISCARD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoDeleteItem(this, jsii.String(\"DeleteItem\"), &dynamoDeleteItemProps{\n\tkey: map[string]dynamoAttributeValue{\n\t\t\"MessageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-007\")),\n\t},\n\ttable: myTable,\n\tresultPath: sfn.jsonPath_DISCARD(),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoDeleteItem(this, 'DeleteItem', {\n  key: { MessageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n  resultPath: sfn.JsonPath.DISCARD,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoDeleteItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoDeleteItemProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#DISCARD",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoDeleteItem(this, 'DeleteItem', {\n  key: { MessageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n  resultPath: sfn.JsonPath.DISCARD,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "590e3b8d3fbe47a03c805538e6c06ddb7d1634002f18b7a9377d05db762f1a31"
    },
    "a198e4984c0a9a7ca9e5b29528c9305b279fedf6616501fbdc04b4a1143436eb": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoDeleteItem(self, \"DeleteItem\",\n    key={\"MessageId\": tasks.DynamoAttributeValue.from_string(\"message-007\")},\n    table=my_table,\n    result_path=sfn.JsonPath.DISCARD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoDeleteItem(this, \"DeleteItem\", new DynamoDeleteItemProps {\n    Key = new Dictionary<string, DynamoAttributeValue> { { \"MessageId\", DynamoAttributeValue.FromString(\"message-007\") } },\n    Table = myTable,\n    ResultPath = JsonPath.DISCARD\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoDeleteItem.Builder.create(this, \"DeleteItem\")\n        .key(Map.of(\"MessageId\", DynamoAttributeValue.fromString(\"message-007\")))\n        .table(myTable)\n        .resultPath(JsonPath.DISCARD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoDeleteItem(this, jsii.String(\"DeleteItem\"), &dynamoDeleteItemProps{\n\tkey: map[string]dynamoAttributeValue{\n\t\t\"MessageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-007\")),\n\t},\n\ttable: myTable,\n\tresultPath: sfn.jsonPath_DISCARD(),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoDeleteItem(this, 'DeleteItem', {\n  key: { MessageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n  resultPath: sfn.JsonPath.DISCARD,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DynamoDeleteItem"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoDeleteItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoDeleteItemProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#DISCARD",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoDeleteItem(this, 'DeleteItem', {\n  key: { MessageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n  resultPath: sfn.JsonPath.DISCARD,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "590e3b8d3fbe47a03c805538e6c06ddb7d1634002f18b7a9377d05db762f1a31"
    },
    "90f77b16b37c2f467a6c4f9a32a5cb6ddcaa1bcb0b00e8555beaa273ba6c1880": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoDeleteItem(self, \"DeleteItem\",\n    key={\"MessageId\": tasks.DynamoAttributeValue.from_string(\"message-007\")},\n    table=my_table,\n    result_path=sfn.JsonPath.DISCARD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoDeleteItem(this, \"DeleteItem\", new DynamoDeleteItemProps {\n    Key = new Dictionary<string, DynamoAttributeValue> { { \"MessageId\", DynamoAttributeValue.FromString(\"message-007\") } },\n    Table = myTable,\n    ResultPath = JsonPath.DISCARD\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoDeleteItem.Builder.create(this, \"DeleteItem\")\n        .key(Map.of(\"MessageId\", DynamoAttributeValue.fromString(\"message-007\")))\n        .table(myTable)\n        .resultPath(JsonPath.DISCARD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoDeleteItem(this, jsii.String(\"DeleteItem\"), &dynamoDeleteItemProps{\n\tkey: map[string]dynamoAttributeValue{\n\t\t\"MessageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-007\")),\n\t},\n\ttable: myTable,\n\tresultPath: sfn.jsonPath_DISCARD(),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoDeleteItem(this, 'DeleteItem', {\n  key: { MessageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n  resultPath: sfn.JsonPath.DISCARD,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DynamoDeleteItemProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoDeleteItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoDeleteItemProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#DISCARD",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoDeleteItem(this, 'DeleteItem', {\n  key: { MessageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n  resultPath: sfn.JsonPath.DISCARD,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "590e3b8d3fbe47a03c805538e6c06ddb7d1634002f18b7a9377d05db762f1a31"
    },
    "6090e7f7b7c7c8b2fefcd5b6ca9d86159a3650dae65d4cff88859ca57e939724": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoGetItem(self, \"Get Item\",\n    key={\"message_id\": tasks.DynamoAttributeValue.from_string(\"message-007\")},\n    table=my_table\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoGetItem(this, \"Get Item\", new DynamoGetItemProps {\n    Key = new Dictionary<string, DynamoAttributeValue> { { \"messageId\", DynamoAttributeValue.FromString(\"message-007\") } },\n    Table = myTable\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoGetItem.Builder.create(this, \"Get Item\")\n        .key(Map.of(\"messageId\", DynamoAttributeValue.fromString(\"message-007\")))\n        .table(myTable)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoGetItem(this, jsii.String(\"Get Item\"), &dynamoGetItemProps{\n\tkey: map[string]dynamoAttributeValue{\n\t\t\"messageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-007\")),\n\t},\n\ttable: myTable,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoGetItem(this, 'Get Item', {\n  key: { messageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DynamoGetItem"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoGetItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoGetItemProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoGetItem(this, 'Get Item', {\n  key: { messageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5966da7212e740dcba072ca286f1f11067ae1a6012a0b8180a242eeea3598e0f"
    },
    "eec9a7082f764d8ed69bd1087152cbd354e37ffcc25f92b49ecb83dec0ec23b5": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoGetItem(self, \"Get Item\",\n    key={\"message_id\": tasks.DynamoAttributeValue.from_string(\"message-007\")},\n    table=my_table\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoGetItem(this, \"Get Item\", new DynamoGetItemProps {\n    Key = new Dictionary<string, DynamoAttributeValue> { { \"messageId\", DynamoAttributeValue.FromString(\"message-007\") } },\n    Table = myTable\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoGetItem.Builder.create(this, \"Get Item\")\n        .key(Map.of(\"messageId\", DynamoAttributeValue.fromString(\"message-007\")))\n        .table(myTable)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoGetItem(this, jsii.String(\"Get Item\"), &dynamoGetItemProps{\n\tkey: map[string]dynamoAttributeValue{\n\t\t\"messageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-007\")),\n\t},\n\ttable: myTable,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoGetItem(this, 'Get Item', {\n  key: { messageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DynamoGetItemProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoGetItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoGetItemProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoGetItem(this, 'Get Item', {\n  key: { messageId: tasks.DynamoAttributeValue.fromString('message-007') },\n  table: myTable,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5966da7212e740dcba072ca286f1f11067ae1a6012a0b8180a242eeea3598e0f"
    },
    "5aa5b1286cd9072baa0aee2f6a832f92224342127b6fd3373d300e91f0272c4d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\ndynamo_projection_expression = stepfunctions_tasks.DynamoProjectionExpression()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nDynamoProjectionExpression dynamoProjectionExpression = new DynamoProjectionExpression();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nDynamoProjectionExpression dynamoProjectionExpression = new DynamoProjectionExpression();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\ndynamoProjectionExpression := stepfunctions_tasks.NewDynamoProjectionExpression()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst dynamoProjectionExpression = new stepfunctions_tasks.DynamoProjectionExpression();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DynamoProjectionExpression"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.DynamoProjectionExpression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dynamoProjectionExpression = new stepfunctions_tasks.DynamoProjectionExpression();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "262d012727f785b5cdd07acbff02dc9f65a68bbb78b7daf1406a63e08513931b"
    },
    "2f3e66bddb17ea4160a7f1803841b042496a64e87a16ce3d1a3896aa72c76e64": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoPutItem(self, \"PutItem\",\n    item={\n        \"MessageId\": tasks.DynamoAttributeValue.from_string(\"message-id\")\n    },\n    table=my_table,\n    result_path=\"$.Item\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoPutItem(this, \"PutItem\", new DynamoPutItemProps {\n    Item = new Dictionary<string, DynamoAttributeValue> {\n        { \"MessageId\", DynamoAttributeValue.FromString(\"message-id\") }\n    },\n    Table = myTable,\n    ResultPath = \"$.Item\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoPutItem.Builder.create(this, \"PutItem\")\n        .item(Map.of(\n                \"MessageId\", DynamoAttributeValue.fromString(\"message-id\")))\n        .table(myTable)\n        .resultPath(\"$.Item\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoPutItem(this, jsii.String(\"PutItem\"), &dynamoPutItemProps{\n\titem: map[string]dynamoAttributeValue{\n\t\t\"MessageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-id\")),\n\t},\n\ttable: myTable,\n\tresultPath: jsii.String(\"$.Item\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoPutItem(this, 'PutItem', {\n  item: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-id'),\n  },\n  table: myTable,\n  resultPath: `$.Item`,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DynamoPutItem"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoPutItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoPutItemProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoPutItem(this, 'PutItem', {\n  item: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-id'),\n  },\n  table: myTable,\n  resultPath: `$.Item`,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "14": 1,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "ce71da50988d34b8ca7e53c048a837a788ade14501eecb56b83257b99e867f27"
    },
    "f8b42a0f09c5435b3943609ec6c76c1299a1f62168e9f9579c630528a8e1cb66": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoPutItem(self, \"PutItem\",\n    item={\n        \"MessageId\": tasks.DynamoAttributeValue.from_string(\"message-id\")\n    },\n    table=my_table,\n    result_path=\"$.Item\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoPutItem(this, \"PutItem\", new DynamoPutItemProps {\n    Item = new Dictionary<string, DynamoAttributeValue> {\n        { \"MessageId\", DynamoAttributeValue.FromString(\"message-id\") }\n    },\n    Table = myTable,\n    ResultPath = \"$.Item\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoPutItem.Builder.create(this, \"PutItem\")\n        .item(Map.of(\n                \"MessageId\", DynamoAttributeValue.fromString(\"message-id\")))\n        .table(myTable)\n        .resultPath(\"$.Item\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoPutItem(this, jsii.String(\"PutItem\"), &dynamoPutItemProps{\n\titem: map[string]dynamoAttributeValue{\n\t\t\"MessageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-id\")),\n\t},\n\ttable: myTable,\n\tresultPath: jsii.String(\"$.Item\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoPutItem(this, 'PutItem', {\n  item: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-id'),\n  },\n  table: myTable,\n  resultPath: `$.Item`,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DynamoPutItemProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoPutItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoPutItemProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoPutItem(this, 'PutItem', {\n  item: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-id'),\n  },\n  table: myTable,\n  resultPath: `$.Item`,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "14": 1,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "ce71da50988d34b8ca7e53c048a837a788ade14501eecb56b83257b99e867f27"
    },
    "d536b542e5706cc8833fc5cb0b01dbce6a769d12965bcf90ebfb9287abb00365": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoUpdateItem(self, \"UpdateItem\",\n    key={\n        \"MessageId\": tasks.DynamoAttributeValue.from_string(\"message-007\")\n    },\n    table=my_table,\n    expression_attribute_values={\n        \":val\": tasks.DynamoAttributeValue.number_from_string(sfn.JsonPath.string_at(\"$.Item.TotalCount.N\")),\n        \":rand\": tasks.DynamoAttributeValue.from_number(20)\n    },\n    update_expression=\"SET TotalCount = :val + :rand\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoUpdateItem(this, \"UpdateItem\", new DynamoUpdateItemProps {\n    Key = new Dictionary<string, DynamoAttributeValue> {\n        { \"MessageId\", DynamoAttributeValue.FromString(\"message-007\") }\n    },\n    Table = myTable,\n    ExpressionAttributeValues = new Dictionary<string, DynamoAttributeValue> {\n        { \":val\", DynamoAttributeValue.NumberFromString(JsonPath.StringAt(\"$.Item.TotalCount.N\")) },\n        { \":rand\", DynamoAttributeValue.FromNumber(20) }\n    },\n    UpdateExpression = \"SET TotalCount = :val + :rand\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoUpdateItem.Builder.create(this, \"UpdateItem\")\n        .key(Map.of(\n                \"MessageId\", DynamoAttributeValue.fromString(\"message-007\")))\n        .table(myTable)\n        .expressionAttributeValues(Map.of(\n                \":val\", DynamoAttributeValue.numberFromString(JsonPath.stringAt(\"$.Item.TotalCount.N\")),\n                \":rand\", DynamoAttributeValue.fromNumber(20)))\n        .updateExpression(\"SET TotalCount = :val + :rand\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoUpdateItem(this, jsii.String(\"UpdateItem\"), &dynamoUpdateItemProps{\n\tkey: map[string]dynamoAttributeValue{\n\t\t\"MessageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-007\")),\n\t},\n\ttable: myTable,\n\texpressionAttributeValues: map[string]*dynamoAttributeValue{\n\t\t\":val\": tasks.*dynamoAttributeValue.numberFromString(sfn.JsonPath.stringAt(jsii.String(\"$.Item.TotalCount.N\"))),\n\t\t\":rand\": tasks.*dynamoAttributeValue.fromNumber(jsii.Number(20)),\n\t},\n\tupdateExpression: jsii.String(\"SET TotalCount = :val + :rand\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoUpdateItem(this, 'UpdateItem', {\n  key: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-007')\n  },\n  table: myTable,\n  expressionAttributeValues: {\n    ':val': tasks.DynamoAttributeValue.numberFromString(sfn.JsonPath.stringAt('$.Item.TotalCount.N')),\n    ':rand': tasks.DynamoAttributeValue.fromNumber(20),\n  },\n  updateExpression: 'SET TotalCount = :val + :rand',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DynamoUpdateItem"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromNumber",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#numberFromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoUpdateItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoUpdateItemProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoUpdateItem(this, 'UpdateItem', {\n  key: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-007')\n  },\n  table: myTable,\n  expressionAttributeValues: {\n    ':val': tasks.DynamoAttributeValue.numberFromString(sfn.JsonPath.stringAt('$.Item.TotalCount.N')),\n    ':rand': tasks.DynamoAttributeValue.fromNumber(20),\n  },\n  updateExpression: 'SET TotalCount = :val + :rand',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 23,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "9d0308661d3b08e6b8c2cec8970db53258657ff77359fa1ddb31a7df8c4dcad2"
    },
    "f90a0b505bf8617903b3d5994586ee1fdd7f33fb572d35a4a70158eb7c61f99e": {
      "translations": {
        "python": {
          "source": "# my_table: dynamodb.Table\n\ntasks.DynamoUpdateItem(self, \"UpdateItem\",\n    key={\n        \"MessageId\": tasks.DynamoAttributeValue.from_string(\"message-007\")\n    },\n    table=my_table,\n    expression_attribute_values={\n        \":val\": tasks.DynamoAttributeValue.number_from_string(sfn.JsonPath.string_at(\"$.Item.TotalCount.N\")),\n        \":rand\": tasks.DynamoAttributeValue.from_number(20)\n    },\n    update_expression=\"SET TotalCount = :val + :rand\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Table myTable;\n\nnew DynamoUpdateItem(this, \"UpdateItem\", new DynamoUpdateItemProps {\n    Key = new Dictionary<string, DynamoAttributeValue> {\n        { \"MessageId\", DynamoAttributeValue.FromString(\"message-007\") }\n    },\n    Table = myTable,\n    ExpressionAttributeValues = new Dictionary<string, DynamoAttributeValue> {\n        { \":val\", DynamoAttributeValue.NumberFromString(JsonPath.StringAt(\"$.Item.TotalCount.N\")) },\n        { \":rand\", DynamoAttributeValue.FromNumber(20) }\n    },\n    UpdateExpression = \"SET TotalCount = :val + :rand\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Table myTable;\n\nDynamoUpdateItem.Builder.create(this, \"UpdateItem\")\n        .key(Map.of(\n                \"MessageId\", DynamoAttributeValue.fromString(\"message-007\")))\n        .table(myTable)\n        .expressionAttributeValues(Map.of(\n                \":val\", DynamoAttributeValue.numberFromString(JsonPath.stringAt(\"$.Item.TotalCount.N\")),\n                \":rand\", DynamoAttributeValue.fromNumber(20)))\n        .updateExpression(\"SET TotalCount = :val + :rand\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var myTable table\ntasks.NewDynamoUpdateItem(this, jsii.String(\"UpdateItem\"), &dynamoUpdateItemProps{\n\tkey: map[string]dynamoAttributeValue{\n\t\t\"MessageId\": tasks.*dynamoAttributeValue.fromString(jsii.String(\"message-007\")),\n\t},\n\ttable: myTable,\n\texpressionAttributeValues: map[string]*dynamoAttributeValue{\n\t\t\":val\": tasks.*dynamoAttributeValue.numberFromString(sfn.JsonPath.stringAt(jsii.String(\"$.Item.TotalCount.N\"))),\n\t\t\":rand\": tasks.*dynamoAttributeValue.fromNumber(jsii.Number(20)),\n\t},\n\tupdateExpression: jsii.String(\"SET TotalCount = :val + :rand\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const myTable: dynamodb.Table;\nnew tasks.DynamoUpdateItem(this, 'UpdateItem', {\n  key: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-007')\n  },\n  table: myTable,\n  expressionAttributeValues: {\n    ':val': tasks.DynamoAttributeValue.numberFromString(sfn.JsonPath.stringAt('$.Item.TotalCount.N')),\n    ':rand': tasks.DynamoAttributeValue.fromNumber(20),\n  },\n  updateExpression: 'SET TotalCount = :val + :rand',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.DynamoUpdateItemProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromNumber",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#fromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoAttributeValue#numberFromString",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoUpdateItem",
        "@aws-cdk/aws-stepfunctions-tasks.DynamoUpdateItemProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myTable: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.DynamoUpdateItem(this, 'UpdateItem', {\n  key: {\n    MessageId: tasks.DynamoAttributeValue.fromString('message-007')\n  },\n  table: myTable,\n  expressionAttributeValues: {\n    ':val': tasks.DynamoAttributeValue.numberFromString(sfn.JsonPath.stringAt('$.Item.TotalCount.N')),\n    ':rand': tasks.DynamoAttributeValue.fromNumber(20),\n  },\n  updateExpression: 'SET TotalCount = :val + :rand',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 23,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "9d0308661d3b08e6b8c2cec8970db53258657ff77359fa1ddb31a7df8c4dcad2"
    },
    "92ac33675d6bb11aac465c146854e726cfb9f0b35b4ff2819487a363246aa9a8": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Ec2Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroup\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tcompatibility: ecs.compatibility_EC2,\n})\n\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"Run\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tlaunchTarget: tasks.NewEcsEc2LaunchTarget(&ecsEc2LaunchTargetOptions{\n\t\tplacementStrategies: []placementStrategy{\n\t\t\tecs.*placementStrategy.spreadAcrossInstances(),\n\t\t\tecs.*placementStrategy.packedByCpu(),\n\t\t\tecs.*placementStrategy.randomly(),\n\t\t},\n\t\tplacementConstraints: []placementConstraint{\n\t\t\tecs.*placementConstraint.memberOf(jsii.String(\"blieptuut\")),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "79e557664810ecac0873a4b9bdba7361ed74e1840b9c62f67da7bdb0a0f455a1"
    },
    "5d12eba1a272b295016f72443824d992b527bacb17638ffd3472a54ae76b90a7": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Ec2Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroup\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tcompatibility: ecs.compatibility_EC2,\n})\n\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"Run\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tlaunchTarget: tasks.NewEcsEc2LaunchTarget(&ecsEc2LaunchTargetOptions{\n\t\tplacementStrategies: []placementStrategy{\n\t\t\tecs.*placementStrategy.spreadAcrossInstances(),\n\t\t\tecs.*placementStrategy.packedByCpu(),\n\t\t\tecs.*placementStrategy.randomly(),\n\t\t},\n\t\tplacementConstraints: []placementConstraint{\n\t\t\tecs.*placementConstraint.memberOf(jsii.String(\"blieptuut\")),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "79e557664810ecac0873a4b9bdba7361ed74e1840b9c62f67da7bdb0a0f455a1"
    },
    "8ef03d4e0e2fc5695d8e801b359b77d2ccf13bf8e3c0b680573c8be5c5afa8b9": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"FargateCluster\", vpc=vpc)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    memory_mi_b=\"512\",\n    cpu=\"256\",\n    compatibility=ecs.Compatibility.FARGATE\n)\n\ncontainer_definition = task_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"RunFargate\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    assign_public_ip=True,\n    container_overrides=[tasks.ContainerOverride(\n        container_definition=container_definition,\n        environment=[tasks.TaskEnvironmentVariable(name=\"SOME_KEY\", value=sfn.JsonPath.string_at(\"$.SomeKey\"))]\n    )],\n    launch_target=tasks.EcsFargateLaunchTarget()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"FargateCluster\", new ClusterProps { Vpc = vpc });\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    MemoryMiB = \"512\",\n    Cpu = \"256\",\n    Compatibility = Compatibility.FARGATE\n});\n\nContainerDefinition containerDefinition = taskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"RunFargate\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    AssignPublicIp = true,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n        Environment = new [] { new TaskEnvironmentVariable { Name = \"SOME_KEY\", Value = JsonPath.StringAt(\"$.SomeKey\") } }\n    } },\n    LaunchTarget = new EcsFargateLaunchTarget()\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"FargateCluster\").vpc(vpc).build();\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .memoryMiB(\"512\")\n        .cpu(\"256\")\n        .compatibility(Compatibility.FARGATE)\n        .build();\n\nContainerDefinition containerDefinition = taskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"RunFargate\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .assignPublicIp(true)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n                .environment(List.of(TaskEnvironmentVariable.builder().name(\"SOME_KEY\").value(JsonPath.stringAt(\"$.SomeKey\")).build()))\n                .build()))\n        .launchTarget(new EcsFargateLaunchTarget())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"FargateCluster\"), &clusterProps{\n\tvpc: vpc,\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tmemoryMiB: jsii.String(\"512\"),\n\tcpu: jsii.String(\"256\"),\n\tcompatibility: ecs.compatibility_FARGATE,\n})\n\ncontainerDefinition := taskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"RunFargate\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tassignPublicIp: jsii.Boolean(true),\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerDefinition: containerDefinition,\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"SOME_KEY\"),\n\t\t\t\t\tvalue: sfn.jsonPath.stringAt(jsii.String(\"$.SomeKey\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tlaunchTarget: tasks.NewEcsFargateLaunchTarget(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EcsFargateLaunchTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#FARGATE",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsFargateLaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 47,
        "104": 4,
        "106": 2,
        "192": 2,
        "193": 7,
        "194": 15,
        "196": 4,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 13,
        "282": 4
      },
      "fqnsFingerprint": "411156771f92843f189d78630c2f6655bd6b54f0bcc9e40e2d1b3168c0fc5424"
    },
    "84c1482b7c4a8d7df30b7746bf0634bfe28893ee7292539cb91e726ae9bb7498": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\necs_fargate_launch_target_options = stepfunctions_tasks.EcsFargateLaunchTargetOptions(\n    platform_version=ecs.FargatePlatformVersion.LATEST\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nEcsFargateLaunchTargetOptions ecsFargateLaunchTargetOptions = new EcsFargateLaunchTargetOptions {\n    PlatformVersion = FargatePlatformVersion.LATEST\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nEcsFargateLaunchTargetOptions ecsFargateLaunchTargetOptions = EcsFargateLaunchTargetOptions.builder()\n        .platformVersion(FargatePlatformVersion.LATEST)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\necsFargateLaunchTargetOptions := &ecsFargateLaunchTargetOptions{\n\tplatformVersion: ecs.fargatePlatformVersion_LATEST,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst ecsFargateLaunchTargetOptions: stepfunctions_tasks.EcsFargateLaunchTargetOptions = {\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EcsFargateLaunchTargetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#LATEST",
        "@aws-cdk/aws-stepfunctions-tasks.EcsFargateLaunchTargetOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecsFargateLaunchTargetOptions: stepfunctions_tasks.EcsFargateLaunchTargetOptions = {\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4883227201f740457b7b6191b7a6f5b10fa14f5696ee41685ed86bd6ea61375c"
    },
    "bc407718f82912a1a84d527f7b3c1a7f681227dd5b59da5e4e2f5f8b02d2337d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# parameters: Any\n\necs_launch_target_config = stepfunctions_tasks.EcsLaunchTargetConfig(\n    parameters={\n        \"parameters_key\": parameters\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nvar parameters;\n\nEcsLaunchTargetConfig ecsLaunchTargetConfig = new EcsLaunchTargetConfig {\n    Parameters = new Dictionary<string, object> {\n        { \"parametersKey\", parameters }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nObject parameters;\n\nEcsLaunchTargetConfig ecsLaunchTargetConfig = EcsLaunchTargetConfig.builder()\n        .parameters(Map.of(\n                \"parametersKey\", parameters))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar parameters interface{}\necsLaunchTargetConfig := &ecsLaunchTargetConfig{\n\tparameters: map[string]interface{}{\n\t\t\"parametersKey\": parameters,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const parameters: any;\nconst ecsLaunchTargetConfig: stepfunctions_tasks.EcsLaunchTargetConfig = {\n  parameters: {\n    parametersKey: parameters,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EcsLaunchTargetConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EcsLaunchTargetConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const parameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecsLaunchTargetConfig: stepfunctions_tasks.EcsLaunchTargetConfig = {\n  parameters: {\n    parametersKey: parameters,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f6f8169ef1ed427dbd1509aee2e47bf83b942c84c8e99c68a1fe91e9343b86f6"
    },
    "07b7dadf834e075835dd1a48796104cc39607fb91d76510d50486b0a52a89c03": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Ec2Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroup\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tcompatibility: ecs.compatibility_EC2,\n})\n\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"Run\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tlaunchTarget: tasks.NewEcsEc2LaunchTarget(&ecsEc2LaunchTargetOptions{\n\t\tplacementStrategies: []placementStrategy{\n\t\t\tecs.*placementStrategy.spreadAcrossInstances(),\n\t\t\tecs.*placementStrategy.packedByCpu(),\n\t\t\tecs.*placementStrategy.randomly(),\n\t\t},\n\t\tplacementConstraints: []placementConstraint{\n\t\t\tecs.*placementConstraint.memberOf(jsii.String(\"blieptuut\")),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "79e557664810ecac0873a4b9bdba7361ed74e1840b9c62f67da7bdb0a0f455a1"
    },
    "9b8e37b4619f83ee9d5462d284004b7aeef0ec1c55bfb9e61d9246024efaa8c7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# parameters: Any\n# task_definition: ecs.TaskDefinition\n\necs_run_task_base = stepfunctions_tasks.EcsRunTaskBase(\n    cluster=cluster,\n    task_definition=task_definition,\n\n    # the properties below are optional\n    container_overrides=[stepfunctions_tasks.ContainerOverride(\n        container_definition=container_definition,\n\n        # the properties below are optional\n        command=[\"command\"],\n        cpu=123,\n        environment=[stepfunctions_tasks.TaskEnvironmentVariable(\n            name=\"name\",\n            value=\"value\"\n        )],\n        memory_limit=123,\n        memory_reservation=123\n    )],\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    parameters={\n        \"parameters_key\": parameters\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nvar parameters;\nTaskDefinition taskDefinition;\n\nEcsRunTaskBase ecsRunTaskBase = new EcsRunTaskBase(new EcsRunTaskBaseProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n\n    // the properties below are optional\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Cpu = 123,\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        MemoryLimit = 123,\n        MemoryReservation = 123\n    } },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    Parameters = new Dictionary<string, object> {\n        { \"parametersKey\", parameters }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nObject parameters;\nTaskDefinition taskDefinition;\n\nEcsRunTaskBase ecsRunTaskBase = EcsRunTaskBase.Builder.create()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n\n        // the properties below are optional\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .cpu(123)\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .memoryLimit(123)\n                .memoryReservation(123)\n                .build()))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .parameters(Map.of(\n                \"parametersKey\", parameters))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar cluster cluster\nvar containerDefinition containerDefinition\nvar parameters interface{}\nvar taskDefinition taskDefinition\necsRunTaskBase := stepfunctions_tasks.NewEcsRunTaskBase(&ecsRunTaskBaseProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\n\t// the properties below are optional\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerDefinition: containerDefinition,\n\n\t\t\t// the properties below are optional\n\t\t\tcommand: []*string{\n\t\t\t\tjsii.String(\"command\"),\n\t\t\t},\n\t\t\tcpu: jsii.Number(123),\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmemoryLimit: jsii.Number(123),\n\t\t\tmemoryReservation: jsii.Number(123),\n\t\t},\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tparameters: map[string]interface{}{\n\t\t\"parametersKey\": parameters,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const parameters: any;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst ecsRunTaskBase = new stepfunctions_tasks.EcsRunTaskBase({\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  parameters: {\n    parametersKey: parameters,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskBase"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskBase",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskBaseProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const parameters: any;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecsRunTaskBase = new stepfunctions_tasks.EcsRunTaskBase({\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  parameters: {\n    parametersKey: parameters,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 37,
        "125": 1,
        "130": 4,
        "153": 3,
        "169": 3,
        "192": 3,
        "193": 4,
        "194": 3,
        "197": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "c5398fa2fa16312518ac9f75797ef71ff167f64b2461a99abab9ec64fc777da8"
    },
    "a21f265b8d78fff0d0b86a6a383cf3ba4dc6da4ec9b5916b149346c45c01bbbe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# parameters: Any\n# task_definition: ecs.TaskDefinition\n\necs_run_task_base_props = stepfunctions_tasks.EcsRunTaskBaseProps(\n    cluster=cluster,\n    task_definition=task_definition,\n\n    # the properties below are optional\n    container_overrides=[stepfunctions_tasks.ContainerOverride(\n        container_definition=container_definition,\n\n        # the properties below are optional\n        command=[\"command\"],\n        cpu=123,\n        environment=[stepfunctions_tasks.TaskEnvironmentVariable(\n            name=\"name\",\n            value=\"value\"\n        )],\n        memory_limit=123,\n        memory_reservation=123\n    )],\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    parameters={\n        \"parameters_key\": parameters\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nvar parameters;\nTaskDefinition taskDefinition;\n\nEcsRunTaskBaseProps ecsRunTaskBaseProps = new EcsRunTaskBaseProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n\n    // the properties below are optional\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Cpu = 123,\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        MemoryLimit = 123,\n        MemoryReservation = 123\n    } },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    Parameters = new Dictionary<string, object> {\n        { \"parametersKey\", parameters }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nObject parameters;\nTaskDefinition taskDefinition;\n\nEcsRunTaskBaseProps ecsRunTaskBaseProps = EcsRunTaskBaseProps.builder()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n\n        // the properties below are optional\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .cpu(123)\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .memoryLimit(123)\n                .memoryReservation(123)\n                .build()))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .parameters(Map.of(\n                \"parametersKey\", parameters))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar cluster cluster\nvar containerDefinition containerDefinition\nvar parameters interface{}\nvar taskDefinition taskDefinition\necsRunTaskBaseProps := &ecsRunTaskBaseProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\n\t// the properties below are optional\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerDefinition: containerDefinition,\n\n\t\t\t// the properties below are optional\n\t\t\tcommand: []*string{\n\t\t\t\tjsii.String(\"command\"),\n\t\t\t},\n\t\t\tcpu: jsii.Number(123),\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmemoryLimit: jsii.Number(123),\n\t\t\tmemoryReservation: jsii.Number(123),\n\t\t},\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tparameters: map[string]interface{}{\n\t\t\"parametersKey\": parameters,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const parameters: any;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst ecsRunTaskBaseProps: stepfunctions_tasks.EcsRunTaskBaseProps = {\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  parameters: {\n    parametersKey: parameters,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskBaseProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const parameters: any;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecsRunTaskBaseProps: stepfunctions_tasks.EcsRunTaskBaseProps = {\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  parameters: {\n    parametersKey: parameters,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 37,
        "125": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "192": 3,
        "193": 4,
        "194": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "e4d31d0eb928582ff572d596b7fd7bafb15cf215cc1a82f56a468af22811fabf"
    },
    "9e458f9d69a1d7715ed5a4fc6db9b548f79177c1d8db4cdf01e6c68e0061e8fc": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Ec2Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroup\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tcompatibility: ecs.compatibility_EC2,\n})\n\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"Run\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tlaunchTarget: tasks.NewEcsEc2LaunchTarget(&ecsEc2LaunchTargetOptions{\n\t\tplacementStrategies: []placementStrategy{\n\t\t\tecs.*placementStrategy.spreadAcrossInstances(),\n\t\t\tecs.*placementStrategy.packedByCpu(),\n\t\t\tecs.*placementStrategy.randomly(),\n\t\t},\n\t\tplacementConstraints: []placementConstraint{\n\t\t\tecs.*placementConstraint.memberOf(jsii.String(\"blieptuut\")),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "79e557664810ecac0873a4b9bdba7361ed74e1840b9c62f67da7bdb0a0f455a1"
    },
    "bcde72cc88611c0cce096fba5069bf10966f358ba22f2361a2c5cb18a7f4afd0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_eks as eks\n\n\nmy_eks_cluster = eks.Cluster(self, \"my sample cluster\",\n    version=eks.KubernetesVersion.V1_18,\n    cluster_name=\"myEksCluster\"\n)\n\ntasks.EksCall(self, \"Call a EKS Endpoint\",\n    cluster=my_eks_cluster,\n    http_method=tasks.HttpMethods.GET,\n    http_path=\"/api/v1/namespaces/default/pods\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EKS;\n\n\nCluster myEksCluster = new Cluster(this, \"my sample cluster\", new ClusterProps {\n    Version = KubernetesVersion.V1_18,\n    ClusterName = \"myEksCluster\"\n});\n\nnew EksCall(this, \"Call a EKS Endpoint\", new EksCallProps {\n    Cluster = myEksCluster,\n    HttpMethod = HttpMethods.GET,\n    HttpPath = \"/api/v1/namespaces/default/pods\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.eks.*;\n\n\nCluster myEksCluster = Cluster.Builder.create(this, \"my sample cluster\")\n        .version(KubernetesVersion.V1_18)\n        .clusterName(\"myEksCluster\")\n        .build();\n\nEksCall.Builder.create(this, \"Call a EKS Endpoint\")\n        .cluster(myEksCluster)\n        .httpMethod(HttpMethods.GET)\n        .httpPath(\"/api/v1/namespaces/default/pods\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nmyEksCluster := eks.NewCluster(this, jsii.String(\"my sample cluster\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_18(),\n\tclusterName: jsii.String(\"myEksCluster\"),\n})\n\ntasks.NewEksCall(this, jsii.String(\"Call a EKS Endpoint\"), &eksCallProps{\n\tcluster: myEksCluster,\n\thttpMethod: tasks.httpMethods_GET,\n\thttpPath: jsii.String(\"/api/v1/namespaces/default/pods\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as eks from '@aws-cdk/aws-eks';\n\nconst myEksCluster = new eks.Cluster(this, 'my sample cluster', {\n  version: eks.KubernetesVersion.V1_18,\n  clusterName: 'myEksCluster',\n});\n\nnew tasks.EksCall(this, 'Call a EKS Endpoint', {\n  cluster: myEksCluster,\n  httpMethod: tasks.HttpMethods.GET,\n  httpPath: '/api/v1/namespaces/default/pods',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EksCall"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_18",
        "@aws-cdk/aws-stepfunctions-tasks.EksCall",
        "@aws-cdk/aws-stepfunctions-tasks.EksCallProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethods",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethods#GET",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myEksCluster = new eks.Cluster(this, 'my sample cluster', {\n  version: eks.KubernetesVersion.V1_18,\n  clusterName: 'myEksCluster',\n});\n\nnew tasks.EksCall(this, 'Call a EKS Endpoint', {\n  cluster: myEksCluster,\n  httpMethod: tasks.HttpMethods.GET,\n  httpPath: '/api/v1/namespaces/default/pods',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 2,
        "193": 2,
        "194": 6,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2045a691be88a167462fca387dd6f1b77faf19bca3e58702fa3a7aa576860826"
    },
    "1e492efd7ea56b688d5dcd44e1a4446ec6711bfff4aa05896dcc0a81f424824b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_eks as eks\n\n\nmy_eks_cluster = eks.Cluster(self, \"my sample cluster\",\n    version=eks.KubernetesVersion.V1_18,\n    cluster_name=\"myEksCluster\"\n)\n\ntasks.EksCall(self, \"Call a EKS Endpoint\",\n    cluster=my_eks_cluster,\n    http_method=tasks.HttpMethods.GET,\n    http_path=\"/api/v1/namespaces/default/pods\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EKS;\n\n\nCluster myEksCluster = new Cluster(this, \"my sample cluster\", new ClusterProps {\n    Version = KubernetesVersion.V1_18,\n    ClusterName = \"myEksCluster\"\n});\n\nnew EksCall(this, \"Call a EKS Endpoint\", new EksCallProps {\n    Cluster = myEksCluster,\n    HttpMethod = HttpMethods.GET,\n    HttpPath = \"/api/v1/namespaces/default/pods\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.eks.*;\n\n\nCluster myEksCluster = Cluster.Builder.create(this, \"my sample cluster\")\n        .version(KubernetesVersion.V1_18)\n        .clusterName(\"myEksCluster\")\n        .build();\n\nEksCall.Builder.create(this, \"Call a EKS Endpoint\")\n        .cluster(myEksCluster)\n        .httpMethod(HttpMethods.GET)\n        .httpPath(\"/api/v1/namespaces/default/pods\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nmyEksCluster := eks.NewCluster(this, jsii.String(\"my sample cluster\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_18(),\n\tclusterName: jsii.String(\"myEksCluster\"),\n})\n\ntasks.NewEksCall(this, jsii.String(\"Call a EKS Endpoint\"), &eksCallProps{\n\tcluster: myEksCluster,\n\thttpMethod: tasks.httpMethods_GET,\n\thttpPath: jsii.String(\"/api/v1/namespaces/default/pods\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as eks from '@aws-cdk/aws-eks';\n\nconst myEksCluster = new eks.Cluster(this, 'my sample cluster', {\n  version: eks.KubernetesVersion.V1_18,\n  clusterName: 'myEksCluster',\n});\n\nnew tasks.EksCall(this, 'Call a EKS Endpoint', {\n  cluster: myEksCluster,\n  httpMethod: tasks.HttpMethods.GET,\n  httpPath: '/api/v1/namespaces/default/pods',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EksCallProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_18",
        "@aws-cdk/aws-stepfunctions-tasks.EksCall",
        "@aws-cdk/aws-stepfunctions-tasks.EksCallProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethods",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethods#GET",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myEksCluster = new eks.Cluster(this, 'my sample cluster', {\n  version: eks.KubernetesVersion.V1_18,\n  clusterName: 'myEksCluster',\n});\n\nnew tasks.EksCall(this, 'Call a EKS Endpoint', {\n  cluster: myEksCluster,\n  httpMethod: tasks.HttpMethods.GET,\n  httpPath: '/api/v1/namespaces/default/pods',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 2,
        "193": 2,
        "194": 6,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2045a691be88a167462fca387dd6f1b77faf19bca3e58702fa3a7aa576860826"
    },
    "de78b41b5c69203dd60c1a0e2211db39f0ce8198ae440db70b4e55b492b3d753": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersCreateVirtualCluster(self, \"Create a Virtual Cluster\",\n    eks_cluster=tasks.EksClusterInput.from_task_input(sfn.TaskInput.from_text(\"clusterId\")),\n    eks_namespace=\"specified-namespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersCreateVirtualCluster(this, \"Create a Virtual Cluster\", new EmrContainersCreateVirtualClusterProps {\n    EksCluster = EksClusterInput.FromTaskInput(TaskInput.FromText(\"clusterId\")),\n    EksNamespace = \"specified-namespace\"\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersCreateVirtualCluster.Builder.create(this, \"Create a Virtual Cluster\")\n        .eksCluster(EksClusterInput.fromTaskInput(TaskInput.fromText(\"clusterId\")))\n        .eksNamespace(\"specified-namespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersCreateVirtualCluster(this, jsii.String(\"Create a Virtual Cluster\"), &emrContainersCreateVirtualClusterProps{\n\teksCluster: tasks.eksClusterInput.fromTaskInput(sfn.taskInput.fromText(jsii.String(\"clusterId\"))),\n\teksNamespace: jsii.String(\"specified-namespace\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromTaskInput(sfn.TaskInput.fromText('clusterId')),\n  eksNamespace: 'specified-namespace',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput#fromTaskInput",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromTaskInput(sfn.TaskInput.fromText('clusterId')),\n  eksNamespace: 'specified-namespace',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "b80c4d32a746368cac6968e7f924f895b263582c8c8282f0e73bcc5c73b55a0a"
    },
    "8af5c47cbf06fdad9ef4887412cf5eb4624b697fd941865077cc4882b0dd7a0a": {
      "translations": {
        "python": {
          "source": "tasks.EmrAddStep(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    name=\"StepName\",\n    jar=\"Jar\",\n    action_on_failure=tasks.ActionOnFailure.CONTINUE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrAddStep(this, \"Task\", new EmrAddStepProps {\n    ClusterId = \"ClusterId\",\n    Name = \"StepName\",\n    Jar = \"Jar\",\n    ActionOnFailure = ActionOnFailure.CONTINUE\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrAddStep.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .name(\"StepName\")\n        .jar(\"Jar\")\n        .actionOnFailure(ActionOnFailure.CONTINUE)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrAddStep(this, jsii.String(\"Task\"), &emrAddStepProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tname: jsii.String(\"StepName\"),\n\tjar: jsii.String(\"Jar\"),\n\tactionOnFailure: tasks.actionOnFailure_CONTINUE,\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrAddStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  name: 'StepName',\n  jar: 'Jar',\n  actionOnFailure: tasks.ActionOnFailure.CONTINUE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrAddStep"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ActionOnFailure",
        "@aws-cdk/aws-stepfunctions-tasks.ActionOnFailure#CONTINUE",
        "@aws-cdk/aws-stepfunctions-tasks.EmrAddStep",
        "@aws-cdk/aws-stepfunctions-tasks.EmrAddStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrAddStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  name: 'StepName',\n  jar: 'Jar',\n  actionOnFailure: tasks.ActionOnFailure.CONTINUE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "5d569175d3effd76c258793f5de01eb19668a01dfeb7b7cdfade748229b3fb90"
    },
    "a7fa238f86276eca07fba3aa0477a2b9c56243150122c21ce33a1b484560e5be": {
      "translations": {
        "python": {
          "source": "tasks.EmrAddStep(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    name=\"StepName\",\n    jar=\"Jar\",\n    action_on_failure=tasks.ActionOnFailure.CONTINUE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrAddStep(this, \"Task\", new EmrAddStepProps {\n    ClusterId = \"ClusterId\",\n    Name = \"StepName\",\n    Jar = \"Jar\",\n    ActionOnFailure = ActionOnFailure.CONTINUE\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrAddStep.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .name(\"StepName\")\n        .jar(\"Jar\")\n        .actionOnFailure(ActionOnFailure.CONTINUE)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrAddStep(this, jsii.String(\"Task\"), &emrAddStepProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tname: jsii.String(\"StepName\"),\n\tjar: jsii.String(\"Jar\"),\n\tactionOnFailure: tasks.actionOnFailure_CONTINUE,\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrAddStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  name: 'StepName',\n  jar: 'Jar',\n  actionOnFailure: tasks.ActionOnFailure.CONTINUE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrAddStepProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ActionOnFailure",
        "@aws-cdk/aws-stepfunctions-tasks.ActionOnFailure#CONTINUE",
        "@aws-cdk/aws-stepfunctions-tasks.EmrAddStep",
        "@aws-cdk/aws-stepfunctions-tasks.EmrAddStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrAddStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  name: 'StepName',\n  jar: 'Jar',\n  actionOnFailure: tasks.ActionOnFailure.CONTINUE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "5d569175d3effd76c258793f5de01eb19668a01dfeb7b7cdfade748229b3fb90"
    },
    "a5f1cf8a561c3e80a629953223813d110f8c6fa3ce6df4b77a58c1862006e298": {
      "translations": {
        "python": {
          "source": "tasks.EmrCancelStep(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    step_id=\"StepId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrCancelStep(this, \"Task\", new EmrCancelStepProps {\n    ClusterId = \"ClusterId\",\n    StepId = \"StepId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrCancelStep.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .stepId(\"StepId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrCancelStep(this, jsii.String(\"Task\"), &emrCancelStepProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tstepId: jsii.String(\"StepId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrCancelStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  stepId: 'StepId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCancelStep"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCancelStep",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCancelStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrCancelStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  stepId: 'StepId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "2e34968d5811c29e242057f7024998f84a487f4ba6fa6c13ea38f007ae2a9b51"
    },
    "db360d883fb6365e81fefdf2c089787a18c1da23ff2422644aa6161aaf1da18b": {
      "translations": {
        "python": {
          "source": "tasks.EmrCancelStep(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    step_id=\"StepId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrCancelStep(this, \"Task\", new EmrCancelStepProps {\n    ClusterId = \"ClusterId\",\n    StepId = \"StepId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrCancelStep.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .stepId(\"StepId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrCancelStep(this, jsii.String(\"Task\"), &emrCancelStepProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tstepId: jsii.String(\"StepId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrCancelStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  stepId: 'StepId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCancelStepProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCancelStep",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCancelStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrCancelStep(this, 'Task', {\n  clusterId: 'ClusterId',\n  stepId: 'StepId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "2e34968d5811c29e242057f7024998f84a487f4ba6fa6c13ea38f007ae2a9b51"
    },
    "a247265ab530f214aaa7a6d54e85b63088bbfffa7d80b50629ccceb0a1c4d696": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersCreateVirtualCluster(self, \"Create a Virtual Cluster\",\n    eks_cluster=tasks.EksClusterInput.from_task_input(sfn.TaskInput.from_text(\"clusterId\")),\n    eks_namespace=\"specified-namespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersCreateVirtualCluster(this, \"Create a Virtual Cluster\", new EmrContainersCreateVirtualClusterProps {\n    EksCluster = EksClusterInput.FromTaskInput(TaskInput.FromText(\"clusterId\")),\n    EksNamespace = \"specified-namespace\"\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersCreateVirtualCluster.Builder.create(this, \"Create a Virtual Cluster\")\n        .eksCluster(EksClusterInput.fromTaskInput(TaskInput.fromText(\"clusterId\")))\n        .eksNamespace(\"specified-namespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersCreateVirtualCluster(this, jsii.String(\"Create a Virtual Cluster\"), &emrContainersCreateVirtualClusterProps{\n\teksCluster: tasks.eksClusterInput.fromTaskInput(sfn.taskInput.fromText(jsii.String(\"clusterId\"))),\n\teksNamespace: jsii.String(\"specified-namespace\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromTaskInput(sfn.TaskInput.fromText('clusterId')),\n  eksNamespace: 'specified-namespace',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput#fromTaskInput",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromTaskInput(sfn.TaskInput.fromText('clusterId')),\n  eksNamespace: 'specified-namespace',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "b80c4d32a746368cac6968e7f924f895b263582c8c8282f0e73bcc5c73b55a0a"
    },
    "024bb9e6dc0fca2ffff36a75dfcf7803d6b271c2855bfb3717a1080046b40036": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersCreateVirtualCluster(self, \"Create a Virtual Cluster\",\n    eks_cluster=tasks.EksClusterInput.from_task_input(sfn.TaskInput.from_text(\"clusterId\")),\n    eks_namespace=\"specified-namespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersCreateVirtualCluster(this, \"Create a Virtual Cluster\", new EmrContainersCreateVirtualClusterProps {\n    EksCluster = EksClusterInput.FromTaskInput(TaskInput.FromText(\"clusterId\")),\n    EksNamespace = \"specified-namespace\"\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersCreateVirtualCluster.Builder.create(this, \"Create a Virtual Cluster\")\n        .eksCluster(EksClusterInput.fromTaskInput(TaskInput.fromText(\"clusterId\")))\n        .eksNamespace(\"specified-namespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersCreateVirtualCluster(this, jsii.String(\"Create a Virtual Cluster\"), &emrContainersCreateVirtualClusterProps{\n\teksCluster: tasks.eksClusterInput.fromTaskInput(sfn.taskInput.fromText(jsii.String(\"clusterId\"))),\n\teksNamespace: jsii.String(\"specified-namespace\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromTaskInput(sfn.TaskInput.fromText('clusterId')),\n  eksNamespace: 'specified-namespace',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.EksClusterInput#fromTaskInput",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersCreateVirtualClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersCreateVirtualCluster(this, 'Create a Virtual Cluster', {\n  eksCluster: tasks.EksClusterInput.fromTaskInput(sfn.TaskInput.fromText('clusterId')),\n  eksNamespace: 'specified-namespace',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "b80c4d32a746368cac6968e7f924f895b263582c8c8282f0e73bcc5c73b55a0a"
    },
    "f2960da6aafd21d578efdc8c54c49c0e8bef589f253224432a0d02f1b740a392": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersDeleteVirtualCluster(self, \"Delete a Virtual Cluster\",\n    virtual_cluster_id=sfn.TaskInput.from_json_path_at(\"$.virtualCluster\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersDeleteVirtualCluster(this, \"Delete a Virtual Cluster\", new EmrContainersDeleteVirtualClusterProps {\n    VirtualClusterId = TaskInput.FromJsonPathAt(\"$.virtualCluster\")\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersDeleteVirtualCluster.Builder.create(this, \"Delete a Virtual Cluster\")\n        .virtualClusterId(TaskInput.fromJsonPathAt(\"$.virtualCluster\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersDeleteVirtualCluster(this, jsii.String(\"Delete a Virtual Cluster\"), &emrContainersDeleteVirtualClusterProps{\n\tvirtualClusterId: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.virtualCluster\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersDeleteVirtualCluster(this, 'Delete a Virtual Cluster', {\n  virtualClusterId: sfn.TaskInput.fromJsonPathAt('$.virtualCluster'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrContainersDeleteVirtualCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersDeleteVirtualCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersDeleteVirtualClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersDeleteVirtualCluster(this, 'Delete a Virtual Cluster', {\n  virtualClusterId: sfn.TaskInput.fromJsonPathAt('$.virtualCluster'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "a6077da2ec208e5ff726ced8e114cb0e03657d3df9e82225096599be81a49a66"
    },
    "ed8981890eee7fa30dbda746808b88b70f6a3ef548d6495d4f97993f8a013e52": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersDeleteVirtualCluster(self, \"Delete a Virtual Cluster\",\n    virtual_cluster_id=sfn.TaskInput.from_json_path_at(\"$.virtualCluster\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersDeleteVirtualCluster(this, \"Delete a Virtual Cluster\", new EmrContainersDeleteVirtualClusterProps {\n    VirtualClusterId = TaskInput.FromJsonPathAt(\"$.virtualCluster\")\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersDeleteVirtualCluster.Builder.create(this, \"Delete a Virtual Cluster\")\n        .virtualClusterId(TaskInput.fromJsonPathAt(\"$.virtualCluster\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersDeleteVirtualCluster(this, jsii.String(\"Delete a Virtual Cluster\"), &emrContainersDeleteVirtualClusterProps{\n\tvirtualClusterId: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.virtualCluster\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersDeleteVirtualCluster(this, 'Delete a Virtual Cluster', {\n  virtualClusterId: sfn.TaskInput.fromJsonPathAt('$.virtualCluster'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrContainersDeleteVirtualClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersDeleteVirtualCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersDeleteVirtualClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersDeleteVirtualCluster(this, 'Delete a Virtual Cluster', {\n  virtualClusterId: sfn.TaskInput.fromJsonPathAt('$.virtualCluster'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "a6077da2ec208e5ff726ced8e114cb0e03657d3df9e82225096599be81a49a66"
    },
    "40120096fe209c542d720a4c1ca4c25701dfc6a81c23275f9740f152037c3c38": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_name=\"EMR-Containers-Job\",\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        )\n    ),\n    application_config=[tasks.ApplicationConfiguration(\n        classification=tasks.Classification.SPARK_DEFAULTS,\n        properties={\n            \"spark.executor.instances\": \"1\",\n            \"spark.executor.memory\": \"512M\"\n        }\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobName = \"EMR-Containers-Job\",\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        }\n    },\n    ApplicationConfig = new [] { new ApplicationConfiguration {\n        Classification = Classification.SPARK_DEFAULTS,\n        Properties = new Dictionary<string, string> {\n            { \"spark.executor.instances\", \"1\" },\n            { \"spark.executor.memory\", \"512M\" }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobName(\"EMR-Containers-Job\")\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .build())\n                .build())\n        .applicationConfig(List.of(ApplicationConfiguration.builder()\n                .classification(Classification.SPARK_DEFAULTS)\n                .properties(Map.of(\n                        \"spark.executor.instances\", \"1\",\n                        \"spark.executor.memory\", \"512M\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobName: jsii.String(\"EMR-Containers-Job\"),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t},\n\t},\n\tapplicationConfig: []applicationConfiguration{\n\t\t&applicationConfiguration{\n\t\t\tclassification: tasks.classification_SPARK_DEFAULTS(),\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"spark.executor.instances\": jsii.String(\"1\"),\n\t\t\t\t\"spark.executor.memory\": jsii.String(\"512M\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.Classification",
        "@aws-cdk/aws-stepfunctions-tasks.Classification#SPARK_DEFAULTS",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 23,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 11
      },
      "fqnsFingerprint": "f326c63003a23b7bc92021d0409fcc199f142e6192e2f115710fd3ed22301c96"
    },
    "d21db856706cc09fffaca3d8e1664eb7aec72271dc97f15f04caeb1eaa5e5425": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_name=\"EMR-Containers-Job\",\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        )\n    ),\n    application_config=[tasks.ApplicationConfiguration(\n        classification=tasks.Classification.SPARK_DEFAULTS,\n        properties={\n            \"spark.executor.instances\": \"1\",\n            \"spark.executor.memory\": \"512M\"\n        }\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobName = \"EMR-Containers-Job\",\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        }\n    },\n    ApplicationConfig = new [] { new ApplicationConfiguration {\n        Classification = Classification.SPARK_DEFAULTS,\n        Properties = new Dictionary<string, string> {\n            { \"spark.executor.instances\", \"1\" },\n            { \"spark.executor.memory\", \"512M\" }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobName(\"EMR-Containers-Job\")\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .build())\n                .build())\n        .applicationConfig(List.of(ApplicationConfiguration.builder()\n                .classification(Classification.SPARK_DEFAULTS)\n                .properties(Map.of(\n                        \"spark.executor.instances\", \"1\",\n                        \"spark.executor.memory\", \"512M\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobName: jsii.String(\"EMR-Containers-Job\"),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t},\n\t},\n\tapplicationConfig: []applicationConfiguration{\n\t\t&applicationConfiguration{\n\t\t\tclassification: tasks.classification_SPARK_DEFAULTS(),\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"spark.executor.instances\": jsii.String(\"1\"),\n\t\t\t\t\"spark.executor.memory\": jsii.String(\"512M\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.Classification",
        "@aws-cdk/aws-stepfunctions-tasks.Classification#SPARK_DEFAULTS",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 23,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 11
      },
      "fqnsFingerprint": "f326c63003a23b7bc92021d0409fcc199f142e6192e2f115710fd3ed22301c96"
    },
    "5a1a2d09c897af3580228b842f015a55850ad803e7167f583a7c7b3e8aa2327d": {
      "translations": {
        "python": {
          "source": "cluster_role = iam.Role(self, \"ClusterRole\",\n    assumed_by=iam.ServicePrincipal(\"ec2.amazonaws.com\")\n)\n\nservice_role = iam.Role(self, \"ServiceRole\",\n    assumed_by=iam.ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n)\n\nauto_scaling_role = iam.Role(self, \"AutoScalingRole\",\n    assumed_by=iam.ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n)\n\nauto_scaling_role.assume_role_policy.add_statements(\n    iam.PolicyStatement(\n        effect=iam.Effect.ALLOW,\n        principals=[\n            iam.ServicePrincipal(\"application-autoscaling.amazonaws.com\")\n        ],\n        actions=[\"sts:AssumeRole\"\n        ]\n    ))\n\ntasks.EmrCreateCluster(self, \"Create Cluster\",\n    instances=tasks.EmrCreateCluster.InstancesConfigProperty(),\n    cluster_role=cluster_role,\n    name=sfn.TaskInput.from_json_path_at(\"$.ClusterName\").value,\n    service_role=service_role,\n    auto_scaling_role=auto_scaling_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Role clusterRole = new Role(this, \"ClusterRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"ec2.amazonaws.com\")\n});\n\nRole serviceRole = new Role(this, \"ServiceRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n});\n\nRole autoScalingRole = new Role(this, \"AutoScalingRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n});\n\nautoScalingRole.AssumeRolePolicy.AddStatements(\nnew PolicyStatement(new PolicyStatementProps {\n    Effect = Effect.ALLOW,\n    Principals = new [] {\n        new ServicePrincipal(\"application-autoscaling.amazonaws.com\") },\n    Actions = new [] { \"sts:AssumeRole\" }\n}));\n\nnew EmrCreateCluster(this, \"Create Cluster\", new EmrCreateClusterProps {\n    Instances = new InstancesConfigProperty { },\n    ClusterRole = clusterRole,\n    Name = TaskInput.FromJsonPathAt(\"$.ClusterName\").Value,\n    ServiceRole = serviceRole,\n    AutoScalingRole = autoScalingRole\n});",
          "version": "1"
        },
        "java": {
          "source": "Role clusterRole = Role.Builder.create(this, \"ClusterRole\")\n        .assumedBy(new ServicePrincipal(\"ec2.amazonaws.com\"))\n        .build();\n\nRole serviceRole = Role.Builder.create(this, \"ServiceRole\")\n        .assumedBy(new ServicePrincipal(\"elasticmapreduce.amazonaws.com\"))\n        .build();\n\nRole autoScalingRole = Role.Builder.create(this, \"AutoScalingRole\")\n        .assumedBy(new ServicePrincipal(\"elasticmapreduce.amazonaws.com\"))\n        .build();\n\nautoScalingRole.assumeRolePolicy.addStatements(\nPolicyStatement.Builder.create()\n        .effect(Effect.ALLOW)\n        .principals(List.of(\n            new ServicePrincipal(\"application-autoscaling.amazonaws.com\")))\n        .actions(List.of(\"sts:AssumeRole\"))\n        .build());\n\nEmrCreateCluster.Builder.create(this, \"Create Cluster\")\n        .instances(InstancesConfigProperty.builder().build())\n        .clusterRole(clusterRole)\n        .name(TaskInput.fromJsonPathAt(\"$.ClusterName\").getValue())\n        .serviceRole(serviceRole)\n        .autoScalingRole(autoScalingRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "clusterRole := iam.NewRole(this, jsii.String(\"ClusterRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"ec2.amazonaws.com\")),\n})\n\nserviceRole := iam.NewRole(this, jsii.String(\"ServiceRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"elasticmapreduce.amazonaws.com\")),\n})\n\nautoScalingRole := iam.NewRole(this, jsii.String(\"AutoScalingRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"elasticmapreduce.amazonaws.com\")),\n})\n\nautoScalingRole.assumeRolePolicy.addStatements(\niam.NewPolicyStatement(&policyStatementProps{\n\teffect: iam.effect_ALLOW,\n\tprincipals: []iPrincipal{\n\t\tiam.NewServicePrincipal(jsii.String(\"application-autoscaling.amazonaws.com\")),\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"sts:AssumeRole\"),\n\t},\n}))\n\ntasks.NewEmrCreateCluster(this, jsii.String(\"Create Cluster\"), &emrCreateClusterProps{\n\tinstances: &instancesConfigProperty{\n\t},\n\tclusterRole: clusterRole,\n\tname: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.ClusterName\")).value,\n\tserviceRole: serviceRole,\n\tautoScalingRole: autoScalingRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const clusterRole = new iam.Role(this, 'ClusterRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\n});\n\nconst serviceRole = new iam.Role(this, 'ServiceRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nconst autoScalingRole = new iam.Role(this, 'AutoScalingRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nautoScalingRole.assumeRolePolicy?.addStatements(\n  new iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    principals: [\n      new iam.ServicePrincipal('application-autoscaling.amazonaws.com'),\n    ],\n    actions: [\n      'sts:AssumeRole',\n    ],\n  }));\n)\n\nnew tasks.EmrCreateCluster(this, 'Create Cluster', {\n  instances: {},\n  clusterRole,\n  name: sfn.TaskInput.fromJsonPathAt('$.ClusterName').value,\n  serviceRole,\n  autoScalingRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.PolicyDocument#addStatements",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#assumeRolePolicy",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstancesConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst clusterRole = new iam.Role(this, 'ClusterRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\n});\n\nconst serviceRole = new iam.Role(this, 'ServiceRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nconst autoScalingRole = new iam.Role(this, 'AutoScalingRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nautoScalingRole.assumeRolePolicy?.addStatements(\n  new iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    principals: [\n      new iam.ServicePrincipal('application-autoscaling.amazonaws.com'),\n    ],\n    actions: [\n      'sts:AssumeRole',\n    ],\n  }));\n\nnew tasks.EmrCreateCluster(this, 'Create Cluster', {\n  instances: {},\n  clusterRole,\n  name: sfn.TaskInput.fromJsonPathAt('$.ClusterName').value,\n  serviceRole,\n  autoScalingRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "28": 1,
        "75": 42,
        "104": 4,
        "192": 2,
        "193": 6,
        "194": 16,
        "196": 2,
        "197": 9,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 3
      },
      "fqnsFingerprint": "81c9e7f7be3c08a57177a6554e427664735d28805b9d00b3c6c8eb88af4f7362"
    },
    "e422798f58b6195b29289a9c6fc871410214db928c0b0cebc42abe777e1fcc51": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\napplication_config_property = stepfunctions_tasks.EmrCreateCluster.ApplicationConfigProperty(\n    name=\"name\",\n\n    # the properties below are optional\n    additional_info={\n        \"additional_info_key\": \"additionalInfo\"\n    },\n    args=[\"args\"],\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nApplicationConfigProperty applicationConfigProperty = new ApplicationConfigProperty {\n    Name = \"name\",\n\n    // the properties below are optional\n    AdditionalInfo = new Dictionary<string, string> {\n        { \"additionalInfoKey\", \"additionalInfo\" }\n    },\n    Args = new [] { \"args\" },\n    Version = \"version\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nApplicationConfigProperty applicationConfigProperty = ApplicationConfigProperty.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .additionalInfo(Map.of(\n                \"additionalInfoKey\", \"additionalInfo\"))\n        .args(List.of(\"args\"))\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\napplicationConfigProperty := &applicationConfigProperty{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tadditionalInfo: map[string]*string{\n\t\t\"additionalInfoKey\": jsii.String(\"additionalInfo\"),\n\t},\n\targs: []*string{\n\t\tjsii.String(\"args\"),\n\t},\n\tversion: jsii.String(\"version\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst applicationConfigProperty: stepfunctions_tasks.EmrCreateCluster.ApplicationConfigProperty = {\n  name: 'name',\n\n  // the properties below are optional\n  additionalInfo: {\n    additionalInfoKey: 'additionalInfo',\n  },\n  args: ['args'],\n  version: 'version',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ApplicationConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ApplicationConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst applicationConfigProperty: stepfunctions_tasks.EmrCreateCluster.ApplicationConfigProperty = {\n  name: 'name',\n\n  // the properties below are optional\n  additionalInfo: {\n    additionalInfoKey: 'additionalInfo',\n  },\n  args: ['args'],\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "73ceb6cc4be6d840f7912a59deff068a5fdc599a93d6fef291c3e9c0c8f63bf3"
    },
    "a1207485cb1c23ac0f51d26b10e5854cd57b45d3a1bf9403b3b5dfa1b4591b80": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\nauto_scaling_policy_property = stepfunctions_tasks.EmrCreateCluster.AutoScalingPolicyProperty(\n    constraints=stepfunctions_tasks.EmrCreateCluster.ScalingConstraintsProperty(\n        max_capacity=123,\n        min_capacity=123\n    ),\n    rules=[stepfunctions_tasks.EmrCreateCluster.ScalingRuleProperty(\n        action=stepfunctions_tasks.EmrCreateCluster.ScalingActionProperty(\n            simple_scaling_policy_configuration=stepfunctions_tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty(\n                scaling_adjustment=123,\n\n                # the properties below are optional\n                adjustment_type=stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n                cool_down=123\n            ),\n\n            # the properties below are optional\n            market=stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND\n        ),\n        name=\"name\",\n        trigger=stepfunctions_tasks.EmrCreateCluster.ScalingTriggerProperty(\n            cloud_watch_alarm_definition=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty(\n                comparison_operator=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n                metric_name=\"metricName\",\n                period=cdk.Duration.minutes(30),\n\n                # the properties below are optional\n                dimensions=[stepfunctions_tasks.EmrCreateCluster.MetricDimensionProperty(\n                    key=\"key\",\n                    value=\"value\"\n                )],\n                evaluation_periods=123,\n                namespace=\"namespace\",\n                statistic=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n                threshold=123,\n                unit=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE\n            )\n        ),\n\n        # the properties below are optional\n        description=\"description\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\nAutoScalingPolicyProperty autoScalingPolicyProperty = new AutoScalingPolicyProperty {\n    Constraints = new ScalingConstraintsProperty {\n        MaxCapacity = 123,\n        MinCapacity = 123\n    },\n    Rules = new [] { new ScalingRuleProperty {\n        Action = new ScalingActionProperty {\n            SimpleScalingPolicyConfiguration = new SimpleScalingPolicyConfigurationProperty {\n                ScalingAdjustment = 123,\n\n                // the properties below are optional\n                AdjustmentType = EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n                CoolDown = 123\n            },\n\n            // the properties below are optional\n            Market = EmrCreateCluster.InstanceMarket.ON_DEMAND\n        },\n        Name = \"name\",\n        Trigger = new ScalingTriggerProperty {\n            CloudWatchAlarmDefinition = new CloudWatchAlarmDefinitionProperty {\n                ComparisonOperator = EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n                MetricName = \"metricName\",\n                Period = Duration.Minutes(30),\n\n                // the properties below are optional\n                Dimensions = new [] { new MetricDimensionProperty {\n                    Key = \"key\",\n                    Value = \"value\"\n                } },\n                EvaluationPeriods = 123,\n                Namespace = \"namespace\",\n                Statistic = EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n                Threshold = 123,\n                Unit = EmrCreateCluster.CloudWatchAlarmUnit.NONE\n            }\n        },\n\n        // the properties below are optional\n        Description = \"description\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nAutoScalingPolicyProperty autoScalingPolicyProperty = AutoScalingPolicyProperty.builder()\n        .constraints(ScalingConstraintsProperty.builder()\n                .maxCapacity(123)\n                .minCapacity(123)\n                .build())\n        .rules(List.of(ScalingRuleProperty.builder()\n                .action(ScalingActionProperty.builder()\n                        .simpleScalingPolicyConfiguration(SimpleScalingPolicyConfigurationProperty.builder()\n                                .scalingAdjustment(123)\n\n                                // the properties below are optional\n                                .adjustmentType(EmrCreateCluster.getScalingAdjustmentType().CHANGE_IN_CAPACITY)\n                                .coolDown(123)\n                                .build())\n\n                        // the properties below are optional\n                        .market(EmrCreateCluster.getInstanceMarket().ON_DEMAND)\n                        .build())\n                .name(\"name\")\n                .trigger(ScalingTriggerProperty.builder()\n                        .cloudWatchAlarmDefinition(CloudWatchAlarmDefinitionProperty.builder()\n                                .comparisonOperator(EmrCreateCluster.getCloudWatchAlarmComparisonOperator().GREATER_THAN_OR_EQUAL)\n                                .metricName(\"metricName\")\n                                .period(Duration.minutes(30))\n\n                                // the properties below are optional\n                                .dimensions(List.of(MetricDimensionProperty.builder()\n                                        .key(\"key\")\n                                        .value(\"value\")\n                                        .build()))\n                                .evaluationPeriods(123)\n                                .namespace(\"namespace\")\n                                .statistic(EmrCreateCluster.getCloudWatchAlarmStatistic().SAMPLE_COUNT)\n                                .threshold(123)\n                                .unit(EmrCreateCluster.getCloudWatchAlarmUnit().NONE)\n                                .build())\n                        .build())\n\n                // the properties below are optional\n                .description(\"description\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nautoScalingPolicyProperty := &autoScalingPolicyProperty{\n\tconstraints: &scalingConstraintsProperty{\n\t\tmaxCapacity: jsii.Number(123),\n\t\tminCapacity: jsii.Number(123),\n\t},\n\trules: []scalingRuleProperty{\n\t\t&scalingRuleProperty{\n\t\t\taction: &scalingActionProperty{\n\t\t\t\tsimpleScalingPolicyConfiguration: &simpleScalingPolicyConfigurationProperty{\n\t\t\t\t\tscalingAdjustment: jsii.Number(123),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tadjustmentType: stepfunctions_tasks.emrCreateCluster.scalingAdjustmentType_CHANGE_IN_CAPACITY,\n\t\t\t\t\tcoolDown: jsii.Number(123),\n\t\t\t\t},\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tmarket: stepfunctions_tasks.*emrCreateCluster.instanceMarket_ON_DEMAND,\n\t\t\t},\n\t\t\tname: jsii.String(\"name\"),\n\t\t\ttrigger: &scalingTriggerProperty{\n\t\t\t\tcloudWatchAlarmDefinition: &cloudWatchAlarmDefinitionProperty{\n\t\t\t\t\tcomparisonOperator: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmComparisonOperator_GREATER_THAN_OR_EQUAL,\n\t\t\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\t\t\tperiod: cdk.duration.minutes(jsii.Number(30)),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tdimensions: []metricDimensionProperty{\n\t\t\t\t\t\t&metricDimensionProperty{\n\t\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tevaluationPeriods: jsii.Number(123),\n\t\t\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\t\t\tstatistic: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmStatistic_SAMPLE_COUNT,\n\t\t\t\t\tthreshold: jsii.Number(123),\n\t\t\t\t\tunit: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmUnit_NONE,\n\t\t\t\t},\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\tdescription: jsii.String(\"description\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\nconst autoScalingPolicyProperty: stepfunctions_tasks.EmrCreateCluster.AutoScalingPolicyProperty = {\n  constraints: {\n    maxCapacity: 123,\n    minCapacity: 123,\n  },\n  rules: [{\n    action: {\n      simpleScalingPolicyConfiguration: {\n        scalingAdjustment: 123,\n\n        // the properties below are optional\n        adjustmentType: stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n        coolDown: 123,\n      },\n\n      // the properties below are optional\n      market: stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND,\n    },\n    name: 'name',\n    trigger: {\n      cloudWatchAlarmDefinition: {\n        comparisonOperator: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n        metricName: 'metricName',\n        period: cdk.Duration.minutes(30),\n\n        // the properties below are optional\n        dimensions: [{\n          key: 'key',\n          value: 'value',\n        }],\n        evaluationPeriods: 123,\n        namespace: 'namespace',\n        statistic: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n        threshold: 123,\n        unit: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE,\n      },\n    },\n\n    // the properties below are optional\n    description: 'description',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.AutoScalingPolicyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.AutoScalingPolicyProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator#GREATER_THAN_OR_EQUAL",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmStatistic",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmStatistic#SAMPLE_COUNT",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmUnit",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmUnit#NONE",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceMarket",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceMarket#ON_DEMAND",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingActionProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingAdjustmentType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingAdjustmentType#CHANGE_IN_CAPACITY",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingConstraintsProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingTriggerProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst autoScalingPolicyProperty: stepfunctions_tasks.EmrCreateCluster.AutoScalingPolicyProperty = {\n  constraints: {\n    maxCapacity: 123,\n    minCapacity: 123,\n  },\n  rules: [{\n    action: {\n      simpleScalingPolicyConfiguration: {\n        scalingAdjustment: 123,\n\n        // the properties below are optional\n        adjustmentType: stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n        coolDown: 123,\n      },\n\n      // the properties below are optional\n      market: stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND,\n    },\n    name: 'name',\n    trigger: {\n      cloudWatchAlarmDefinition: {\n        comparisonOperator: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n        metricName: 'metricName',\n        period: cdk.Duration.minutes(30),\n\n        // the properties below are optional\n        dimensions: [{\n          key: 'key',\n          value: 'value',\n        }],\n        evaluationPeriods: 123,\n        namespace: 'namespace',\n        statistic: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n        threshold: 123,\n        unit: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE,\n      },\n    },\n\n    // the properties below are optional\n    description: 'description',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 8,
        "75": 54,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 8,
        "194": 17,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 25,
        "290": 1
      },
      "fqnsFingerprint": "e75689ffd476f2f3edc40d5ca3f9dd78d73c44353d30158a67c138739545d62b"
    },
    "8d5c3c156746b84534fef97a758f139b86b6bae037658676c9b9e509ed8bcf1e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nbootstrap_action_config_property = stepfunctions_tasks.EmrCreateCluster.BootstrapActionConfigProperty(\n    name=\"name\",\n    script_bootstrap_action=stepfunctions_tasks.EmrCreateCluster.ScriptBootstrapActionConfigProperty(\n        path=\"path\",\n\n        # the properties below are optional\n        args=[\"args\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nBootstrapActionConfigProperty bootstrapActionConfigProperty = new BootstrapActionConfigProperty {\n    Name = \"name\",\n    ScriptBootstrapAction = new ScriptBootstrapActionConfigProperty {\n        Path = \"path\",\n\n        // the properties below are optional\n        Args = new [] { \"args\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nBootstrapActionConfigProperty bootstrapActionConfigProperty = BootstrapActionConfigProperty.builder()\n        .name(\"name\")\n        .scriptBootstrapAction(ScriptBootstrapActionConfigProperty.builder()\n                .path(\"path\")\n\n                // the properties below are optional\n                .args(List.of(\"args\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nbootstrapActionConfigProperty := &bootstrapActionConfigProperty{\n\tname: jsii.String(\"name\"),\n\tscriptBootstrapAction: &scriptBootstrapActionConfigProperty{\n\t\tpath: jsii.String(\"path\"),\n\n\t\t// the properties below are optional\n\t\targs: []*string{\n\t\t\tjsii.String(\"args\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst bootstrapActionConfigProperty: stepfunctions_tasks.EmrCreateCluster.BootstrapActionConfigProperty = {\n  name: 'name',\n  scriptBootstrapAction: {\n    path: 'path',\n\n    // the properties below are optional\n    args: ['args'],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.BootstrapActionConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.BootstrapActionConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScriptBootstrapActionConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst bootstrapActionConfigProperty: stepfunctions_tasks.EmrCreateCluster.BootstrapActionConfigProperty = {\n  name: 'name',\n  scriptBootstrapAction: {\n    path: 'path',\n\n    // the properties below are optional\n    args: ['args'],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "57bb9a0ccb377b3d0dd9e2c1db7c0dfe3e024e399a9ff41a1fa34cd751785018"
    },
    "e07783082a2b6b4a2fa4a170806bda80430a47d3dcb40d0862b87cfa53ff93fd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\ncloud_watch_alarm_definition_property = stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty(\n    comparison_operator=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n    metric_name=\"metricName\",\n    period=cdk.Duration.minutes(30),\n\n    # the properties below are optional\n    dimensions=[stepfunctions_tasks.EmrCreateCluster.MetricDimensionProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    evaluation_periods=123,\n    namespace=\"namespace\",\n    statistic=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n    threshold=123,\n    unit=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\nCloudWatchAlarmDefinitionProperty cloudWatchAlarmDefinitionProperty = new CloudWatchAlarmDefinitionProperty {\n    ComparisonOperator = EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n    MetricName = \"metricName\",\n    Period = Duration.Minutes(30),\n\n    // the properties below are optional\n    Dimensions = new [] { new MetricDimensionProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    EvaluationPeriods = 123,\n    Namespace = \"namespace\",\n    Statistic = EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n    Threshold = 123,\n    Unit = EmrCreateCluster.CloudWatchAlarmUnit.NONE\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nCloudWatchAlarmDefinitionProperty cloudWatchAlarmDefinitionProperty = CloudWatchAlarmDefinitionProperty.builder()\n        .comparisonOperator(EmrCreateCluster.getCloudWatchAlarmComparisonOperator().GREATER_THAN_OR_EQUAL)\n        .metricName(\"metricName\")\n        .period(Duration.minutes(30))\n\n        // the properties below are optional\n        .dimensions(List.of(MetricDimensionProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .evaluationPeriods(123)\n        .namespace(\"namespace\")\n        .statistic(EmrCreateCluster.getCloudWatchAlarmStatistic().SAMPLE_COUNT)\n        .threshold(123)\n        .unit(EmrCreateCluster.getCloudWatchAlarmUnit().NONE)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ncloudWatchAlarmDefinitionProperty := &cloudWatchAlarmDefinitionProperty{\n\tcomparisonOperator: stepfunctions_tasks.emrCreateCluster.cloudWatchAlarmComparisonOperator_GREATER_THAN_OR_EQUAL,\n\tmetricName: jsii.String(\"metricName\"),\n\tperiod: cdk.duration.minutes(jsii.Number(30)),\n\n\t// the properties below are optional\n\tdimensions: []metricDimensionProperty{\n\t\t&metricDimensionProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tevaluationPeriods: jsii.Number(123),\n\tnamespace: jsii.String(\"namespace\"),\n\tstatistic: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmStatistic_SAMPLE_COUNT,\n\tthreshold: jsii.Number(123),\n\tunit: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmUnit_NONE,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\nconst cloudWatchAlarmDefinitionProperty: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty = {\n  comparisonOperator: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n  metricName: 'metricName',\n  period: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  dimensions: [{\n    key: 'key',\n    value: 'value',\n  }],\n  evaluationPeriods: 123,\n  namespace: 'namespace',\n  statistic: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n  threshold: 123,\n  unit: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator#GREATER_THAN_OR_EQUAL",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmStatistic",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmStatistic#SAMPLE_COUNT",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmUnit",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmUnit#NONE",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cloudWatchAlarmDefinitionProperty: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty = {\n  comparisonOperator: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n  metricName: 'metricName',\n  period: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  dimensions: [{\n    key: 'key',\n    value: 'value',\n  }],\n  evaluationPeriods: 123,\n  namespace: 'namespace',\n  statistic: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n  threshold: 123,\n  unit: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 32,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 11,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "66f1ea8b17b3d989a64350fc27937c7d32bfc9f01737e376dfb67a28a55165a3"
    },
    "51d04b1f48d3deec3656968fcc29e7a541019d602f1dc1dd1deea191d508e253": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# configuration_property_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty\n\nconfiguration_property = stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty(\n    classification=\"classification\",\n    configurations=[stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty(\n        classification=\"classification\",\n        configurations=[configuration_property_],\n        properties={\n            \"properties_key\": \"properties\"\n        }\n    )],\n    properties={\n        \"properties_key\": \"properties\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nConfigurationProperty configurationProperty_;\n\nConfigurationProperty configurationProperty = new ConfigurationProperty {\n    Classification = \"classification\",\n    Configurations = new [] { new ConfigurationProperty {\n        Classification = \"classification\",\n        Configurations = new [] { configurationProperty_ },\n        Properties = new Dictionary<string, string> {\n            { \"propertiesKey\", \"properties\" }\n        }\n    } },\n    Properties = new Dictionary<string, string> {\n        { \"propertiesKey\", \"properties\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nConfigurationProperty configurationProperty_;\n\nConfigurationProperty configurationProperty = ConfigurationProperty.builder()\n        .classification(\"classification\")\n        .configurations(List.of(ConfigurationProperty.builder()\n                .classification(\"classification\")\n                .configurations(List.of(configurationProperty_))\n                .properties(Map.of(\n                        \"propertiesKey\", \"properties\"))\n                .build()))\n        .properties(Map.of(\n                \"propertiesKey\", \"properties\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar configurationProperty_ configurationProperty\nconfigurationProperty := &configurationProperty{\n\tclassification: jsii.String(\"classification\"),\n\tconfigurations: []*configurationProperty{\n\t\t&configurationProperty{\n\t\t\tclassification: jsii.String(\"classification\"),\n\t\t\tconfigurations: []*configurationProperty{\n\t\t\t\tconfigurationProperty_,\n\t\t\t},\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"propertiesKey\": jsii.String(\"properties\"),\n\t\t\t},\n\t\t},\n\t},\n\tproperties: map[string]*string{\n\t\t\"propertiesKey\": jsii.String(\"properties\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const configurationProperty_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty;\nconst configurationProperty: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty = {\n  classification: 'classification',\n  configurations: [{\n    classification: 'classification',\n    configurations: [configurationProperty_],\n    properties: {\n      propertiesKey: 'properties',\n    },\n  }],\n  properties: {\n    propertiesKey: 'properties',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const configurationProperty_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst configurationProperty: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty = {\n  classification: 'classification',\n  configurations: [{\n    classification: 'classification',\n    configurations: [configurationProperty_],\n    properties: {\n      propertiesKey: 'properties',\n    },\n  }],\n  properties: {\n    propertiesKey: 'properties',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "130": 1,
        "153": 4,
        "169": 2,
        "192": 2,
        "193": 4,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "df3496eb01245e3a78787aee91b9f0ba046286a915e761ebd19fe93151dabad5"
    },
    "d4d37ccabe4832b0fb1bb82c0cbf1148a7012638cc3da5ee417669c5cd7c7448": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# size: cdk.Size\n\nebs_block_device_config_property = stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceConfigProperty(\n    volume_specification=stepfunctions_tasks.EmrCreateCluster.VolumeSpecificationProperty(\n        volume_size=size,\n        volume_type=stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n        # the properties below are optional\n        iops=123\n    ),\n\n    # the properties below are optional\n    volumes_per_instance=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nSize size;\nEbsBlockDeviceConfigProperty ebsBlockDeviceConfigProperty = new EbsBlockDeviceConfigProperty {\n    VolumeSpecification = new VolumeSpecificationProperty {\n        VolumeSize = size,\n        VolumeType = EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n        // the properties below are optional\n        Iops = 123\n    },\n\n    // the properties below are optional\n    VolumesPerInstance = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nSize size;\n\nEbsBlockDeviceConfigProperty ebsBlockDeviceConfigProperty = EbsBlockDeviceConfigProperty.builder()\n        .volumeSpecification(VolumeSpecificationProperty.builder()\n                .volumeSize(size)\n                .volumeType(EmrCreateCluster.getEbsBlockDeviceVolumeType().GP2)\n\n                // the properties below are optional\n                .iops(123)\n                .build())\n\n        // the properties below are optional\n        .volumesPerInstance(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar size size\nebsBlockDeviceConfigProperty := &ebsBlockDeviceConfigProperty{\n\tvolumeSpecification: &volumeSpecificationProperty{\n\t\tvolumeSize: size,\n\t\tvolumeType: stepfunctions_tasks.emrCreateCluster.ebsBlockDeviceVolumeType_GP2,\n\n\t\t// the properties below are optional\n\t\tiops: jsii.Number(123),\n\t},\n\n\t// the properties below are optional\n\tvolumesPerInstance: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const size: cdk.Size;\nconst ebsBlockDeviceConfigProperty: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceConfigProperty = {\n  volumeSpecification: {\n    volumeSize: size,\n    volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n    // the properties below are optional\n    iops: 123,\n  },\n\n  // the properties below are optional\n  volumesPerInstance: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType#GP2",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.VolumeSpecificationProperty",
        "@aws-cdk/core.Size"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const size: cdk.Size;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ebsBlockDeviceConfigProperty: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceConfigProperty = {\n  volumeSpecification: {\n    volumeSize: size,\n    volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n    // the properties below are optional\n    iops: 123,\n  },\n\n  // the properties below are optional\n  volumesPerInstance: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 19,
        "130": 1,
        "153": 3,
        "169": 2,
        "193": 2,
        "194": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fa32d049b9e6437be300313d1a52b176beeff784dd4e17355e392b0a4393ad89"
    },
    "aeabf3148397ed17228dc66ce9fdce6530c89011ff87ce2a8de0b67364cbac5a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# size: cdk.Size\n\nebs_configuration_property = stepfunctions_tasks.EmrCreateCluster.EbsConfigurationProperty(\n    ebs_block_device_configs=[stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceConfigProperty(\n        volume_specification=stepfunctions_tasks.EmrCreateCluster.VolumeSpecificationProperty(\n            volume_size=size,\n            volume_type=stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n            # the properties below are optional\n            iops=123\n        ),\n\n        # the properties below are optional\n        volumes_per_instance=123\n    )],\n    ebs_optimized=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nSize size;\nEbsConfigurationProperty ebsConfigurationProperty = new EbsConfigurationProperty {\n    EbsBlockDeviceConfigs = new [] { new EbsBlockDeviceConfigProperty {\n        VolumeSpecification = new VolumeSpecificationProperty {\n            VolumeSize = size,\n            VolumeType = EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n            // the properties below are optional\n            Iops = 123\n        },\n\n        // the properties below are optional\n        VolumesPerInstance = 123\n    } },\n    EbsOptimized = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nSize size;\n\nEbsConfigurationProperty ebsConfigurationProperty = EbsConfigurationProperty.builder()\n        .ebsBlockDeviceConfigs(List.of(EbsBlockDeviceConfigProperty.builder()\n                .volumeSpecification(VolumeSpecificationProperty.builder()\n                        .volumeSize(size)\n                        .volumeType(EmrCreateCluster.getEbsBlockDeviceVolumeType().GP2)\n\n                        // the properties below are optional\n                        .iops(123)\n                        .build())\n\n                // the properties below are optional\n                .volumesPerInstance(123)\n                .build()))\n        .ebsOptimized(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar size size\nebsConfigurationProperty := &ebsConfigurationProperty{\n\tebsBlockDeviceConfigs: []ebsBlockDeviceConfigProperty{\n\t\t&ebsBlockDeviceConfigProperty{\n\t\t\tvolumeSpecification: &volumeSpecificationProperty{\n\t\t\t\tvolumeSize: size,\n\t\t\t\tvolumeType: stepfunctions_tasks.emrCreateCluster.ebsBlockDeviceVolumeType_GP2,\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tiops: jsii.Number(123),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\tvolumesPerInstance: jsii.Number(123),\n\t\t},\n\t},\n\tebsOptimized: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const size: cdk.Size;\nconst ebsConfigurationProperty: stepfunctions_tasks.EmrCreateCluster.EbsConfigurationProperty = {\n  ebsBlockDeviceConfigs: [{\n    volumeSpecification: {\n      volumeSize: size,\n      volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n      // the properties below are optional\n      iops: 123,\n    },\n\n    // the properties below are optional\n    volumesPerInstance: 123,\n  }],\n  ebsOptimized: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType#GP2",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsConfigurationProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.VolumeSpecificationProperty",
        "@aws-cdk/core.Size"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const size: cdk.Size;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ebsConfigurationProperty: stepfunctions_tasks.EmrCreateCluster.EbsConfigurationProperty = {\n  ebsBlockDeviceConfigs: [{\n    volumeSpecification: {\n      volumeSize: size,\n      volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n      // the properties below are optional\n      iops: 123,\n    },\n\n    // the properties below are optional\n    volumesPerInstance: 123,\n  }],\n  ebsOptimized: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 21,
        "91": 1,
        "130": 1,
        "153": 3,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "3435f2f1cf1e34fe1a47201b9f9da0d419c84227b33fe1eb6dd9f51179446e8e"
    },
    "872b183c66ef753547ac1b2257d5681fa4cbc50d2ca6d003b31020cf88f15e20": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# configuration_property_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty\n# size: cdk.Size\n\ninstance_fleet_config_property = stepfunctions_tasks.EmrCreateCluster.InstanceFleetConfigProperty(\n    instance_fleet_type=stepfunctions_tasks.EmrCreateCluster.InstanceRoleType.MASTER,\n\n    # the properties below are optional\n    instance_type_configs=[stepfunctions_tasks.EmrCreateCluster.InstanceTypeConfigProperty(\n        instance_type=\"instanceType\",\n\n        # the properties below are optional\n        bid_price=\"bidPrice\",\n        bid_price_as_percentage_of_on_demand_price=123,\n        configurations=[stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty(\n            classification=\"classification\",\n            configurations=[configuration_property_],\n            properties={\n                \"properties_key\": \"properties\"\n            }\n        )],\n        ebs_configuration=stepfunctions_tasks.EmrCreateCluster.EbsConfigurationProperty(\n            ebs_block_device_configs=[stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceConfigProperty(\n                volume_specification=stepfunctions_tasks.EmrCreateCluster.VolumeSpecificationProperty(\n                    volume_size=size,\n                    volume_type=stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n                    # the properties below are optional\n                    iops=123\n                ),\n\n                # the properties below are optional\n                volumes_per_instance=123\n            )],\n            ebs_optimized=False\n        ),\n        weighted_capacity=123\n    )],\n    launch_specifications=stepfunctions_tasks.EmrCreateCluster.InstanceFleetProvisioningSpecificationsProperty(\n        spot_specification=stepfunctions_tasks.EmrCreateCluster.SpotProvisioningSpecificationProperty(\n            timeout_action=stepfunctions_tasks.EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n            timeout_duration_minutes=123,\n\n            # the properties below are optional\n            allocation_strategy=stepfunctions_tasks.EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n            block_duration_minutes=123\n        )\n    ),\n    name=\"name\",\n    target_on_demand_capacity=123,\n    target_spot_capacity=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nConfigurationProperty configurationProperty_;\nSize size;\nInstanceFleetConfigProperty instanceFleetConfigProperty = new InstanceFleetConfigProperty {\n    InstanceFleetType = EmrCreateCluster.InstanceRoleType.MASTER,\n\n    // the properties below are optional\n    InstanceTypeConfigs = new [] { new InstanceTypeConfigProperty {\n        InstanceType = \"instanceType\",\n\n        // the properties below are optional\n        BidPrice = \"bidPrice\",\n        BidPriceAsPercentageOfOnDemandPrice = 123,\n        Configurations = new [] { new ConfigurationProperty {\n            Classification = \"classification\",\n            Configurations = new [] { configurationProperty_ },\n            Properties = new Dictionary<string, string> {\n                { \"propertiesKey\", \"properties\" }\n            }\n        } },\n        EbsConfiguration = new EbsConfigurationProperty {\n            EbsBlockDeviceConfigs = new [] { new EbsBlockDeviceConfigProperty {\n                VolumeSpecification = new VolumeSpecificationProperty {\n                    VolumeSize = size,\n                    VolumeType = EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n                    // the properties below are optional\n                    Iops = 123\n                },\n\n                // the properties below are optional\n                VolumesPerInstance = 123\n            } },\n            EbsOptimized = false\n        },\n        WeightedCapacity = 123\n    } },\n    LaunchSpecifications = new InstanceFleetProvisioningSpecificationsProperty {\n        SpotSpecification = new SpotProvisioningSpecificationProperty {\n            TimeoutAction = EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n            TimeoutDurationMinutes = 123,\n\n            // the properties below are optional\n            AllocationStrategy = EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n            BlockDurationMinutes = 123\n        }\n    },\n    Name = \"name\",\n    TargetOnDemandCapacity = 123,\n    TargetSpotCapacity = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nConfigurationProperty configurationProperty_;\nSize size;\n\nInstanceFleetConfigProperty instanceFleetConfigProperty = InstanceFleetConfigProperty.builder()\n        .instanceFleetType(EmrCreateCluster.getInstanceRoleType().MASTER)\n\n        // the properties below are optional\n        .instanceTypeConfigs(List.of(InstanceTypeConfigProperty.builder()\n                .instanceType(\"instanceType\")\n\n                // the properties below are optional\n                .bidPrice(\"bidPrice\")\n                .bidPriceAsPercentageOfOnDemandPrice(123)\n                .configurations(List.of(ConfigurationProperty.builder()\n                        .classification(\"classification\")\n                        .configurations(List.of(configurationProperty_))\n                        .properties(Map.of(\n                                \"propertiesKey\", \"properties\"))\n                        .build()))\n                .ebsConfiguration(EbsConfigurationProperty.builder()\n                        .ebsBlockDeviceConfigs(List.of(EbsBlockDeviceConfigProperty.builder()\n                                .volumeSpecification(VolumeSpecificationProperty.builder()\n                                        .volumeSize(size)\n                                        .volumeType(EmrCreateCluster.getEbsBlockDeviceVolumeType().GP2)\n\n                                        // the properties below are optional\n                                        .iops(123)\n                                        .build())\n\n                                // the properties below are optional\n                                .volumesPerInstance(123)\n                                .build()))\n                        .ebsOptimized(false)\n                        .build())\n                .weightedCapacity(123)\n                .build()))\n        .launchSpecifications(InstanceFleetProvisioningSpecificationsProperty.builder()\n                .spotSpecification(SpotProvisioningSpecificationProperty.builder()\n                        .timeoutAction(EmrCreateCluster.getSpotTimeoutAction().SWITCH_TO_ON_DEMAND)\n                        .timeoutDurationMinutes(123)\n\n                        // the properties below are optional\n                        .allocationStrategy(EmrCreateCluster.getSpotAllocationStrategy().CAPACITY_OPTIMIZED)\n                        .blockDurationMinutes(123)\n                        .build())\n                .build())\n        .name(\"name\")\n        .targetOnDemandCapacity(123)\n        .targetSpotCapacity(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar configurationProperty_ configurationProperty\nvar size size\ninstanceFleetConfigProperty := &instanceFleetConfigProperty{\n\tinstanceFleetType: stepfunctions_tasks.emrCreateCluster.instanceRoleType_MASTER,\n\n\t// the properties below are optional\n\tinstanceTypeConfigs: []instanceTypeConfigProperty{\n\t\t&instanceTypeConfigProperty{\n\t\t\tinstanceType: jsii.String(\"instanceType\"),\n\n\t\t\t// the properties below are optional\n\t\t\tbidPrice: jsii.String(\"bidPrice\"),\n\t\t\tbidPriceAsPercentageOfOnDemandPrice: jsii.Number(123),\n\t\t\tconfigurations: []*configurationProperty{\n\t\t\t\t&configurationProperty{\n\t\t\t\t\tclassification: jsii.String(\"classification\"),\n\t\t\t\t\tconfigurations: []*configurationProperty{\n\t\t\t\t\t\tconfigurationProperty_,\n\t\t\t\t\t},\n\t\t\t\t\tproperties: map[string]*string{\n\t\t\t\t\t\t\"propertiesKey\": jsii.String(\"properties\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tebsConfiguration: &ebsConfigurationProperty{\n\t\t\t\tebsBlockDeviceConfigs: []ebsBlockDeviceConfigProperty{\n\t\t\t\t\t&ebsBlockDeviceConfigProperty{\n\t\t\t\t\t\tvolumeSpecification: &volumeSpecificationProperty{\n\t\t\t\t\t\t\tvolumeSize: size,\n\t\t\t\t\t\t\tvolumeType: stepfunctions_tasks.*emrCreateCluster.ebsBlockDeviceVolumeType_GP2,\n\n\t\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\t\tiops: jsii.Number(123),\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tvolumesPerInstance: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tebsOptimized: jsii.Boolean(false),\n\t\t\t},\n\t\t\tweightedCapacity: jsii.Number(123),\n\t\t},\n\t},\n\tlaunchSpecifications: &instanceFleetProvisioningSpecificationsProperty{\n\t\tspotSpecification: &spotProvisioningSpecificationProperty{\n\t\t\ttimeoutAction: stepfunctions_tasks.*emrCreateCluster.spotTimeoutAction_SWITCH_TO_ON_DEMAND,\n\t\t\ttimeoutDurationMinutes: jsii.Number(123),\n\n\t\t\t// the properties below are optional\n\t\t\tallocationStrategy: stepfunctions_tasks.*emrCreateCluster.spotAllocationStrategy_CAPACITY_OPTIMIZED,\n\t\t\tblockDurationMinutes: jsii.Number(123),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\ttargetOnDemandCapacity: jsii.Number(123),\n\ttargetSpotCapacity: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const configurationProperty_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty;\ndeclare const size: cdk.Size;\nconst instanceFleetConfigProperty: stepfunctions_tasks.EmrCreateCluster.InstanceFleetConfigProperty = {\n  instanceFleetType: stepfunctions_tasks.EmrCreateCluster.InstanceRoleType.MASTER,\n\n  // the properties below are optional\n  instanceTypeConfigs: [{\n    instanceType: 'instanceType',\n\n    // the properties below are optional\n    bidPrice: 'bidPrice',\n    bidPriceAsPercentageOfOnDemandPrice: 123,\n    configurations: [{\n      classification: 'classification',\n      configurations: [configurationProperty_],\n      properties: {\n        propertiesKey: 'properties',\n      },\n    }],\n    ebsConfiguration: {\n      ebsBlockDeviceConfigs: [{\n        volumeSpecification: {\n          volumeSize: size,\n          volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n          // the properties below are optional\n          iops: 123,\n        },\n\n        // the properties below are optional\n        volumesPerInstance: 123,\n      }],\n      ebsOptimized: false,\n    },\n    weightedCapacity: 123,\n  }],\n  launchSpecifications: {\n    spotSpecification: {\n      timeoutAction: stepfunctions_tasks.EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n      timeoutDurationMinutes: 123,\n\n      // the properties below are optional\n      allocationStrategy: stepfunctions_tasks.EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n      blockDurationMinutes: 123,\n    },\n  },\n  name: 'name',\n  targetOnDemandCapacity: 123,\n  targetSpotCapacity: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceFleetConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType#GP2",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsConfigurationProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceFleetConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceFleetProvisioningSpecificationsProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceRoleType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceRoleType#MASTER",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotAllocationStrategy",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotAllocationStrategy#CAPACITY_OPTIMIZED",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotProvisioningSpecificationProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotTimeoutAction",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotTimeoutAction#SWITCH_TO_ON_DEMAND",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.VolumeSpecificationProperty",
        "@aws-cdk/core.Size"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const configurationProperty_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty;\ndeclare const size: cdk.Size;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceFleetConfigProperty: stepfunctions_tasks.EmrCreateCluster.InstanceFleetConfigProperty = {\n  instanceFleetType: stepfunctions_tasks.EmrCreateCluster.InstanceRoleType.MASTER,\n\n  // the properties below are optional\n  instanceTypeConfigs: [{\n    instanceType: 'instanceType',\n\n    // the properties below are optional\n    bidPrice: 'bidPrice',\n    bidPriceAsPercentageOfOnDemandPrice: 123,\n    configurations: [{\n      classification: 'classification',\n      configurations: [configurationProperty_],\n      properties: {\n        propertiesKey: 'properties',\n      },\n    }],\n    ebsConfiguration: {\n      ebsBlockDeviceConfigs: [{\n        volumeSpecification: {\n          volumeSize: size,\n          volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n          // the properties below are optional\n          iops: 123,\n        },\n\n        // the properties below are optional\n        volumesPerInstance: 123,\n      }],\n      ebsOptimized: false,\n    },\n    weightedCapacity: 123,\n  }],\n  launchSpecifications: {\n    spotSpecification: {\n      timeoutAction: stepfunctions_tasks.EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n      timeoutDurationMinutes: 123,\n\n      // the properties below are optional\n      allocationStrategy: stepfunctions_tasks.EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n      blockDurationMinutes: 123,\n    },\n  },\n  name: 'name',\n  targetOnDemandCapacity: 123,\n  targetSpotCapacity: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 8,
        "10": 7,
        "75": 59,
        "91": 1,
        "130": 2,
        "153": 5,
        "169": 3,
        "192": 4,
        "193": 9,
        "194": 12,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 28,
        "290": 1
      },
      "fqnsFingerprint": "cedca6ea8fc4e8039abb8f175df2cc8cb0a9ae614a82b8fb392319e842445b5f"
    },
    "5360d182e51efef299565f11b9fddd237a2741ead859967880d142be9d6ca912": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\ninstance_fleet_provisioning_specifications_property = stepfunctions_tasks.EmrCreateCluster.InstanceFleetProvisioningSpecificationsProperty(\n    spot_specification=stepfunctions_tasks.EmrCreateCluster.SpotProvisioningSpecificationProperty(\n        timeout_action=stepfunctions_tasks.EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n        timeout_duration_minutes=123,\n\n        # the properties below are optional\n        allocation_strategy=stepfunctions_tasks.EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n        block_duration_minutes=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nInstanceFleetProvisioningSpecificationsProperty instanceFleetProvisioningSpecificationsProperty = new InstanceFleetProvisioningSpecificationsProperty {\n    SpotSpecification = new SpotProvisioningSpecificationProperty {\n        TimeoutAction = EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n        TimeoutDurationMinutes = 123,\n\n        // the properties below are optional\n        AllocationStrategy = EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n        BlockDurationMinutes = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nInstanceFleetProvisioningSpecificationsProperty instanceFleetProvisioningSpecificationsProperty = InstanceFleetProvisioningSpecificationsProperty.builder()\n        .spotSpecification(SpotProvisioningSpecificationProperty.builder()\n                .timeoutAction(EmrCreateCluster.getSpotTimeoutAction().SWITCH_TO_ON_DEMAND)\n                .timeoutDurationMinutes(123)\n\n                // the properties below are optional\n                .allocationStrategy(EmrCreateCluster.getSpotAllocationStrategy().CAPACITY_OPTIMIZED)\n                .blockDurationMinutes(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\ninstanceFleetProvisioningSpecificationsProperty := &instanceFleetProvisioningSpecificationsProperty{\n\tspotSpecification: &spotProvisioningSpecificationProperty{\n\t\ttimeoutAction: stepfunctions_tasks.emrCreateCluster.spotTimeoutAction_SWITCH_TO_ON_DEMAND,\n\t\ttimeoutDurationMinutes: jsii.Number(123),\n\n\t\t// the properties below are optional\n\t\tallocationStrategy: stepfunctions_tasks.*emrCreateCluster.spotAllocationStrategy_CAPACITY_OPTIMIZED,\n\t\tblockDurationMinutes: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst instanceFleetProvisioningSpecificationsProperty: stepfunctions_tasks.EmrCreateCluster.InstanceFleetProvisioningSpecificationsProperty = {\n  spotSpecification: {\n    timeoutAction: stepfunctions_tasks.EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n    timeoutDurationMinutes: 123,\n\n    // the properties below are optional\n    allocationStrategy: stepfunctions_tasks.EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n    blockDurationMinutes: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceFleetProvisioningSpecificationsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceFleetProvisioningSpecificationsProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotAllocationStrategy",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotAllocationStrategy#CAPACITY_OPTIMIZED",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotProvisioningSpecificationProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotTimeoutAction",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotTimeoutAction#SWITCH_TO_ON_DEMAND"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceFleetProvisioningSpecificationsProperty: stepfunctions_tasks.EmrCreateCluster.InstanceFleetProvisioningSpecificationsProperty = {\n  spotSpecification: {\n    timeoutAction: stepfunctions_tasks.EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n    timeoutDurationMinutes: 123,\n\n    // the properties below are optional\n    allocationStrategy: stepfunctions_tasks.EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n    blockDurationMinutes: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 18,
        "153": 2,
        "169": 1,
        "193": 2,
        "194": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "956503f1faff78f29b3af13fcebc92ad257420dfe3628614716293ce52c940f2"
    },
    "dd206815cb8400033db54fbf22a04bee74001a477967f90dac1133082e62589a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# configuration_property_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty\n# size: cdk.Size\n\ninstance_group_config_property = stepfunctions_tasks.EmrCreateCluster.InstanceGroupConfigProperty(\n    instance_count=123,\n    instance_role=stepfunctions_tasks.EmrCreateCluster.InstanceRoleType.MASTER,\n    instance_type=\"instanceType\",\n\n    # the properties below are optional\n    auto_scaling_policy=stepfunctions_tasks.EmrCreateCluster.AutoScalingPolicyProperty(\n        constraints=stepfunctions_tasks.EmrCreateCluster.ScalingConstraintsProperty(\n            max_capacity=123,\n            min_capacity=123\n        ),\n        rules=[stepfunctions_tasks.EmrCreateCluster.ScalingRuleProperty(\n            action=stepfunctions_tasks.EmrCreateCluster.ScalingActionProperty(\n                simple_scaling_policy_configuration=stepfunctions_tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty(\n                    scaling_adjustment=123,\n\n                    # the properties below are optional\n                    adjustment_type=stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n                    cool_down=123\n                ),\n\n                # the properties below are optional\n                market=stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND\n            ),\n            name=\"name\",\n            trigger=stepfunctions_tasks.EmrCreateCluster.ScalingTriggerProperty(\n                cloud_watch_alarm_definition=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty(\n                    comparison_operator=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n                    metric_name=\"metricName\",\n                    period=cdk.Duration.minutes(30),\n\n                    # the properties below are optional\n                    dimensions=[stepfunctions_tasks.EmrCreateCluster.MetricDimensionProperty(\n                        key=\"key\",\n                        value=\"value\"\n                    )],\n                    evaluation_periods=123,\n                    namespace=\"namespace\",\n                    statistic=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n                    threshold=123,\n                    unit=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE\n                )\n            ),\n\n            # the properties below are optional\n            description=\"description\"\n        )]\n    ),\n    bid_price=\"bidPrice\",\n    configurations=[stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty(\n        classification=\"classification\",\n        configurations=[configuration_property_],\n        properties={\n            \"properties_key\": \"properties\"\n        }\n    )],\n    ebs_configuration=stepfunctions_tasks.EmrCreateCluster.EbsConfigurationProperty(\n        ebs_block_device_configs=[stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceConfigProperty(\n            volume_specification=stepfunctions_tasks.EmrCreateCluster.VolumeSpecificationProperty(\n                volume_size=size,\n                volume_type=stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n                # the properties below are optional\n                iops=123\n            ),\n\n            # the properties below are optional\n            volumes_per_instance=123\n        )],\n        ebs_optimized=False\n    ),\n    market=stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND,\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nConfigurationProperty configurationProperty_;\nSize size;\nInstanceGroupConfigProperty instanceGroupConfigProperty = new InstanceGroupConfigProperty {\n    InstanceCount = 123,\n    InstanceRole = EmrCreateCluster.InstanceRoleType.MASTER,\n    InstanceType = \"instanceType\",\n\n    // the properties below are optional\n    AutoScalingPolicy = new AutoScalingPolicyProperty {\n        Constraints = new ScalingConstraintsProperty {\n            MaxCapacity = 123,\n            MinCapacity = 123\n        },\n        Rules = new [] { new ScalingRuleProperty {\n            Action = new ScalingActionProperty {\n                SimpleScalingPolicyConfiguration = new SimpleScalingPolicyConfigurationProperty {\n                    ScalingAdjustment = 123,\n\n                    // the properties below are optional\n                    AdjustmentType = EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n                    CoolDown = 123\n                },\n\n                // the properties below are optional\n                Market = EmrCreateCluster.InstanceMarket.ON_DEMAND\n            },\n            Name = \"name\",\n            Trigger = new ScalingTriggerProperty {\n                CloudWatchAlarmDefinition = new CloudWatchAlarmDefinitionProperty {\n                    ComparisonOperator = EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n                    MetricName = \"metricName\",\n                    Period = Duration.Minutes(30),\n\n                    // the properties below are optional\n                    Dimensions = new [] { new MetricDimensionProperty {\n                        Key = \"key\",\n                        Value = \"value\"\n                    } },\n                    EvaluationPeriods = 123,\n                    Namespace = \"namespace\",\n                    Statistic = EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n                    Threshold = 123,\n                    Unit = EmrCreateCluster.CloudWatchAlarmUnit.NONE\n                }\n            },\n\n            // the properties below are optional\n            Description = \"description\"\n        } }\n    },\n    BidPrice = \"bidPrice\",\n    Configurations = new [] { new ConfigurationProperty {\n        Classification = \"classification\",\n        Configurations = new [] { configurationProperty_ },\n        Properties = new Dictionary<string, string> {\n            { \"propertiesKey\", \"properties\" }\n        }\n    } },\n    EbsConfiguration = new EbsConfigurationProperty {\n        EbsBlockDeviceConfigs = new [] { new EbsBlockDeviceConfigProperty {\n            VolumeSpecification = new VolumeSpecificationProperty {\n                VolumeSize = size,\n                VolumeType = EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n                // the properties below are optional\n                Iops = 123\n            },\n\n            // the properties below are optional\n            VolumesPerInstance = 123\n        } },\n        EbsOptimized = false\n    },\n    Market = EmrCreateCluster.InstanceMarket.ON_DEMAND,\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nConfigurationProperty configurationProperty_;\nSize size;\n\nInstanceGroupConfigProperty instanceGroupConfigProperty = InstanceGroupConfigProperty.builder()\n        .instanceCount(123)\n        .instanceRole(EmrCreateCluster.getInstanceRoleType().MASTER)\n        .instanceType(\"instanceType\")\n\n        // the properties below are optional\n        .autoScalingPolicy(AutoScalingPolicyProperty.builder()\n                .constraints(ScalingConstraintsProperty.builder()\n                        .maxCapacity(123)\n                        .minCapacity(123)\n                        .build())\n                .rules(List.of(ScalingRuleProperty.builder()\n                        .action(ScalingActionProperty.builder()\n                                .simpleScalingPolicyConfiguration(SimpleScalingPolicyConfigurationProperty.builder()\n                                        .scalingAdjustment(123)\n\n                                        // the properties below are optional\n                                        .adjustmentType(EmrCreateCluster.getScalingAdjustmentType().CHANGE_IN_CAPACITY)\n                                        .coolDown(123)\n                                        .build())\n\n                                // the properties below are optional\n                                .market(EmrCreateCluster.getInstanceMarket().ON_DEMAND)\n                                .build())\n                        .name(\"name\")\n                        .trigger(ScalingTriggerProperty.builder()\n                                .cloudWatchAlarmDefinition(CloudWatchAlarmDefinitionProperty.builder()\n                                        .comparisonOperator(EmrCreateCluster.getCloudWatchAlarmComparisonOperator().GREATER_THAN_OR_EQUAL)\n                                        .metricName(\"metricName\")\n                                        .period(Duration.minutes(30))\n\n                                        // the properties below are optional\n                                        .dimensions(List.of(MetricDimensionProperty.builder()\n                                                .key(\"key\")\n                                                .value(\"value\")\n                                                .build()))\n                                        .evaluationPeriods(123)\n                                        .namespace(\"namespace\")\n                                        .statistic(EmrCreateCluster.getCloudWatchAlarmStatistic().SAMPLE_COUNT)\n                                        .threshold(123)\n                                        .unit(EmrCreateCluster.getCloudWatchAlarmUnit().NONE)\n                                        .build())\n                                .build())\n\n                        // the properties below are optional\n                        .description(\"description\")\n                        .build()))\n                .build())\n        .bidPrice(\"bidPrice\")\n        .configurations(List.of(ConfigurationProperty.builder()\n                .classification(\"classification\")\n                .configurations(List.of(configurationProperty_))\n                .properties(Map.of(\n                        \"propertiesKey\", \"properties\"))\n                .build()))\n        .ebsConfiguration(EbsConfigurationProperty.builder()\n                .ebsBlockDeviceConfigs(List.of(EbsBlockDeviceConfigProperty.builder()\n                        .volumeSpecification(VolumeSpecificationProperty.builder()\n                                .volumeSize(size)\n                                .volumeType(EmrCreateCluster.getEbsBlockDeviceVolumeType().GP2)\n\n                                // the properties below are optional\n                                .iops(123)\n                                .build())\n\n                        // the properties below are optional\n                        .volumesPerInstance(123)\n                        .build()))\n                .ebsOptimized(false)\n                .build())\n        .market(EmrCreateCluster.getInstanceMarket().ON_DEMAND)\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar configurationProperty_ configurationProperty\nvar size size\ninstanceGroupConfigProperty := &instanceGroupConfigProperty{\n\tinstanceCount: jsii.Number(123),\n\tinstanceRole: stepfunctions_tasks.emrCreateCluster.instanceRoleType_MASTER,\n\tinstanceType: jsii.String(\"instanceType\"),\n\n\t// the properties below are optional\n\tautoScalingPolicy: &autoScalingPolicyProperty{\n\t\tconstraints: &scalingConstraintsProperty{\n\t\t\tmaxCapacity: jsii.Number(123),\n\t\t\tminCapacity: jsii.Number(123),\n\t\t},\n\t\trules: []scalingRuleProperty{\n\t\t\t&scalingRuleProperty{\n\t\t\t\taction: &scalingActionProperty{\n\t\t\t\t\tsimpleScalingPolicyConfiguration: &simpleScalingPolicyConfigurationProperty{\n\t\t\t\t\t\tscalingAdjustment: jsii.Number(123),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tadjustmentType: stepfunctions_tasks.*emrCreateCluster.scalingAdjustmentType_CHANGE_IN_CAPACITY,\n\t\t\t\t\t\tcoolDown: jsii.Number(123),\n\t\t\t\t\t},\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tmarket: stepfunctions_tasks.*emrCreateCluster.instanceMarket_ON_DEMAND,\n\t\t\t\t},\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\ttrigger: &scalingTriggerProperty{\n\t\t\t\t\tcloudWatchAlarmDefinition: &cloudWatchAlarmDefinitionProperty{\n\t\t\t\t\t\tcomparisonOperator: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmComparisonOperator_GREATER_THAN_OR_EQUAL,\n\t\t\t\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\t\t\t\tperiod: cdk.duration.minutes(jsii.Number(30)),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tdimensions: []metricDimensionProperty{\n\t\t\t\t\t\t\t&metricDimensionProperty{\n\t\t\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tevaluationPeriods: jsii.Number(123),\n\t\t\t\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\t\t\t\tstatistic: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmStatistic_SAMPLE_COUNT,\n\t\t\t\t\t\tthreshold: jsii.Number(123),\n\t\t\t\t\t\tunit: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmUnit_NONE,\n\t\t\t\t\t},\n\t\t\t\t},\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tdescription: jsii.String(\"description\"),\n\t\t\t},\n\t\t},\n\t},\n\tbidPrice: jsii.String(\"bidPrice\"),\n\tconfigurations: []*configurationProperty{\n\t\t&configurationProperty{\n\t\t\tclassification: jsii.String(\"classification\"),\n\t\t\tconfigurations: []*configurationProperty{\n\t\t\t\tconfigurationProperty_,\n\t\t\t},\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"propertiesKey\": jsii.String(\"properties\"),\n\t\t\t},\n\t\t},\n\t},\n\tebsConfiguration: &ebsConfigurationProperty{\n\t\tebsBlockDeviceConfigs: []ebsBlockDeviceConfigProperty{\n\t\t\t&ebsBlockDeviceConfigProperty{\n\t\t\t\tvolumeSpecification: &volumeSpecificationProperty{\n\t\t\t\t\tvolumeSize: size,\n\t\t\t\t\tvolumeType: stepfunctions_tasks.*emrCreateCluster.ebsBlockDeviceVolumeType_GP2,\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tiops: jsii.Number(123),\n\t\t\t\t},\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tvolumesPerInstance: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tebsOptimized: jsii.Boolean(false),\n\t},\n\tmarket: stepfunctions_tasks.*emrCreateCluster.*instanceMarket_ON_DEMAND,\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const configurationProperty_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty;\ndeclare const size: cdk.Size;\nconst instanceGroupConfigProperty: stepfunctions_tasks.EmrCreateCluster.InstanceGroupConfigProperty = {\n  instanceCount: 123,\n  instanceRole: stepfunctions_tasks.EmrCreateCluster.InstanceRoleType.MASTER,\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  autoScalingPolicy: {\n    constraints: {\n      maxCapacity: 123,\n      minCapacity: 123,\n    },\n    rules: [{\n      action: {\n        simpleScalingPolicyConfiguration: {\n          scalingAdjustment: 123,\n\n          // the properties below are optional\n          adjustmentType: stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n          coolDown: 123,\n        },\n\n        // the properties below are optional\n        market: stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND,\n      },\n      name: 'name',\n      trigger: {\n        cloudWatchAlarmDefinition: {\n          comparisonOperator: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n          metricName: 'metricName',\n          period: cdk.Duration.minutes(30),\n\n          // the properties below are optional\n          dimensions: [{\n            key: 'key',\n            value: 'value',\n          }],\n          evaluationPeriods: 123,\n          namespace: 'namespace',\n          statistic: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n          threshold: 123,\n          unit: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE,\n        },\n      },\n\n      // the properties below are optional\n      description: 'description',\n    }],\n  },\n  bidPrice: 'bidPrice',\n  configurations: [{\n    classification: 'classification',\n    configurations: [configurationProperty_],\n    properties: {\n      propertiesKey: 'properties',\n    },\n  }],\n  ebsConfiguration: {\n    ebsBlockDeviceConfigs: [{\n      volumeSpecification: {\n        volumeSize: size,\n        volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n        // the properties below are optional\n        iops: 123,\n      },\n\n      // the properties below are optional\n      volumesPerInstance: 123,\n    }],\n    ebsOptimized: false,\n  },\n  market: stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND,\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceGroupConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.AutoScalingPolicyProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator#GREATER_THAN_OR_EQUAL",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmStatistic",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmStatistic#SAMPLE_COUNT",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmUnit",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmUnit#NONE",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType#GP2",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsConfigurationProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceGroupConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceMarket",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceMarket#ON_DEMAND",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceRoleType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceRoleType#MASTER",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingActionProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingAdjustmentType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingAdjustmentType#CHANGE_IN_CAPACITY",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingConstraintsProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingTriggerProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.VolumeSpecificationProperty",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Size"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const configurationProperty_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty;\ndeclare const size: cdk.Size;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceGroupConfigProperty: stepfunctions_tasks.EmrCreateCluster.InstanceGroupConfigProperty = {\n  instanceCount: 123,\n  instanceRole: stepfunctions_tasks.EmrCreateCluster.InstanceRoleType.MASTER,\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  autoScalingPolicy: {\n    constraints: {\n      maxCapacity: 123,\n      minCapacity: 123,\n    },\n    rules: [{\n      action: {\n        simpleScalingPolicyConfiguration: {\n          scalingAdjustment: 123,\n\n          // the properties below are optional\n          adjustmentType: stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n          coolDown: 123,\n        },\n\n        // the properties below are optional\n        market: stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND,\n      },\n      name: 'name',\n      trigger: {\n        cloudWatchAlarmDefinition: {\n          comparisonOperator: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n          metricName: 'metricName',\n          period: cdk.Duration.minutes(30),\n\n          // the properties below are optional\n          dimensions: [{\n            key: 'key',\n            value: 'value',\n          }],\n          evaluationPeriods: 123,\n          namespace: 'namespace',\n          statistic: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n          threshold: 123,\n          unit: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE,\n        },\n      },\n\n      // the properties below are optional\n      description: 'description',\n    }],\n  },\n  bidPrice: 'bidPrice',\n  configurations: [{\n    classification: 'classification',\n    configurations: [configurationProperty_],\n    properties: {\n      propertiesKey: 'properties',\n    },\n  }],\n  ebsConfiguration: {\n    ebsBlockDeviceConfigs: [{\n      volumeSpecification: {\n        volumeSize: size,\n        volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n        // the properties below are optional\n        iops: 123,\n      },\n\n      // the properties below are optional\n      volumesPerInstance: 123,\n    }],\n    ebsOptimized: false,\n  },\n  market: stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND,\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 10,
        "10": 13,
        "75": 95,
        "91": 1,
        "130": 2,
        "153": 5,
        "169": 3,
        "192": 5,
        "193": 14,
        "194": 26,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "3a9bc72717847e09430e6f4e9438fee429b00523ff7db63c8c1fbcce30a2ab4e"
    },
    "4e6fb312a9068487aa63ce0938621ad0b470e44234483a33ae2beab408f0a89c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# configuration_property_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty\n# size: cdk.Size\n\ninstance_type_config_property = stepfunctions_tasks.EmrCreateCluster.InstanceTypeConfigProperty(\n    instance_type=\"instanceType\",\n\n    # the properties below are optional\n    bid_price=\"bidPrice\",\n    bid_price_as_percentage_of_on_demand_price=123,\n    configurations=[stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty(\n        classification=\"classification\",\n        configurations=[configuration_property_],\n        properties={\n            \"properties_key\": \"properties\"\n        }\n    )],\n    ebs_configuration=stepfunctions_tasks.EmrCreateCluster.EbsConfigurationProperty(\n        ebs_block_device_configs=[stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceConfigProperty(\n            volume_specification=stepfunctions_tasks.EmrCreateCluster.VolumeSpecificationProperty(\n                volume_size=size,\n                volume_type=stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n                # the properties below are optional\n                iops=123\n            ),\n\n            # the properties below are optional\n            volumes_per_instance=123\n        )],\n        ebs_optimized=False\n    ),\n    weighted_capacity=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nConfigurationProperty configurationProperty_;\nSize size;\nInstanceTypeConfigProperty instanceTypeConfigProperty = new InstanceTypeConfigProperty {\n    InstanceType = \"instanceType\",\n\n    // the properties below are optional\n    BidPrice = \"bidPrice\",\n    BidPriceAsPercentageOfOnDemandPrice = 123,\n    Configurations = new [] { new ConfigurationProperty {\n        Classification = \"classification\",\n        Configurations = new [] { configurationProperty_ },\n        Properties = new Dictionary<string, string> {\n            { \"propertiesKey\", \"properties\" }\n        }\n    } },\n    EbsConfiguration = new EbsConfigurationProperty {\n        EbsBlockDeviceConfigs = new [] { new EbsBlockDeviceConfigProperty {\n            VolumeSpecification = new VolumeSpecificationProperty {\n                VolumeSize = size,\n                VolumeType = EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n                // the properties below are optional\n                Iops = 123\n            },\n\n            // the properties below are optional\n            VolumesPerInstance = 123\n        } },\n        EbsOptimized = false\n    },\n    WeightedCapacity = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nConfigurationProperty configurationProperty_;\nSize size;\n\nInstanceTypeConfigProperty instanceTypeConfigProperty = InstanceTypeConfigProperty.builder()\n        .instanceType(\"instanceType\")\n\n        // the properties below are optional\n        .bidPrice(\"bidPrice\")\n        .bidPriceAsPercentageOfOnDemandPrice(123)\n        .configurations(List.of(ConfigurationProperty.builder()\n                .classification(\"classification\")\n                .configurations(List.of(configurationProperty_))\n                .properties(Map.of(\n                        \"propertiesKey\", \"properties\"))\n                .build()))\n        .ebsConfiguration(EbsConfigurationProperty.builder()\n                .ebsBlockDeviceConfigs(List.of(EbsBlockDeviceConfigProperty.builder()\n                        .volumeSpecification(VolumeSpecificationProperty.builder()\n                                .volumeSize(size)\n                                .volumeType(EmrCreateCluster.getEbsBlockDeviceVolumeType().GP2)\n\n                                // the properties below are optional\n                                .iops(123)\n                                .build())\n\n                        // the properties below are optional\n                        .volumesPerInstance(123)\n                        .build()))\n                .ebsOptimized(false)\n                .build())\n        .weightedCapacity(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar configurationProperty_ configurationProperty\nvar size size\ninstanceTypeConfigProperty := &instanceTypeConfigProperty{\n\tinstanceType: jsii.String(\"instanceType\"),\n\n\t// the properties below are optional\n\tbidPrice: jsii.String(\"bidPrice\"),\n\tbidPriceAsPercentageOfOnDemandPrice: jsii.Number(123),\n\tconfigurations: []*configurationProperty{\n\t\t&configurationProperty{\n\t\t\tclassification: jsii.String(\"classification\"),\n\t\t\tconfigurations: []*configurationProperty{\n\t\t\t\tconfigurationProperty_,\n\t\t\t},\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"propertiesKey\": jsii.String(\"properties\"),\n\t\t\t},\n\t\t},\n\t},\n\tebsConfiguration: &ebsConfigurationProperty{\n\t\tebsBlockDeviceConfigs: []ebsBlockDeviceConfigProperty{\n\t\t\t&ebsBlockDeviceConfigProperty{\n\t\t\t\tvolumeSpecification: &volumeSpecificationProperty{\n\t\t\t\t\tvolumeSize: size,\n\t\t\t\t\tvolumeType: stepfunctions_tasks.emrCreateCluster.ebsBlockDeviceVolumeType_GP2,\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tiops: jsii.Number(123),\n\t\t\t\t},\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tvolumesPerInstance: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tebsOptimized: jsii.Boolean(false),\n\t},\n\tweightedCapacity: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const configurationProperty_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty;\ndeclare const size: cdk.Size;\nconst instanceTypeConfigProperty: stepfunctions_tasks.EmrCreateCluster.InstanceTypeConfigProperty = {\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  bidPrice: 'bidPrice',\n  bidPriceAsPercentageOfOnDemandPrice: 123,\n  configurations: [{\n    classification: 'classification',\n    configurations: [configurationProperty_],\n    properties: {\n      propertiesKey: 'properties',\n    },\n  }],\n  ebsConfiguration: {\n    ebsBlockDeviceConfigs: [{\n      volumeSpecification: {\n        volumeSize: size,\n        volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n        // the properties below are optional\n        iops: 123,\n      },\n\n      // the properties below are optional\n      volumesPerInstance: 123,\n    }],\n    ebsOptimized: false,\n  },\n  weightedCapacity: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceTypeConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType#GP2",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsConfigurationProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceTypeConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.VolumeSpecificationProperty",
        "@aws-cdk/core.Size"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const configurationProperty_: stepfunctions_tasks.EmrCreateCluster.ConfigurationProperty;\ndeclare const size: cdk.Size;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceTypeConfigProperty: stepfunctions_tasks.EmrCreateCluster.InstanceTypeConfigProperty = {\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  bidPrice: 'bidPrice',\n  bidPriceAsPercentageOfOnDemandPrice: 123,\n  configurations: [{\n    classification: 'classification',\n    configurations: [configurationProperty_],\n    properties: {\n      propertiesKey: 'properties',\n    },\n  }],\n  ebsConfiguration: {\n    ebsBlockDeviceConfigs: [{\n      volumeSpecification: {\n        volumeSize: size,\n        volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n        // the properties below are optional\n        iops: 123,\n      },\n\n      // the properties below are optional\n      volumesPerInstance: 123,\n    }],\n    ebsOptimized: false,\n  },\n  weightedCapacity: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 6,
        "75": 36,
        "91": 1,
        "130": 2,
        "153": 5,
        "169": 3,
        "192": 3,
        "193": 6,
        "194": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "cb0c8b4000e664f46a690a71c35f9e733c74f16f6be6334bf361830edf964f02"
    },
    "546d93fc60de4f41a9b6038bb555952cfc713664ffd8a8947202593ea2af121c": {
      "translations": {
        "python": {
          "source": "cluster_role = iam.Role(self, \"ClusterRole\",\n    assumed_by=iam.ServicePrincipal(\"ec2.amazonaws.com\")\n)\n\nservice_role = iam.Role(self, \"ServiceRole\",\n    assumed_by=iam.ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n)\n\nauto_scaling_role = iam.Role(self, \"AutoScalingRole\",\n    assumed_by=iam.ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n)\n\nauto_scaling_role.assume_role_policy.add_statements(\n    iam.PolicyStatement(\n        effect=iam.Effect.ALLOW,\n        principals=[\n            iam.ServicePrincipal(\"application-autoscaling.amazonaws.com\")\n        ],\n        actions=[\"sts:AssumeRole\"\n        ]\n    ))\n\ntasks.EmrCreateCluster(self, \"Create Cluster\",\n    instances=tasks.EmrCreateCluster.InstancesConfigProperty(),\n    cluster_role=cluster_role,\n    name=sfn.TaskInput.from_json_path_at(\"$.ClusterName\").value,\n    service_role=service_role,\n    auto_scaling_role=auto_scaling_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Role clusterRole = new Role(this, \"ClusterRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"ec2.amazonaws.com\")\n});\n\nRole serviceRole = new Role(this, \"ServiceRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n});\n\nRole autoScalingRole = new Role(this, \"AutoScalingRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n});\n\nautoScalingRole.AssumeRolePolicy.AddStatements(\nnew PolicyStatement(new PolicyStatementProps {\n    Effect = Effect.ALLOW,\n    Principals = new [] {\n        new ServicePrincipal(\"application-autoscaling.amazonaws.com\") },\n    Actions = new [] { \"sts:AssumeRole\" }\n}));\n\nnew EmrCreateCluster(this, \"Create Cluster\", new EmrCreateClusterProps {\n    Instances = new InstancesConfigProperty { },\n    ClusterRole = clusterRole,\n    Name = TaskInput.FromJsonPathAt(\"$.ClusterName\").Value,\n    ServiceRole = serviceRole,\n    AutoScalingRole = autoScalingRole\n});",
          "version": "1"
        },
        "java": {
          "source": "Role clusterRole = Role.Builder.create(this, \"ClusterRole\")\n        .assumedBy(new ServicePrincipal(\"ec2.amazonaws.com\"))\n        .build();\n\nRole serviceRole = Role.Builder.create(this, \"ServiceRole\")\n        .assumedBy(new ServicePrincipal(\"elasticmapreduce.amazonaws.com\"))\n        .build();\n\nRole autoScalingRole = Role.Builder.create(this, \"AutoScalingRole\")\n        .assumedBy(new ServicePrincipal(\"elasticmapreduce.amazonaws.com\"))\n        .build();\n\nautoScalingRole.assumeRolePolicy.addStatements(\nPolicyStatement.Builder.create()\n        .effect(Effect.ALLOW)\n        .principals(List.of(\n            new ServicePrincipal(\"application-autoscaling.amazonaws.com\")))\n        .actions(List.of(\"sts:AssumeRole\"))\n        .build());\n\nEmrCreateCluster.Builder.create(this, \"Create Cluster\")\n        .instances(InstancesConfigProperty.builder().build())\n        .clusterRole(clusterRole)\n        .name(TaskInput.fromJsonPathAt(\"$.ClusterName\").getValue())\n        .serviceRole(serviceRole)\n        .autoScalingRole(autoScalingRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "clusterRole := iam.NewRole(this, jsii.String(\"ClusterRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"ec2.amazonaws.com\")),\n})\n\nserviceRole := iam.NewRole(this, jsii.String(\"ServiceRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"elasticmapreduce.amazonaws.com\")),\n})\n\nautoScalingRole := iam.NewRole(this, jsii.String(\"AutoScalingRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"elasticmapreduce.amazonaws.com\")),\n})\n\nautoScalingRole.assumeRolePolicy.addStatements(\niam.NewPolicyStatement(&policyStatementProps{\n\teffect: iam.effect_ALLOW,\n\tprincipals: []iPrincipal{\n\t\tiam.NewServicePrincipal(jsii.String(\"application-autoscaling.amazonaws.com\")),\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"sts:AssumeRole\"),\n\t},\n}))\n\ntasks.NewEmrCreateCluster(this, jsii.String(\"Create Cluster\"), &emrCreateClusterProps{\n\tinstances: &instancesConfigProperty{\n\t},\n\tclusterRole: clusterRole,\n\tname: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.ClusterName\")).value,\n\tserviceRole: serviceRole,\n\tautoScalingRole: autoScalingRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const clusterRole = new iam.Role(this, 'ClusterRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\n});\n\nconst serviceRole = new iam.Role(this, 'ServiceRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nconst autoScalingRole = new iam.Role(this, 'AutoScalingRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nautoScalingRole.assumeRolePolicy?.addStatements(\n  new iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    principals: [\n      new iam.ServicePrincipal('application-autoscaling.amazonaws.com'),\n    ],\n    actions: [\n      'sts:AssumeRole',\n    ],\n  }));\n)\n\nnew tasks.EmrCreateCluster(this, 'Create Cluster', {\n  instances: {},\n  clusterRole,\n  name: sfn.TaskInput.fromJsonPathAt('$.ClusterName').value,\n  serviceRole,\n  autoScalingRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstancesConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.PolicyDocument#addStatements",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#assumeRolePolicy",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstancesConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst clusterRole = new iam.Role(this, 'ClusterRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\n});\n\nconst serviceRole = new iam.Role(this, 'ServiceRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nconst autoScalingRole = new iam.Role(this, 'AutoScalingRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nautoScalingRole.assumeRolePolicy?.addStatements(\n  new iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    principals: [\n      new iam.ServicePrincipal('application-autoscaling.amazonaws.com'),\n    ],\n    actions: [\n      'sts:AssumeRole',\n    ],\n  }));\n\nnew tasks.EmrCreateCluster(this, 'Create Cluster', {\n  instances: {},\n  clusterRole,\n  name: sfn.TaskInput.fromJsonPathAt('$.ClusterName').value,\n  serviceRole,\n  autoScalingRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "28": 1,
        "75": 42,
        "104": 4,
        "192": 2,
        "193": 6,
        "194": 16,
        "196": 2,
        "197": 9,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 3
      },
      "fqnsFingerprint": "81c9e7f7be3c08a57177a6554e427664735d28805b9d00b3c6c8eb88af4f7362"
    },
    "e8311590c09e4569ce4ef7db4cce854b03907671a334fc05420258c5247b2a06": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nkerberos_attributes_property = stepfunctions_tasks.EmrCreateCluster.KerberosAttributesProperty(\n    realm=\"realm\",\n\n    # the properties below are optional\n    ad_domain_join_password=\"adDomainJoinPassword\",\n    ad_domain_join_user=\"adDomainJoinUser\",\n    cross_realm_trust_principal_password=\"crossRealmTrustPrincipalPassword\",\n    kdc_admin_password=\"kdcAdminPassword\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nKerberosAttributesProperty kerberosAttributesProperty = new KerberosAttributesProperty {\n    Realm = \"realm\",\n\n    // the properties below are optional\n    AdDomainJoinPassword = \"adDomainJoinPassword\",\n    AdDomainJoinUser = \"adDomainJoinUser\",\n    CrossRealmTrustPrincipalPassword = \"crossRealmTrustPrincipalPassword\",\n    KdcAdminPassword = \"kdcAdminPassword\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nKerberosAttributesProperty kerberosAttributesProperty = KerberosAttributesProperty.builder()\n        .realm(\"realm\")\n\n        // the properties below are optional\n        .adDomainJoinPassword(\"adDomainJoinPassword\")\n        .adDomainJoinUser(\"adDomainJoinUser\")\n        .crossRealmTrustPrincipalPassword(\"crossRealmTrustPrincipalPassword\")\n        .kdcAdminPassword(\"kdcAdminPassword\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nkerberosAttributesProperty := &kerberosAttributesProperty{\n\trealm: jsii.String(\"realm\"),\n\n\t// the properties below are optional\n\tadDomainJoinPassword: jsii.String(\"adDomainJoinPassword\"),\n\tadDomainJoinUser: jsii.String(\"adDomainJoinUser\"),\n\tcrossRealmTrustPrincipalPassword: jsii.String(\"crossRealmTrustPrincipalPassword\"),\n\tkdcAdminPassword: jsii.String(\"kdcAdminPassword\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst kerberosAttributesProperty: stepfunctions_tasks.EmrCreateCluster.KerberosAttributesProperty = {\n  realm: 'realm',\n\n  // the properties below are optional\n  adDomainJoinPassword: 'adDomainJoinPassword',\n  adDomainJoinUser: 'adDomainJoinUser',\n  crossRealmTrustPrincipalPassword: 'crossRealmTrustPrincipalPassword',\n  kdcAdminPassword: 'kdcAdminPassword',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.KerberosAttributesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.KerberosAttributesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst kerberosAttributesProperty: stepfunctions_tasks.EmrCreateCluster.KerberosAttributesProperty = {\n  realm: 'realm',\n\n  // the properties below are optional\n  adDomainJoinPassword: 'adDomainJoinPassword',\n  adDomainJoinUser: 'adDomainJoinUser',\n  crossRealmTrustPrincipalPassword: 'crossRealmTrustPrincipalPassword',\n  kdcAdminPassword: 'kdcAdminPassword',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "94acde4a6036c60bda8f5975d17083f00ca9308d0587feab582ed21c48290f8a"
    },
    "cd03244a9d8513ee0f09c8ea858a22f4f8e5dda88e69214997fb20b53201fa04": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nmetric_dimension_property = stepfunctions_tasks.EmrCreateCluster.MetricDimensionProperty(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nMetricDimensionProperty metricDimensionProperty = new MetricDimensionProperty {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nMetricDimensionProperty metricDimensionProperty = MetricDimensionProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nmetricDimensionProperty := &metricDimensionProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst metricDimensionProperty: stepfunctions_tasks.EmrCreateCluster.MetricDimensionProperty = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.MetricDimensionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.MetricDimensionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricDimensionProperty: stepfunctions_tasks.EmrCreateCluster.MetricDimensionProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "28acd7828e58f0a61dd7803d203f63ea2b56220a7d595aa1f3b759d97767f955"
    },
    "35d748aebbfa1277addbb149789ac6917e91c18c1e97f79ed3f7536d0c600127": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nplacement_type_property = stepfunctions_tasks.EmrCreateCluster.PlacementTypeProperty(\n    availability_zone=\"availabilityZone\",\n    availability_zones=[\"availabilityZones\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nPlacementTypeProperty placementTypeProperty = new PlacementTypeProperty {\n    AvailabilityZone = \"availabilityZone\",\n    AvailabilityZones = new [] { \"availabilityZones\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nPlacementTypeProperty placementTypeProperty = PlacementTypeProperty.builder()\n        .availabilityZone(\"availabilityZone\")\n        .availabilityZones(List.of(\"availabilityZones\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nplacementTypeProperty := &placementTypeProperty{\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tavailabilityZones: []*string{\n\t\tjsii.String(\"availabilityZones\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst placementTypeProperty: stepfunctions_tasks.EmrCreateCluster.PlacementTypeProperty = {\n  availabilityZone: 'availabilityZone',\n  availabilityZones: ['availabilityZones'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.PlacementTypeProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.PlacementTypeProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst placementTypeProperty: stepfunctions_tasks.EmrCreateCluster.PlacementTypeProperty = {\n  availabilityZone: 'availabilityZone',\n  availabilityZones: ['availabilityZones'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a07720db2e0a4a7743903e29be0d994f7060bd5d7a4673e8021458ebd9b5e768"
    },
    "87fd73c3605edbc4da4d47d18090f9612288f932336083e575ae0ab84649f68b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nscaling_action_property = stepfunctions_tasks.EmrCreateCluster.ScalingActionProperty(\n    simple_scaling_policy_configuration=stepfunctions_tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty(\n        scaling_adjustment=123,\n\n        # the properties below are optional\n        adjustment_type=stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n        cool_down=123\n    ),\n\n    # the properties below are optional\n    market=stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nScalingActionProperty scalingActionProperty = new ScalingActionProperty {\n    SimpleScalingPolicyConfiguration = new SimpleScalingPolicyConfigurationProperty {\n        ScalingAdjustment = 123,\n\n        // the properties below are optional\n        AdjustmentType = EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n        CoolDown = 123\n    },\n\n    // the properties below are optional\n    Market = EmrCreateCluster.InstanceMarket.ON_DEMAND\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nScalingActionProperty scalingActionProperty = ScalingActionProperty.builder()\n        .simpleScalingPolicyConfiguration(SimpleScalingPolicyConfigurationProperty.builder()\n                .scalingAdjustment(123)\n\n                // the properties below are optional\n                .adjustmentType(EmrCreateCluster.getScalingAdjustmentType().CHANGE_IN_CAPACITY)\n                .coolDown(123)\n                .build())\n\n        // the properties below are optional\n        .market(EmrCreateCluster.getInstanceMarket().ON_DEMAND)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nscalingActionProperty := &scalingActionProperty{\n\tsimpleScalingPolicyConfiguration: &simpleScalingPolicyConfigurationProperty{\n\t\tscalingAdjustment: jsii.Number(123),\n\n\t\t// the properties below are optional\n\t\tadjustmentType: stepfunctions_tasks.emrCreateCluster.scalingAdjustmentType_CHANGE_IN_CAPACITY,\n\t\tcoolDown: jsii.Number(123),\n\t},\n\n\t// the properties below are optional\n\tmarket: stepfunctions_tasks.*emrCreateCluster.instanceMarket_ON_DEMAND,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst scalingActionProperty: stepfunctions_tasks.EmrCreateCluster.ScalingActionProperty = {\n  simpleScalingPolicyConfiguration: {\n    scalingAdjustment: 123,\n\n    // the properties below are optional\n    adjustmentType: stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n    coolDown: 123,\n  },\n\n  // the properties below are optional\n  market: stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingActionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceMarket",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceMarket#ON_DEMAND",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingActionProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingAdjustmentType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingAdjustmentType#CHANGE_IN_CAPACITY",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scalingActionProperty: stepfunctions_tasks.EmrCreateCluster.ScalingActionProperty = {\n  simpleScalingPolicyConfiguration: {\n    scalingAdjustment: 123,\n\n    // the properties below are optional\n    adjustmentType: stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n    coolDown: 123,\n  },\n\n  // the properties below are optional\n  market: stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 18,
        "153": 2,
        "169": 1,
        "193": 2,
        "194": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ba7d9b125c8a5ef0568370ef5e011aed7a7e9b2d0625241b4a9d9408e9ffec5e"
    },
    "d625b5a055185e18d3e1476a8b12ae8fc045eb10bf79c200a4c268b28ee4d424": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nscaling_constraints_property = stepfunctions_tasks.EmrCreateCluster.ScalingConstraintsProperty(\n    max_capacity=123,\n    min_capacity=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nScalingConstraintsProperty scalingConstraintsProperty = new ScalingConstraintsProperty {\n    MaxCapacity = 123,\n    MinCapacity = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nScalingConstraintsProperty scalingConstraintsProperty = ScalingConstraintsProperty.builder()\n        .maxCapacity(123)\n        .minCapacity(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nscalingConstraintsProperty := &scalingConstraintsProperty{\n\tmaxCapacity: jsii.Number(123),\n\tminCapacity: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst scalingConstraintsProperty: stepfunctions_tasks.EmrCreateCluster.ScalingConstraintsProperty = {\n  maxCapacity: 123,\n  minCapacity: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingConstraintsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingConstraintsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scalingConstraintsProperty: stepfunctions_tasks.EmrCreateCluster.ScalingConstraintsProperty = {\n  maxCapacity: 123,\n  minCapacity: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "73822db1ba4c8e68c9903bec89fd9b8f8d41dbf5e6aff82ae2c4a48c5714bc68"
    },
    "d905fe452d071b9bb0fe57912bb62f900b6b30a22fd0bc1f03a6b81c0fc8c9f3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\nscaling_rule_property = stepfunctions_tasks.EmrCreateCluster.ScalingRuleProperty(\n    action=stepfunctions_tasks.EmrCreateCluster.ScalingActionProperty(\n        simple_scaling_policy_configuration=stepfunctions_tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty(\n            scaling_adjustment=123,\n\n            # the properties below are optional\n            adjustment_type=stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n            cool_down=123\n        ),\n\n        # the properties below are optional\n        market=stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND\n    ),\n    name=\"name\",\n    trigger=stepfunctions_tasks.EmrCreateCluster.ScalingTriggerProperty(\n        cloud_watch_alarm_definition=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty(\n            comparison_operator=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n            metric_name=\"metricName\",\n            period=cdk.Duration.minutes(30),\n\n            # the properties below are optional\n            dimensions=[stepfunctions_tasks.EmrCreateCluster.MetricDimensionProperty(\n                key=\"key\",\n                value=\"value\"\n            )],\n            evaluation_periods=123,\n            namespace=\"namespace\",\n            statistic=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n            threshold=123,\n            unit=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE\n        )\n    ),\n\n    # the properties below are optional\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\nScalingRuleProperty scalingRuleProperty = new ScalingRuleProperty {\n    Action = new ScalingActionProperty {\n        SimpleScalingPolicyConfiguration = new SimpleScalingPolicyConfigurationProperty {\n            ScalingAdjustment = 123,\n\n            // the properties below are optional\n            AdjustmentType = EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n            CoolDown = 123\n        },\n\n        // the properties below are optional\n        Market = EmrCreateCluster.InstanceMarket.ON_DEMAND\n    },\n    Name = \"name\",\n    Trigger = new ScalingTriggerProperty {\n        CloudWatchAlarmDefinition = new CloudWatchAlarmDefinitionProperty {\n            ComparisonOperator = EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n            MetricName = \"metricName\",\n            Period = Duration.Minutes(30),\n\n            // the properties below are optional\n            Dimensions = new [] { new MetricDimensionProperty {\n                Key = \"key\",\n                Value = \"value\"\n            } },\n            EvaluationPeriods = 123,\n            Namespace = \"namespace\",\n            Statistic = EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n            Threshold = 123,\n            Unit = EmrCreateCluster.CloudWatchAlarmUnit.NONE\n        }\n    },\n\n    // the properties below are optional\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nScalingRuleProperty scalingRuleProperty = ScalingRuleProperty.builder()\n        .action(ScalingActionProperty.builder()\n                .simpleScalingPolicyConfiguration(SimpleScalingPolicyConfigurationProperty.builder()\n                        .scalingAdjustment(123)\n\n                        // the properties below are optional\n                        .adjustmentType(EmrCreateCluster.getScalingAdjustmentType().CHANGE_IN_CAPACITY)\n                        .coolDown(123)\n                        .build())\n\n                // the properties below are optional\n                .market(EmrCreateCluster.getInstanceMarket().ON_DEMAND)\n                .build())\n        .name(\"name\")\n        .trigger(ScalingTriggerProperty.builder()\n                .cloudWatchAlarmDefinition(CloudWatchAlarmDefinitionProperty.builder()\n                        .comparisonOperator(EmrCreateCluster.getCloudWatchAlarmComparisonOperator().GREATER_THAN_OR_EQUAL)\n                        .metricName(\"metricName\")\n                        .period(Duration.minutes(30))\n\n                        // the properties below are optional\n                        .dimensions(List.of(MetricDimensionProperty.builder()\n                                .key(\"key\")\n                                .value(\"value\")\n                                .build()))\n                        .evaluationPeriods(123)\n                        .namespace(\"namespace\")\n                        .statistic(EmrCreateCluster.getCloudWatchAlarmStatistic().SAMPLE_COUNT)\n                        .threshold(123)\n                        .unit(EmrCreateCluster.getCloudWatchAlarmUnit().NONE)\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nscalingRuleProperty := &scalingRuleProperty{\n\taction: &scalingActionProperty{\n\t\tsimpleScalingPolicyConfiguration: &simpleScalingPolicyConfigurationProperty{\n\t\t\tscalingAdjustment: jsii.Number(123),\n\n\t\t\t// the properties below are optional\n\t\t\tadjustmentType: stepfunctions_tasks.emrCreateCluster.scalingAdjustmentType_CHANGE_IN_CAPACITY,\n\t\t\tcoolDown: jsii.Number(123),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tmarket: stepfunctions_tasks.*emrCreateCluster.instanceMarket_ON_DEMAND,\n\t},\n\tname: jsii.String(\"name\"),\n\ttrigger: &scalingTriggerProperty{\n\t\tcloudWatchAlarmDefinition: &cloudWatchAlarmDefinitionProperty{\n\t\t\tcomparisonOperator: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmComparisonOperator_GREATER_THAN_OR_EQUAL,\n\t\t\tmetricName: jsii.String(\"metricName\"),\n\t\t\tperiod: cdk.duration.minutes(jsii.Number(30)),\n\n\t\t\t// the properties below are optional\n\t\t\tdimensions: []metricDimensionProperty{\n\t\t\t\t&metricDimensionProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tevaluationPeriods: jsii.Number(123),\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\tstatistic: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmStatistic_SAMPLE_COUNT,\n\t\t\tthreshold: jsii.Number(123),\n\t\t\tunit: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmUnit_NONE,\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\nconst scalingRuleProperty: stepfunctions_tasks.EmrCreateCluster.ScalingRuleProperty = {\n  action: {\n    simpleScalingPolicyConfiguration: {\n      scalingAdjustment: 123,\n\n      // the properties below are optional\n      adjustmentType: stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n      coolDown: 123,\n    },\n\n    // the properties below are optional\n    market: stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND,\n  },\n  name: 'name',\n  trigger: {\n    cloudWatchAlarmDefinition: {\n      comparisonOperator: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n      metricName: 'metricName',\n      period: cdk.Duration.minutes(30),\n\n      // the properties below are optional\n      dimensions: [{\n        key: 'key',\n        value: 'value',\n      }],\n      evaluationPeriods: 123,\n      namespace: 'namespace',\n      statistic: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n      threshold: 123,\n      unit: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE,\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingRuleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator#GREATER_THAN_OR_EQUAL",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmStatistic",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmStatistic#SAMPLE_COUNT",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmUnit",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmUnit#NONE",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceMarket",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstanceMarket#ON_DEMAND",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingActionProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingAdjustmentType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingAdjustmentType#CHANGE_IN_CAPACITY",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingRuleProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingTriggerProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scalingRuleProperty: stepfunctions_tasks.EmrCreateCluster.ScalingRuleProperty = {\n  action: {\n    simpleScalingPolicyConfiguration: {\n      scalingAdjustment: 123,\n\n      // the properties below are optional\n      adjustmentType: stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n      coolDown: 123,\n    },\n\n    // the properties below are optional\n    market: stepfunctions_tasks.EmrCreateCluster.InstanceMarket.ON_DEMAND,\n  },\n  name: 'name',\n  trigger: {\n    cloudWatchAlarmDefinition: {\n      comparisonOperator: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n      metricName: 'metricName',\n      period: cdk.Duration.minutes(30),\n\n      // the properties below are optional\n      dimensions: [{\n        key: 'key',\n        value: 'value',\n      }],\n      evaluationPeriods: 123,\n      namespace: 'namespace',\n      statistic: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n      threshold: 123,\n      unit: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE,\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 5,
        "10": 8,
        "75": 50,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 6,
        "194": 17,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "ff5dd893d794f25951c07e8428899ff067ccde0c1d170b3486d73bb061ecf2e6"
    },
    "415fb2e812de9f1116d7028772e6aca0e3180d967a21dfc67da4162bcbd37502": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\nscaling_trigger_property = stepfunctions_tasks.EmrCreateCluster.ScalingTriggerProperty(\n    cloud_watch_alarm_definition=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty(\n        comparison_operator=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n        metric_name=\"metricName\",\n        period=cdk.Duration.minutes(30),\n\n        # the properties below are optional\n        dimensions=[stepfunctions_tasks.EmrCreateCluster.MetricDimensionProperty(\n            key=\"key\",\n            value=\"value\"\n        )],\n        evaluation_periods=123,\n        namespace=\"namespace\",\n        statistic=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n        threshold=123,\n        unit=stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\nScalingTriggerProperty scalingTriggerProperty = new ScalingTriggerProperty {\n    CloudWatchAlarmDefinition = new CloudWatchAlarmDefinitionProperty {\n        ComparisonOperator = EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n        MetricName = \"metricName\",\n        Period = Duration.Minutes(30),\n\n        // the properties below are optional\n        Dimensions = new [] { new MetricDimensionProperty {\n            Key = \"key\",\n            Value = \"value\"\n        } },\n        EvaluationPeriods = 123,\n        Namespace = \"namespace\",\n        Statistic = EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n        Threshold = 123,\n        Unit = EmrCreateCluster.CloudWatchAlarmUnit.NONE\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nScalingTriggerProperty scalingTriggerProperty = ScalingTriggerProperty.builder()\n        .cloudWatchAlarmDefinition(CloudWatchAlarmDefinitionProperty.builder()\n                .comparisonOperator(EmrCreateCluster.getCloudWatchAlarmComparisonOperator().GREATER_THAN_OR_EQUAL)\n                .metricName(\"metricName\")\n                .period(Duration.minutes(30))\n\n                // the properties below are optional\n                .dimensions(List.of(MetricDimensionProperty.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .evaluationPeriods(123)\n                .namespace(\"namespace\")\n                .statistic(EmrCreateCluster.getCloudWatchAlarmStatistic().SAMPLE_COUNT)\n                .threshold(123)\n                .unit(EmrCreateCluster.getCloudWatchAlarmUnit().NONE)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nscalingTriggerProperty := &scalingTriggerProperty{\n\tcloudWatchAlarmDefinition: &cloudWatchAlarmDefinitionProperty{\n\t\tcomparisonOperator: stepfunctions_tasks.emrCreateCluster.cloudWatchAlarmComparisonOperator_GREATER_THAN_OR_EQUAL,\n\t\tmetricName: jsii.String(\"metricName\"),\n\t\tperiod: cdk.duration.minutes(jsii.Number(30)),\n\n\t\t// the properties below are optional\n\t\tdimensions: []metricDimensionProperty{\n\t\t\t&metricDimensionProperty{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\tevaluationPeriods: jsii.Number(123),\n\t\tnamespace: jsii.String(\"namespace\"),\n\t\tstatistic: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmStatistic_SAMPLE_COUNT,\n\t\tthreshold: jsii.Number(123),\n\t\tunit: stepfunctions_tasks.*emrCreateCluster.cloudWatchAlarmUnit_NONE,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\nconst scalingTriggerProperty: stepfunctions_tasks.EmrCreateCluster.ScalingTriggerProperty = {\n  cloudWatchAlarmDefinition: {\n    comparisonOperator: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n    metricName: 'metricName',\n    period: cdk.Duration.minutes(30),\n\n    // the properties below are optional\n    dimensions: [{\n      key: 'key',\n      value: 'value',\n    }],\n    evaluationPeriods: 123,\n    namespace: 'namespace',\n    statistic: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n    threshold: 123,\n    unit: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingTriggerProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator#GREATER_THAN_OR_EQUAL",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmDefinitionProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmStatistic",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmStatistic#SAMPLE_COUNT",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmUnit",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.CloudWatchAlarmUnit#NONE",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingTriggerProperty",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scalingTriggerProperty: stepfunctions_tasks.EmrCreateCluster.ScalingTriggerProperty = {\n  cloudWatchAlarmDefinition: {\n    comparisonOperator: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmComparisonOperator.GREATER_THAN_OR_EQUAL,\n    metricName: 'metricName',\n    period: cdk.Duration.minutes(30),\n\n    // the properties below are optional\n    dimensions: [{\n      key: 'key',\n      value: 'value',\n    }],\n    evaluationPeriods: 123,\n    namespace: 'namespace',\n    statistic: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmStatistic.SAMPLE_COUNT,\n    threshold: 123,\n    unit: stepfunctions_tasks.EmrCreateCluster.CloudWatchAlarmUnit.NONE,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 33,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 11,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "8aaf0bf18eae631e68e92966555b1f7d819877f69c1370c910df0141b66ffe63"
    },
    "c40912293a66115e637da67bc2412bd245f32558f74621d823ab38bc81d930a0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nscript_bootstrap_action_config_property = stepfunctions_tasks.EmrCreateCluster.ScriptBootstrapActionConfigProperty(\n    path=\"path\",\n\n    # the properties below are optional\n    args=[\"args\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nScriptBootstrapActionConfigProperty scriptBootstrapActionConfigProperty = new ScriptBootstrapActionConfigProperty {\n    Path = \"path\",\n\n    // the properties below are optional\n    Args = new [] { \"args\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nScriptBootstrapActionConfigProperty scriptBootstrapActionConfigProperty = ScriptBootstrapActionConfigProperty.builder()\n        .path(\"path\")\n\n        // the properties below are optional\n        .args(List.of(\"args\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nscriptBootstrapActionConfigProperty := &scriptBootstrapActionConfigProperty{\n\tpath: jsii.String(\"path\"),\n\n\t// the properties below are optional\n\targs: []*string{\n\t\tjsii.String(\"args\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst scriptBootstrapActionConfigProperty: stepfunctions_tasks.EmrCreateCluster.ScriptBootstrapActionConfigProperty = {\n  path: 'path',\n\n  // the properties below are optional\n  args: ['args'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScriptBootstrapActionConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScriptBootstrapActionConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scriptBootstrapActionConfigProperty: stepfunctions_tasks.EmrCreateCluster.ScriptBootstrapActionConfigProperty = {\n  path: 'path',\n\n  // the properties below are optional\n  args: ['args'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0f5e64b701a59f2f923b52118eef2a508038431f1cf899a9a7704e325cd5dbc6"
    },
    "5856d8262fc59ce682c3b62e34da850c6ac6f48d067e53e8be963911a03b85cf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nsimple_scaling_policy_configuration_property = stepfunctions_tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty(\n    scaling_adjustment=123,\n\n    # the properties below are optional\n    adjustment_type=stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n    cool_down=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nSimpleScalingPolicyConfigurationProperty simpleScalingPolicyConfigurationProperty = new SimpleScalingPolicyConfigurationProperty {\n    ScalingAdjustment = 123,\n\n    // the properties below are optional\n    AdjustmentType = EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n    CoolDown = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nSimpleScalingPolicyConfigurationProperty simpleScalingPolicyConfigurationProperty = SimpleScalingPolicyConfigurationProperty.builder()\n        .scalingAdjustment(123)\n\n        // the properties below are optional\n        .adjustmentType(EmrCreateCluster.getScalingAdjustmentType().CHANGE_IN_CAPACITY)\n        .coolDown(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nsimpleScalingPolicyConfigurationProperty := &simpleScalingPolicyConfigurationProperty{\n\tscalingAdjustment: jsii.Number(123),\n\n\t// the properties below are optional\n\tadjustmentType: stepfunctions_tasks.emrCreateCluster.scalingAdjustmentType_CHANGE_IN_CAPACITY,\n\tcoolDown: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst simpleScalingPolicyConfigurationProperty: stepfunctions_tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty = {\n  scalingAdjustment: 123,\n\n  // the properties below are optional\n  adjustmentType: stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n  coolDown: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingAdjustmentType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.ScalingAdjustmentType#CHANGE_IN_CAPACITY",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst simpleScalingPolicyConfigurationProperty: stepfunctions_tasks.EmrCreateCluster.SimpleScalingPolicyConfigurationProperty = {\n  scalingAdjustment: 123,\n\n  // the properties below are optional\n  adjustmentType: stepfunctions_tasks.EmrCreateCluster.ScalingAdjustmentType.CHANGE_IN_CAPACITY,\n  coolDown: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 12,
        "153": 2,
        "169": 1,
        "193": 1,
        "194": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4717025701bb67e9953d7cf81079918c341bc4f978fd9579ec63f4c98a683e79"
    },
    "92f6ca78f91e07cf32a274e1d7b3bec49521ef5f3eaed330a88d113f383d384a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nspot_provisioning_specification_property = stepfunctions_tasks.EmrCreateCluster.SpotProvisioningSpecificationProperty(\n    timeout_action=stepfunctions_tasks.EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n    timeout_duration_minutes=123,\n\n    # the properties below are optional\n    allocation_strategy=stepfunctions_tasks.EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n    block_duration_minutes=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nSpotProvisioningSpecificationProperty spotProvisioningSpecificationProperty = new SpotProvisioningSpecificationProperty {\n    TimeoutAction = EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n    TimeoutDurationMinutes = 123,\n\n    // the properties below are optional\n    AllocationStrategy = EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n    BlockDurationMinutes = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nSpotProvisioningSpecificationProperty spotProvisioningSpecificationProperty = SpotProvisioningSpecificationProperty.builder()\n        .timeoutAction(EmrCreateCluster.getSpotTimeoutAction().SWITCH_TO_ON_DEMAND)\n        .timeoutDurationMinutes(123)\n\n        // the properties below are optional\n        .allocationStrategy(EmrCreateCluster.getSpotAllocationStrategy().CAPACITY_OPTIMIZED)\n        .blockDurationMinutes(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nspotProvisioningSpecificationProperty := &spotProvisioningSpecificationProperty{\n\ttimeoutAction: stepfunctions_tasks.emrCreateCluster.spotTimeoutAction_SWITCH_TO_ON_DEMAND,\n\ttimeoutDurationMinutes: jsii.Number(123),\n\n\t// the properties below are optional\n\tallocationStrategy: stepfunctions_tasks.*emrCreateCluster.spotAllocationStrategy_CAPACITY_OPTIMIZED,\n\tblockDurationMinutes: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst spotProvisioningSpecificationProperty: stepfunctions_tasks.EmrCreateCluster.SpotProvisioningSpecificationProperty = {\n  timeoutAction: stepfunctions_tasks.EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n  timeoutDurationMinutes: 123,\n\n  // the properties below are optional\n  allocationStrategy: stepfunctions_tasks.EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n  blockDurationMinutes: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotProvisioningSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotAllocationStrategy",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotAllocationStrategy#CAPACITY_OPTIMIZED",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotProvisioningSpecificationProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotTimeoutAction",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.SpotTimeoutAction#SWITCH_TO_ON_DEMAND"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst spotProvisioningSpecificationProperty: stepfunctions_tasks.EmrCreateCluster.SpotProvisioningSpecificationProperty = {\n  timeoutAction: stepfunctions_tasks.EmrCreateCluster.SpotTimeoutAction.SWITCH_TO_ON_DEMAND,\n  timeoutDurationMinutes: 123,\n\n  // the properties below are optional\n  allocationStrategy: stepfunctions_tasks.EmrCreateCluster.SpotAllocationStrategy.CAPACITY_OPTIMIZED,\n  blockDurationMinutes: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 17,
        "153": 2,
        "169": 1,
        "193": 1,
        "194": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "17e527f425d7beadaab0c70317fabb8f131f30f12951e0e02041b4bd2ddf8493"
    },
    "392d3b8ac3691aa78d3607fda4697056a02073295fe363eb9a87d26e430480d1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# size: cdk.Size\n\nvolume_specification_property = stepfunctions_tasks.EmrCreateCluster.VolumeSpecificationProperty(\n    volume_size=size,\n    volume_type=stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n    # the properties below are optional\n    iops=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nSize size;\nVolumeSpecificationProperty volumeSpecificationProperty = new VolumeSpecificationProperty {\n    VolumeSize = size,\n    VolumeType = EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n    // the properties below are optional\n    Iops = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nSize size;\n\nVolumeSpecificationProperty volumeSpecificationProperty = VolumeSpecificationProperty.builder()\n        .volumeSize(size)\n        .volumeType(EmrCreateCluster.getEbsBlockDeviceVolumeType().GP2)\n\n        // the properties below are optional\n        .iops(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar size size\nvolumeSpecificationProperty := &volumeSpecificationProperty{\n\tvolumeSize: size,\n\tvolumeType: stepfunctions_tasks.emrCreateCluster.ebsBlockDeviceVolumeType_GP2,\n\n\t// the properties below are optional\n\tiops: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const size: cdk.Size;\nconst volumeSpecificationProperty: stepfunctions_tasks.EmrCreateCluster.VolumeSpecificationProperty = {\n  volumeSize: size,\n  volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n  // the properties below are optional\n  iops: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.VolumeSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.EbsBlockDeviceVolumeType#GP2",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.VolumeSpecificationProperty",
        "@aws-cdk/core.Size"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const size: cdk.Size;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst volumeSpecificationProperty: stepfunctions_tasks.EmrCreateCluster.VolumeSpecificationProperty = {\n  volumeSize: size,\n  volumeType: stepfunctions_tasks.EmrCreateCluster.EbsBlockDeviceVolumeType.GP2,\n\n  // the properties below are optional\n  iops: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 17,
        "130": 1,
        "153": 3,
        "169": 2,
        "193": 1,
        "194": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0433ed497117e1ce58c824733656b5c57575a46f9f403194e0a1f58e85cec5c3"
    },
    "305bd1432dd0fb40bc75f9317ef3832a6d977646b74847b247fb5276cbcaa747": {
      "translations": {
        "python": {
          "source": "cluster_role = iam.Role(self, \"ClusterRole\",\n    assumed_by=iam.ServicePrincipal(\"ec2.amazonaws.com\")\n)\n\nservice_role = iam.Role(self, \"ServiceRole\",\n    assumed_by=iam.ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n)\n\nauto_scaling_role = iam.Role(self, \"AutoScalingRole\",\n    assumed_by=iam.ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n)\n\nauto_scaling_role.assume_role_policy.add_statements(\n    iam.PolicyStatement(\n        effect=iam.Effect.ALLOW,\n        principals=[\n            iam.ServicePrincipal(\"application-autoscaling.amazonaws.com\")\n        ],\n        actions=[\"sts:AssumeRole\"\n        ]\n    ))\n\ntasks.EmrCreateCluster(self, \"Create Cluster\",\n    instances=tasks.EmrCreateCluster.InstancesConfigProperty(),\n    cluster_role=cluster_role,\n    name=sfn.TaskInput.from_json_path_at(\"$.ClusterName\").value,\n    service_role=service_role,\n    auto_scaling_role=auto_scaling_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Role clusterRole = new Role(this, \"ClusterRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"ec2.amazonaws.com\")\n});\n\nRole serviceRole = new Role(this, \"ServiceRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n});\n\nRole autoScalingRole = new Role(this, \"AutoScalingRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"elasticmapreduce.amazonaws.com\")\n});\n\nautoScalingRole.AssumeRolePolicy.AddStatements(\nnew PolicyStatement(new PolicyStatementProps {\n    Effect = Effect.ALLOW,\n    Principals = new [] {\n        new ServicePrincipal(\"application-autoscaling.amazonaws.com\") },\n    Actions = new [] { \"sts:AssumeRole\" }\n}));\n\nnew EmrCreateCluster(this, \"Create Cluster\", new EmrCreateClusterProps {\n    Instances = new InstancesConfigProperty { },\n    ClusterRole = clusterRole,\n    Name = TaskInput.FromJsonPathAt(\"$.ClusterName\").Value,\n    ServiceRole = serviceRole,\n    AutoScalingRole = autoScalingRole\n});",
          "version": "1"
        },
        "java": {
          "source": "Role clusterRole = Role.Builder.create(this, \"ClusterRole\")\n        .assumedBy(new ServicePrincipal(\"ec2.amazonaws.com\"))\n        .build();\n\nRole serviceRole = Role.Builder.create(this, \"ServiceRole\")\n        .assumedBy(new ServicePrincipal(\"elasticmapreduce.amazonaws.com\"))\n        .build();\n\nRole autoScalingRole = Role.Builder.create(this, \"AutoScalingRole\")\n        .assumedBy(new ServicePrincipal(\"elasticmapreduce.amazonaws.com\"))\n        .build();\n\nautoScalingRole.assumeRolePolicy.addStatements(\nPolicyStatement.Builder.create()\n        .effect(Effect.ALLOW)\n        .principals(List.of(\n            new ServicePrincipal(\"application-autoscaling.amazonaws.com\")))\n        .actions(List.of(\"sts:AssumeRole\"))\n        .build());\n\nEmrCreateCluster.Builder.create(this, \"Create Cluster\")\n        .instances(InstancesConfigProperty.builder().build())\n        .clusterRole(clusterRole)\n        .name(TaskInput.fromJsonPathAt(\"$.ClusterName\").getValue())\n        .serviceRole(serviceRole)\n        .autoScalingRole(autoScalingRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "clusterRole := iam.NewRole(this, jsii.String(\"ClusterRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"ec2.amazonaws.com\")),\n})\n\nserviceRole := iam.NewRole(this, jsii.String(\"ServiceRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"elasticmapreduce.amazonaws.com\")),\n})\n\nautoScalingRole := iam.NewRole(this, jsii.String(\"AutoScalingRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"elasticmapreduce.amazonaws.com\")),\n})\n\nautoScalingRole.assumeRolePolicy.addStatements(\niam.NewPolicyStatement(&policyStatementProps{\n\teffect: iam.effect_ALLOW,\n\tprincipals: []iPrincipal{\n\t\tiam.NewServicePrincipal(jsii.String(\"application-autoscaling.amazonaws.com\")),\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"sts:AssumeRole\"),\n\t},\n}))\n\ntasks.NewEmrCreateCluster(this, jsii.String(\"Create Cluster\"), &emrCreateClusterProps{\n\tinstances: &instancesConfigProperty{\n\t},\n\tclusterRole: clusterRole,\n\tname: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.ClusterName\")).value,\n\tserviceRole: serviceRole,\n\tautoScalingRole: autoScalingRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const clusterRole = new iam.Role(this, 'ClusterRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\n});\n\nconst serviceRole = new iam.Role(this, 'ServiceRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nconst autoScalingRole = new iam.Role(this, 'AutoScalingRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nautoScalingRole.assumeRolePolicy?.addStatements(\n  new iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    principals: [\n      new iam.ServicePrincipal('application-autoscaling.amazonaws.com'),\n    ],\n    actions: [\n      'sts:AssumeRole',\n    ],\n  }));\n)\n\nnew tasks.EmrCreateCluster(this, 'Create Cluster', {\n  instances: {},\n  clusterRole,\n  name: sfn.TaskInput.fromJsonPathAt('$.ClusterName').value,\n  serviceRole,\n  autoScalingRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrCreateClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.PolicyDocument#addStatements",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#assumeRolePolicy",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateCluster.InstancesConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrCreateClusterProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst clusterRole = new iam.Role(this, 'ClusterRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),\n});\n\nconst serviceRole = new iam.Role(this, 'ServiceRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nconst autoScalingRole = new iam.Role(this, 'AutoScalingRole', {\n  assumedBy: new iam.ServicePrincipal('elasticmapreduce.amazonaws.com'),\n});\n\nautoScalingRole.assumeRolePolicy?.addStatements(\n  new iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    principals: [\n      new iam.ServicePrincipal('application-autoscaling.amazonaws.com'),\n    ],\n    actions: [\n      'sts:AssumeRole',\n    ],\n  }));\n\nnew tasks.EmrCreateCluster(this, 'Create Cluster', {\n  instances: {},\n  clusterRole,\n  name: sfn.TaskInput.fromJsonPathAt('$.ClusterName').value,\n  serviceRole,\n  autoScalingRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "28": 1,
        "75": 42,
        "104": 4,
        "192": 2,
        "193": 6,
        "194": 16,
        "196": 2,
        "197": 9,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 3
      },
      "fqnsFingerprint": "81c9e7f7be3c08a57177a6554e427664735d28805b9d00b3c6c8eb88af4f7362"
    },
    "9a416bca3613a4b5e7e7fb39a369b144d34695a7c0670b7d0af1f3fd2d2ab03f": {
      "translations": {
        "python": {
          "source": "tasks.EmrModifyInstanceFleetByName(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    instance_fleet_name=\"InstanceFleetName\",\n    target_on_demand_capacity=2,\n    target_spot_capacity=0\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrModifyInstanceFleetByName(this, \"Task\", new EmrModifyInstanceFleetByNameProps {\n    ClusterId = \"ClusterId\",\n    InstanceFleetName = \"InstanceFleetName\",\n    TargetOnDemandCapacity = 2,\n    TargetSpotCapacity = 0\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrModifyInstanceFleetByName.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .instanceFleetName(\"InstanceFleetName\")\n        .targetOnDemandCapacity(2)\n        .targetSpotCapacity(0)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrModifyInstanceFleetByName(this, jsii.String(\"Task\"), &emrModifyInstanceFleetByNameProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tinstanceFleetName: jsii.String(\"InstanceFleetName\"),\n\ttargetOnDemandCapacity: jsii.Number(2),\n\ttargetSpotCapacity: jsii.Number(0),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrModifyInstanceFleetByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceFleetName: 'InstanceFleetName',\n  targetOnDemandCapacity: 2,\n  targetSpotCapacity: 0,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceFleetByName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceFleetByName",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceFleetByNameProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrModifyInstanceFleetByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceFleetName: 'InstanceFleetName',\n  targetOnDemandCapacity: 2,\n  targetSpotCapacity: 0,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "3843dd63e7601832dd644a3322d78ce5c259344031ed214a2cc3cb0dbc205c68"
    },
    "e7eb33cf653e1abb1e91a9872f55f6313a5a36ef2b4720591c37e26be1086896": {
      "translations": {
        "python": {
          "source": "tasks.EmrModifyInstanceFleetByName(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    instance_fleet_name=\"InstanceFleetName\",\n    target_on_demand_capacity=2,\n    target_spot_capacity=0\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrModifyInstanceFleetByName(this, \"Task\", new EmrModifyInstanceFleetByNameProps {\n    ClusterId = \"ClusterId\",\n    InstanceFleetName = \"InstanceFleetName\",\n    TargetOnDemandCapacity = 2,\n    TargetSpotCapacity = 0\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrModifyInstanceFleetByName.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .instanceFleetName(\"InstanceFleetName\")\n        .targetOnDemandCapacity(2)\n        .targetSpotCapacity(0)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrModifyInstanceFleetByName(this, jsii.String(\"Task\"), &emrModifyInstanceFleetByNameProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tinstanceFleetName: jsii.String(\"InstanceFleetName\"),\n\ttargetOnDemandCapacity: jsii.Number(2),\n\ttargetSpotCapacity: jsii.Number(0),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrModifyInstanceFleetByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceFleetName: 'InstanceFleetName',\n  targetOnDemandCapacity: 2,\n  targetSpotCapacity: 0,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceFleetByNameProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceFleetByName",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceFleetByNameProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrModifyInstanceFleetByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceFleetName: 'InstanceFleetName',\n  targetOnDemandCapacity: 2,\n  targetSpotCapacity: 0,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "3843dd63e7601832dd644a3322d78ce5c259344031ed214a2cc3cb0dbc205c68"
    },
    "4ec6310bd86ba49056fc571dbe35d567f89fc984cba7a4b1c71b9203766e27b3": {
      "translations": {
        "python": {
          "source": "tasks.EmrModifyInstanceGroupByName(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    instance_group_name=sfn.JsonPath.string_at(\"$.InstanceGroupName\"),\n    instance_group=tasks.EmrModifyInstanceGroupByName.InstanceGroupModifyConfigProperty(\n        instance_count=1\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrModifyInstanceGroupByName(this, \"Task\", new EmrModifyInstanceGroupByNameProps {\n    ClusterId = \"ClusterId\",\n    InstanceGroupName = JsonPath.StringAt(\"$.InstanceGroupName\"),\n    InstanceGroup = new InstanceGroupModifyConfigProperty {\n        InstanceCount = 1\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrModifyInstanceGroupByName.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .instanceGroupName(JsonPath.stringAt(\"$.InstanceGroupName\"))\n        .instanceGroup(InstanceGroupModifyConfigProperty.builder()\n                .instanceCount(1)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrModifyInstanceGroupByName(this, jsii.String(\"Task\"), &emrModifyInstanceGroupByNameProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tinstanceGroupName: sfn.jsonPath.stringAt(jsii.String(\"$.InstanceGroupName\")),\n\tinstanceGroup: &instanceGroupModifyConfigProperty{\n\t\tinstanceCount: jsii.Number(1),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrModifyInstanceGroupByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceGroupName: sfn.JsonPath.stringAt('$.InstanceGroupName'),\n  instanceGroup: {\n    instanceCount: 1,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName.InstanceGroupModifyConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByNameProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrModifyInstanceGroupByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceGroupName: sfn.JsonPath.stringAt('$.InstanceGroupName'),\n  instanceGroup: {\n    instanceCount: 1,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "8fc4c105d448150f89e195ec445325bf1a3b4ba20f7d29fab7a4e05df0aacec4"
    },
    "fbca85b6a8ff48bf67595ef36eed6c25dab6a8f2423d4ea6d329ac1f6a2dc32d": {
      "translations": {
        "python": {
          "source": "tasks.EmrModifyInstanceGroupByName(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    instance_group_name=sfn.JsonPath.string_at(\"$.InstanceGroupName\"),\n    instance_group=tasks.EmrModifyInstanceGroupByName.InstanceGroupModifyConfigProperty(\n        instance_count=1\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrModifyInstanceGroupByName(this, \"Task\", new EmrModifyInstanceGroupByNameProps {\n    ClusterId = \"ClusterId\",\n    InstanceGroupName = JsonPath.StringAt(\"$.InstanceGroupName\"),\n    InstanceGroup = new InstanceGroupModifyConfigProperty {\n        InstanceCount = 1\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrModifyInstanceGroupByName.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .instanceGroupName(JsonPath.stringAt(\"$.InstanceGroupName\"))\n        .instanceGroup(InstanceGroupModifyConfigProperty.builder()\n                .instanceCount(1)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrModifyInstanceGroupByName(this, jsii.String(\"Task\"), &emrModifyInstanceGroupByNameProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tinstanceGroupName: sfn.jsonPath.stringAt(jsii.String(\"$.InstanceGroupName\")),\n\tinstanceGroup: &instanceGroupModifyConfigProperty{\n\t\tinstanceCount: jsii.Number(1),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrModifyInstanceGroupByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceGroupName: sfn.JsonPath.stringAt('$.InstanceGroupName'),\n  instanceGroup: {\n    instanceCount: 1,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName.InstanceGroupModifyConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName.InstanceGroupModifyConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByNameProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrModifyInstanceGroupByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceGroupName: sfn.JsonPath.stringAt('$.InstanceGroupName'),\n  instanceGroup: {\n    instanceCount: 1,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "8fc4c105d448150f89e195ec445325bf1a3b4ba20f7d29fab7a4e05df0aacec4"
    },
    "665b2e5148c5159c065b546674d25a7b34b67680a3ef7a6c287ff5dc8ffcac86": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\ninstance_resize_policy_property = stepfunctions_tasks.EmrModifyInstanceGroupByName.InstanceResizePolicyProperty(\n    instances_to_protect=[\"instancesToProtect\"],\n    instances_to_terminate=[\"instancesToTerminate\"],\n    instance_termination_timeout=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\nInstanceResizePolicyProperty instanceResizePolicyProperty = new InstanceResizePolicyProperty {\n    InstancesToProtect = new [] { \"instancesToProtect\" },\n    InstancesToTerminate = new [] { \"instancesToTerminate\" },\n    InstanceTerminationTimeout = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nInstanceResizePolicyProperty instanceResizePolicyProperty = InstanceResizePolicyProperty.builder()\n        .instancesToProtect(List.of(\"instancesToProtect\"))\n        .instancesToTerminate(List.of(\"instancesToTerminate\"))\n        .instanceTerminationTimeout(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ninstanceResizePolicyProperty := &instanceResizePolicyProperty{\n\tinstancesToProtect: []*string{\n\t\tjsii.String(\"instancesToProtect\"),\n\t},\n\tinstancesToTerminate: []*string{\n\t\tjsii.String(\"instancesToTerminate\"),\n\t},\n\tinstanceTerminationTimeout: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\nconst instanceResizePolicyProperty: stepfunctions_tasks.EmrModifyInstanceGroupByName.InstanceResizePolicyProperty = {\n  instancesToProtect: ['instancesToProtect'],\n  instancesToTerminate: ['instancesToTerminate'],\n  instanceTerminationTimeout: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName.InstanceResizePolicyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName.InstanceResizePolicyProperty",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst instanceResizePolicyProperty: stepfunctions_tasks.EmrModifyInstanceGroupByName.InstanceResizePolicyProperty = {\n  instancesToProtect: ['instancesToProtect'],\n  instancesToTerminate: ['instancesToTerminate'],\n  instanceTerminationTimeout: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ed8748a21a0c740174b932a4e6a7ad0bcfc76546582e5eddff64bcd890e25bf3"
    },
    "85ccbb09a69814e90ce128d3ad638d4a8e09755783ad07d45a01a51005ea7af5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\nshrink_policy_property = stepfunctions_tasks.EmrModifyInstanceGroupByName.ShrinkPolicyProperty(\n    decommission_timeout=cdk.Duration.minutes(30),\n    instance_resize_policy=stepfunctions_tasks.EmrModifyInstanceGroupByName.InstanceResizePolicyProperty(\n        instances_to_protect=[\"instancesToProtect\"],\n        instances_to_terminate=[\"instancesToTerminate\"],\n        instance_termination_timeout=cdk.Duration.minutes(30)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\nShrinkPolicyProperty shrinkPolicyProperty = new ShrinkPolicyProperty {\n    DecommissionTimeout = Duration.Minutes(30),\n    InstanceResizePolicy = new InstanceResizePolicyProperty {\n        InstancesToProtect = new [] { \"instancesToProtect\" },\n        InstancesToTerminate = new [] { \"instancesToTerminate\" },\n        InstanceTerminationTimeout = Duration.Minutes(30)\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nShrinkPolicyProperty shrinkPolicyProperty = ShrinkPolicyProperty.builder()\n        .decommissionTimeout(Duration.minutes(30))\n        .instanceResizePolicy(InstanceResizePolicyProperty.builder()\n                .instancesToProtect(List.of(\"instancesToProtect\"))\n                .instancesToTerminate(List.of(\"instancesToTerminate\"))\n                .instanceTerminationTimeout(Duration.minutes(30))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nshrinkPolicyProperty := &shrinkPolicyProperty{\n\tdecommissionTimeout: cdk.duration.minutes(jsii.Number(30)),\n\tinstanceResizePolicy: &instanceResizePolicyProperty{\n\t\tinstancesToProtect: []*string{\n\t\t\tjsii.String(\"instancesToProtect\"),\n\t\t},\n\t\tinstancesToTerminate: []*string{\n\t\t\tjsii.String(\"instancesToTerminate\"),\n\t\t},\n\t\tinstanceTerminationTimeout: cdk.*duration.minutes(jsii.Number(30)),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\nconst shrinkPolicyProperty: stepfunctions_tasks.EmrModifyInstanceGroupByName.ShrinkPolicyProperty = {\n  decommissionTimeout: cdk.Duration.minutes(30),\n  instanceResizePolicy: {\n    instancesToProtect: ['instancesToProtect'],\n    instancesToTerminate: ['instancesToTerminate'],\n    instanceTerminationTimeout: cdk.Duration.minutes(30),\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName.ShrinkPolicyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName.InstanceResizePolicyProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName.ShrinkPolicyProperty",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst shrinkPolicyProperty: stepfunctions_tasks.EmrModifyInstanceGroupByName.ShrinkPolicyProperty = {\n  decommissionTimeout: cdk.Duration.minutes(30),\n  instanceResizePolicy: {\n    instancesToProtect: ['instancesToProtect'],\n    instancesToTerminate: ['instancesToTerminate'],\n    instanceTerminationTimeout: cdk.Duration.minutes(30),\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 17,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 4,
        "196": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1d5a89081cc436341f1c1a294b0be80321256d746d3424f1f3c221d2d3889044"
    },
    "586eff93e456ee02ae3a351d723f6017c3d512e9acd69360b6ef996fad464358": {
      "translations": {
        "python": {
          "source": "tasks.EmrModifyInstanceGroupByName(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    instance_group_name=sfn.JsonPath.string_at(\"$.InstanceGroupName\"),\n    instance_group=tasks.EmrModifyInstanceGroupByName.InstanceGroupModifyConfigProperty(\n        instance_count=1\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrModifyInstanceGroupByName(this, \"Task\", new EmrModifyInstanceGroupByNameProps {\n    ClusterId = \"ClusterId\",\n    InstanceGroupName = JsonPath.StringAt(\"$.InstanceGroupName\"),\n    InstanceGroup = new InstanceGroupModifyConfigProperty {\n        InstanceCount = 1\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrModifyInstanceGroupByName.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .instanceGroupName(JsonPath.stringAt(\"$.InstanceGroupName\"))\n        .instanceGroup(InstanceGroupModifyConfigProperty.builder()\n                .instanceCount(1)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrModifyInstanceGroupByName(this, jsii.String(\"Task\"), &emrModifyInstanceGroupByNameProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tinstanceGroupName: sfn.jsonPath.stringAt(jsii.String(\"$.InstanceGroupName\")),\n\tinstanceGroup: &instanceGroupModifyConfigProperty{\n\t\tinstanceCount: jsii.Number(1),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrModifyInstanceGroupByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceGroupName: sfn.JsonPath.stringAt('$.InstanceGroupName'),\n  instanceGroup: {\n    instanceCount: 1,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByNameProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByName.InstanceGroupModifyConfigProperty",
        "@aws-cdk/aws-stepfunctions-tasks.EmrModifyInstanceGroupByNameProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrModifyInstanceGroupByName(this, 'Task', {\n  clusterId: 'ClusterId',\n  instanceGroupName: sfn.JsonPath.stringAt('$.InstanceGroupName'),\n  instanceGroup: {\n    instanceCount: 1,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "8fc4c105d448150f89e195ec445325bf1a3b4ba20f7d29fab7a4e05df0aacec4"
    },
    "16fb372c9d85d55630f21314509ec1e282baedaf0f4c9eb22cc0d4aec6a9184b": {
      "translations": {
        "python": {
          "source": "tasks.EmrSetClusterTerminationProtection(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    termination_protected=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrSetClusterTerminationProtection(this, \"Task\", new EmrSetClusterTerminationProtectionProps {\n    ClusterId = \"ClusterId\",\n    TerminationProtected = false\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrSetClusterTerminationProtection.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .terminationProtected(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrSetClusterTerminationProtection(this, jsii.String(\"Task\"), &emrSetClusterTerminationProtectionProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tterminationProtected: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrSetClusterTerminationProtection(this, 'Task', {\n  clusterId: 'ClusterId',\n  terminationProtected: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrSetClusterTerminationProtection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrSetClusterTerminationProtection",
        "@aws-cdk/aws-stepfunctions-tasks.EmrSetClusterTerminationProtectionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrSetClusterTerminationProtection(this, 'Task', {\n  clusterId: 'ClusterId',\n  terminationProtected: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "9729e1f2bfde8ecfa52b834f47f84e780729cd4dd4b09ca45dac468a2a9a0d2c"
    },
    "bb54f6a264e8a7ae51a73b69c8ea6bc383279a5810fea3ae2c20df1737ff9aa5": {
      "translations": {
        "python": {
          "source": "tasks.EmrSetClusterTerminationProtection(self, \"Task\",\n    cluster_id=\"ClusterId\",\n    termination_protected=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrSetClusterTerminationProtection(this, \"Task\", new EmrSetClusterTerminationProtectionProps {\n    ClusterId = \"ClusterId\",\n    TerminationProtected = false\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrSetClusterTerminationProtection.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .terminationProtected(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrSetClusterTerminationProtection(this, jsii.String(\"Task\"), &emrSetClusterTerminationProtectionProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n\tterminationProtected: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrSetClusterTerminationProtection(this, 'Task', {\n  clusterId: 'ClusterId',\n  terminationProtected: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrSetClusterTerminationProtectionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrSetClusterTerminationProtection",
        "@aws-cdk/aws-stepfunctions-tasks.EmrSetClusterTerminationProtectionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrSetClusterTerminationProtection(this, 'Task', {\n  clusterId: 'ClusterId',\n  terminationProtected: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "9729e1f2bfde8ecfa52b834f47f84e780729cd4dd4b09ca45dac468a2a9a0d2c"
    },
    "6e3cadae46d8549270b890b1ec4e832a2c7985193cfd34564db9eb596c2a2b94": {
      "translations": {
        "python": {
          "source": "tasks.EmrTerminateCluster(self, \"Task\",\n    cluster_id=\"ClusterId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrTerminateCluster(this, \"Task\", new EmrTerminateClusterProps {\n    ClusterId = \"ClusterId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrTerminateCluster.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrTerminateCluster(this, jsii.String(\"Task\"), &emrTerminateClusterProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrTerminateCluster(this, 'Task', {\n  clusterId: 'ClusterId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrTerminateCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrTerminateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrTerminateClusterProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrTerminateCluster(this, 'Task', {\n  clusterId: 'ClusterId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "2ee89db8944f13fc8f35e9ca61644f9925e2f648b021d7746d654b2b60081a4a"
    },
    "5a5c549ad9a3ca410cf0a6e277f0b2e36a1bee4d2c12d7dc461439dfb3f42bc1": {
      "translations": {
        "python": {
          "source": "tasks.EmrTerminateCluster(self, \"Task\",\n    cluster_id=\"ClusterId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrTerminateCluster(this, \"Task\", new EmrTerminateClusterProps {\n    ClusterId = \"ClusterId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrTerminateCluster.Builder.create(this, \"Task\")\n        .clusterId(\"ClusterId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrTerminateCluster(this, jsii.String(\"Task\"), &emrTerminateClusterProps{\n\tclusterId: jsii.String(\"ClusterId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrTerminateCluster(this, 'Task', {\n  clusterId: 'ClusterId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EmrTerminateClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrTerminateCluster",
        "@aws-cdk/aws-stepfunctions-tasks.EmrTerminateClusterProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrTerminateCluster(this, 'Task', {\n  clusterId: 'ClusterId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "2ee89db8944f13fc8f35e9ca61644f9925e2f648b021d7746d654b2b60081a4a"
    },
    "7a66f0f45ea455a02f78d445f119aa0ee25c26cb381d96b56405f7aff75667a6": {
      "translations": {
        "python": {
          "source": "start_query_execution_job = tasks.AthenaStartQueryExecution(self, \"Athena Start Query\",\n    query_string=sfn.JsonPath.format(\"select contacts where year={};\", sfn.JsonPath.string_at(\"$.year\")),\n    query_execution_context=tasks.QueryExecutionContext(\n        database_name=\"interactions\"\n    ),\n    result_configuration=tasks.ResultConfiguration(\n        encryption_configuration=tasks.EncryptionConfiguration(\n            encryption_option=tasks.EncryptionOption.S3_MANAGED\n        ),\n        output_location=s3.Location(\n            bucket_name=\"mybucket\",\n            object_key=\"myprefix\"\n        )\n    ),\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = new AthenaStartQueryExecution(this, \"Athena Start Query\", new AthenaStartQueryExecutionProps {\n    QueryString = JsonPath.Format(\"select contacts where year={};\", JsonPath.StringAt(\"$.year\")),\n    QueryExecutionContext = new QueryExecutionContext {\n        DatabaseName = \"interactions\"\n    },\n    ResultConfiguration = new ResultConfiguration {\n        EncryptionConfiguration = new EncryptionConfiguration {\n            EncryptionOption = EncryptionOption.S3_MANAGED\n        },\n        OutputLocation = new Location {\n            BucketName = \"mybucket\",\n            ObjectKey = \"myprefix\"\n        }\n    },\n    IntegrationPattern = IntegrationPattern.RUN_JOB\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = AthenaStartQueryExecution.Builder.create(this, \"Athena Start Query\")\n        .queryString(JsonPath.format(\"select contacts where year={};\", JsonPath.stringAt(\"$.year\")))\n        .queryExecutionContext(QueryExecutionContext.builder()\n                .databaseName(\"interactions\")\n                .build())\n        .resultConfiguration(ResultConfiguration.builder()\n                .encryptionConfiguration(EncryptionConfiguration.builder()\n                        .encryptionOption(EncryptionOption.S3_MANAGED)\n                        .build())\n                .outputLocation(Location.builder()\n                        .bucketName(\"mybucket\")\n                        .objectKey(\"myprefix\")\n                        .build())\n                .build())\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "startQueryExecutionJob := tasks.NewAthenaStartQueryExecution(this, jsii.String(\"Athena Start Query\"), &athenaStartQueryExecutionProps{\n\tqueryString: sfn.jsonPath.format(jsii.String(\"select contacts where year={};\"), sfn.*jsonPath.stringAt(jsii.String(\"$.year\"))),\n\tqueryExecutionContext: &queryExecutionContext{\n\t\tdatabaseName: jsii.String(\"interactions\"),\n\t},\n\tresultConfiguration: &resultConfiguration{\n\t\tencryptionConfiguration: &encryptionConfiguration{\n\t\t\tencryptionOption: tasks.encryptionOption_S3_MANAGED,\n\t\t},\n\t\toutputLocation: &location{\n\t\t\tbucketName: jsii.String(\"mybucket\"),\n\t\t\tobjectKey: jsii.String(\"myprefix\"),\n\t\t},\n\t},\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n})",
          "version": "1"
        },
        "$": {
          "source": "const startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EncryptionConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionConfiguration",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption#S3_MANAGED",
        "@aws-cdk/aws-stepfunctions-tasks.QueryExecutionContext",
        "@aws-cdk/aws-stepfunctions-tasks.ResultConfiguration",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#format",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "18ccfd09b7dfcdcde29c0cc0b620e945875db2aef84e404c5df86ce1cec06402"
    },
    "52cd4de059655089d1b4cb4707397c3b4061df66417e4a8f096d198195b9eefc": {
      "translations": {
        "python": {
          "source": "start_query_execution_job = tasks.AthenaStartQueryExecution(self, \"Athena Start Query\",\n    query_string=sfn.JsonPath.format(\"select contacts where year={};\", sfn.JsonPath.string_at(\"$.year\")),\n    query_execution_context=tasks.QueryExecutionContext(\n        database_name=\"interactions\"\n    ),\n    result_configuration=tasks.ResultConfiguration(\n        encryption_configuration=tasks.EncryptionConfiguration(\n            encryption_option=tasks.EncryptionOption.S3_MANAGED\n        ),\n        output_location=s3.Location(\n            bucket_name=\"mybucket\",\n            object_key=\"myprefix\"\n        )\n    ),\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = new AthenaStartQueryExecution(this, \"Athena Start Query\", new AthenaStartQueryExecutionProps {\n    QueryString = JsonPath.Format(\"select contacts where year={};\", JsonPath.StringAt(\"$.year\")),\n    QueryExecutionContext = new QueryExecutionContext {\n        DatabaseName = \"interactions\"\n    },\n    ResultConfiguration = new ResultConfiguration {\n        EncryptionConfiguration = new EncryptionConfiguration {\n            EncryptionOption = EncryptionOption.S3_MANAGED\n        },\n        OutputLocation = new Location {\n            BucketName = \"mybucket\",\n            ObjectKey = \"myprefix\"\n        }\n    },\n    IntegrationPattern = IntegrationPattern.RUN_JOB\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = AthenaStartQueryExecution.Builder.create(this, \"Athena Start Query\")\n        .queryString(JsonPath.format(\"select contacts where year={};\", JsonPath.stringAt(\"$.year\")))\n        .queryExecutionContext(QueryExecutionContext.builder()\n                .databaseName(\"interactions\")\n                .build())\n        .resultConfiguration(ResultConfiguration.builder()\n                .encryptionConfiguration(EncryptionConfiguration.builder()\n                        .encryptionOption(EncryptionOption.S3_MANAGED)\n                        .build())\n                .outputLocation(Location.builder()\n                        .bucketName(\"mybucket\")\n                        .objectKey(\"myprefix\")\n                        .build())\n                .build())\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "startQueryExecutionJob := tasks.NewAthenaStartQueryExecution(this, jsii.String(\"Athena Start Query\"), &athenaStartQueryExecutionProps{\n\tqueryString: sfn.jsonPath.format(jsii.String(\"select contacts where year={};\"), sfn.*jsonPath.stringAt(jsii.String(\"$.year\"))),\n\tqueryExecutionContext: &queryExecutionContext{\n\t\tdatabaseName: jsii.String(\"interactions\"),\n\t},\n\tresultConfiguration: &resultConfiguration{\n\t\tencryptionConfiguration: &encryptionConfiguration{\n\t\t\tencryptionOption: tasks.encryptionOption_S3_MANAGED,\n\t\t},\n\t\toutputLocation: &location{\n\t\t\tbucketName: jsii.String(\"mybucket\"),\n\t\t\tobjectKey: jsii.String(\"myprefix\"),\n\t\t},\n\t},\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n})",
          "version": "1"
        },
        "$": {
          "source": "const startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionConfiguration",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption#S3_MANAGED",
        "@aws-cdk/aws-stepfunctions-tasks.QueryExecutionContext",
        "@aws-cdk/aws-stepfunctions-tasks.ResultConfiguration",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#format",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "18ccfd09b7dfcdcde29c0cc0b620e945875db2aef84e404c5df86ce1cec06402"
    },
    "20d23197d930c8aa033cc2ac2beb06c1714b425565c1bcde7fb943e3bbbcad0c": {
      "translations": {
        "python": {
          "source": "convert_to_seconds = tasks.EvaluateExpression(self, \"Convert to seconds\",\n    expression=\"$.waitMilliseconds / 1000\",\n    result_path=\"$.waitSeconds\"\n)\n\ncreate_message = tasks.EvaluateExpression(self, \"Create message\",\n    # Note: this is a string inside a string.\n    expression=\"`Now waiting ${$.waitSeconds} seconds...`\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.SnsPublish(self, \"Publish message\",\n    topic=sns.Topic(self, \"cool-topic\"),\n    message=sfn.TaskInput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.Wait(self, \"Wait\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "EvaluateExpression convertToSeconds = new EvaluateExpression(this, \"Convert to seconds\", new EvaluateExpressionProps {\n    Expression = \"$.waitMilliseconds / 1000\",\n    ResultPath = \"$.waitSeconds\"\n});\n\nEvaluateExpression createMessage = new EvaluateExpression(this, \"Create message\", new EvaluateExpressionProps {\n    // Note: this is a string inside a string.\n    Expression = \"`Now waiting ${$.waitSeconds} seconds...`\",\n    Runtime = Runtime.NODEJS_14_X,\n    ResultPath = \"$.message\"\n});\n\nSnsPublish publishMessage = new SnsPublish(this, \"Publish message\", new SnsPublishProps {\n    Topic = new Topic(this, \"cool-topic\"),\n    Message = TaskInput.FromJsonPathAt(\"$.message\"),\n    ResultPath = \"$.sns\"\n});\n\nWait wait = new Wait(this, \"Wait\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = convertToSeconds.Next(createMessage).Next(publishMessage).Next(wait)\n});",
          "version": "1"
        },
        "java": {
          "source": "EvaluateExpression convertToSeconds = EvaluateExpression.Builder.create(this, \"Convert to seconds\")\n        .expression(\"$.waitMilliseconds / 1000\")\n        .resultPath(\"$.waitSeconds\")\n        .build();\n\nEvaluateExpression createMessage = EvaluateExpression.Builder.create(this, \"Create message\")\n        // Note: this is a string inside a string.\n        .expression(\"`Now waiting ${$.waitSeconds} seconds...`\")\n        .runtime(Runtime.NODEJS_14_X)\n        .resultPath(\"$.message\")\n        .build();\n\nSnsPublish publishMessage = SnsPublish.Builder.create(this, \"Publish message\")\n        .topic(new Topic(this, \"cool-topic\"))\n        .message(TaskInput.fromJsonPathAt(\"$.message\"))\n        .resultPath(\"$.sns\")\n        .build();\n\nWait wait = Wait.Builder.create(this, \"Wait\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(convertToSeconds.next(createMessage).next(publishMessage).next(wait))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "convertToSeconds := tasks.NewEvaluateExpression(this, jsii.String(\"Convert to seconds\"), &evaluateExpressionProps{\n\texpression: jsii.String(\"$.waitMilliseconds / 1000\"),\n\tresultPath: jsii.String(\"$.waitSeconds\"),\n})\n\ncreateMessage := tasks.NewEvaluateExpression(this, jsii.String(\"Create message\"), &evaluateExpressionProps{\n\t// Note: this is a string inside a string.\n\texpression: jsii.String(\"`Now waiting ${$.waitSeconds} seconds...`\"),\n\truntime: lambda.runtime_NODEJS_14_X(),\n\tresultPath: jsii.String(\"$.message\"),\n})\n\npublishMessage := tasks.NewSnsPublish(this, jsii.String(\"Publish message\"), &snsPublishProps{\n\ttopic: sns.NewTopic(this, jsii.String(\"cool-topic\")),\n\tmessage: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.message\")),\n\tresultPath: jsii.String(\"$.sns\"),\n})\n\nwait := sfn.NewWait(this, jsii.String(\"Wait\"), &waitProps{\n\ttime: sfn.waitTime.secondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &stateMachineProps{\n\tdefinition: convertToSeconds.next(createMessage).next(publishMessage).next(wait),\n})",
          "version": "1"
        },
        "$": {
          "source": "const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublish",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 42,
        "104": 6,
        "193": 5,
        "194": 15,
        "196": 5,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 10
      },
      "fqnsFingerprint": "4ed01fad2aee65313d791cb2f4478ef39c4a467c70593ae9b560df902f17337d"
    },
    "8532374ef1e1502dec8179e0b57f0e12021025d17a35658dbf09dc2927caf900": {
      "translations": {
        "python": {
          "source": "convert_to_seconds = tasks.EvaluateExpression(self, \"Convert to seconds\",\n    expression=\"$.waitMilliseconds / 1000\",\n    result_path=\"$.waitSeconds\"\n)\n\ncreate_message = tasks.EvaluateExpression(self, \"Create message\",\n    # Note: this is a string inside a string.\n    expression=\"`Now waiting ${$.waitSeconds} seconds...`\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.SnsPublish(self, \"Publish message\",\n    topic=sns.Topic(self, \"cool-topic\"),\n    message=sfn.TaskInput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.Wait(self, \"Wait\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "EvaluateExpression convertToSeconds = new EvaluateExpression(this, \"Convert to seconds\", new EvaluateExpressionProps {\n    Expression = \"$.waitMilliseconds / 1000\",\n    ResultPath = \"$.waitSeconds\"\n});\n\nEvaluateExpression createMessage = new EvaluateExpression(this, \"Create message\", new EvaluateExpressionProps {\n    // Note: this is a string inside a string.\n    Expression = \"`Now waiting ${$.waitSeconds} seconds...`\",\n    Runtime = Runtime.NODEJS_14_X,\n    ResultPath = \"$.message\"\n});\n\nSnsPublish publishMessage = new SnsPublish(this, \"Publish message\", new SnsPublishProps {\n    Topic = new Topic(this, \"cool-topic\"),\n    Message = TaskInput.FromJsonPathAt(\"$.message\"),\n    ResultPath = \"$.sns\"\n});\n\nWait wait = new Wait(this, \"Wait\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = convertToSeconds.Next(createMessage).Next(publishMessage).Next(wait)\n});",
          "version": "1"
        },
        "java": {
          "source": "EvaluateExpression convertToSeconds = EvaluateExpression.Builder.create(this, \"Convert to seconds\")\n        .expression(\"$.waitMilliseconds / 1000\")\n        .resultPath(\"$.waitSeconds\")\n        .build();\n\nEvaluateExpression createMessage = EvaluateExpression.Builder.create(this, \"Create message\")\n        // Note: this is a string inside a string.\n        .expression(\"`Now waiting ${$.waitSeconds} seconds...`\")\n        .runtime(Runtime.NODEJS_14_X)\n        .resultPath(\"$.message\")\n        .build();\n\nSnsPublish publishMessage = SnsPublish.Builder.create(this, \"Publish message\")\n        .topic(new Topic(this, \"cool-topic\"))\n        .message(TaskInput.fromJsonPathAt(\"$.message\"))\n        .resultPath(\"$.sns\")\n        .build();\n\nWait wait = Wait.Builder.create(this, \"Wait\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(convertToSeconds.next(createMessage).next(publishMessage).next(wait))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "convertToSeconds := tasks.NewEvaluateExpression(this, jsii.String(\"Convert to seconds\"), &evaluateExpressionProps{\n\texpression: jsii.String(\"$.waitMilliseconds / 1000\"),\n\tresultPath: jsii.String(\"$.waitSeconds\"),\n})\n\ncreateMessage := tasks.NewEvaluateExpression(this, jsii.String(\"Create message\"), &evaluateExpressionProps{\n\t// Note: this is a string inside a string.\n\texpression: jsii.String(\"`Now waiting ${$.waitSeconds} seconds...`\"),\n\truntime: lambda.runtime_NODEJS_14_X(),\n\tresultPath: jsii.String(\"$.message\"),\n})\n\npublishMessage := tasks.NewSnsPublish(this, jsii.String(\"Publish message\"), &snsPublishProps{\n\ttopic: sns.NewTopic(this, jsii.String(\"cool-topic\")),\n\tmessage: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.message\")),\n\tresultPath: jsii.String(\"$.sns\"),\n})\n\nwait := sfn.NewWait(this, jsii.String(\"Wait\"), &waitProps{\n\ttime: sfn.waitTime.secondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &stateMachineProps{\n\tdefinition: convertToSeconds.next(createMessage).next(publishMessage).next(wait),\n})",
          "version": "1"
        },
        "$": {
          "source": "const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublish",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 42,
        "104": 6,
        "193": 5,
        "194": 15,
        "196": 5,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 10
      },
      "fqnsFingerprint": "4ed01fad2aee65313d791cb2f4478ef39c4a467c70593ae9b560df902f17337d"
    },
    "8475a3e4983ff6215d4e441d8614c135df52388ae183b2d50c561ef69c4f49f7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_events as events\n\n\nmy_event_bus = events.EventBus(self, \"EventBus\",\n    event_bus_name=\"MyEventBus1\"\n)\n\ntasks.EventBridgePutEvents(self, \"Send an event to EventBridge\",\n    entries=[tasks.EventBridgePutEventsEntry(\n        detail=sfn.TaskInput.from_object({\n            \"Message\": \"Hello from Step Functions!\"\n        }),\n        event_bus=my_event_bus,\n        detail_type=\"MessageFromStepFunctions\",\n        source=\"step.functions\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\n\n\nEventBus myEventBus = new EventBus(this, \"EventBus\", new EventBusProps {\n    EventBusName = \"MyEventBus1\"\n});\n\nnew EventBridgePutEvents(this, \"Send an event to EventBridge\", new EventBridgePutEventsProps {\n    Entries = new [] { new EventBridgePutEventsEntry {\n        Detail = TaskInput.FromObject(new Dictionary<string, object> {\n            { \"Message\", \"Hello from Step Functions!\" }\n        }),\n        EventBus = myEventBus,\n        DetailType = \"MessageFromStepFunctions\",\n        Source = \"step.functions\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.*;\n\n\nEventBus myEventBus = EventBus.Builder.create(this, \"EventBus\")\n        .eventBusName(\"MyEventBus1\")\n        .build();\n\nEventBridgePutEvents.Builder.create(this, \"Send an event to EventBridge\")\n        .entries(List.of(EventBridgePutEventsEntry.builder()\n                .detail(TaskInput.fromObject(Map.of(\n                        \"Message\", \"Hello from Step Functions!\")))\n                .eventBus(myEventBus)\n                .detailType(\"MessageFromStepFunctions\")\n                .source(\"step.functions\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\n\nmyEventBus := events.NewEventBus(this, jsii.String(\"EventBus\"), &eventBusProps{\n\teventBusName: jsii.String(\"MyEventBus1\"),\n})\n\ntasks.NewEventBridgePutEvents(this, jsii.String(\"Send an event to EventBridge\"), &eventBridgePutEventsProps{\n\tentries: []eventBridgePutEventsEntry{\n\t\t&eventBridgePutEventsEntry{\n\t\t\tdetail: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\t\t\"Message\": jsii.String(\"Hello from Step Functions!\"),\n\t\t\t}),\n\t\t\teventBus: myEventBus,\n\t\t\tdetailType: jsii.String(\"MessageFromStepFunctions\"),\n\t\t\tsource: jsii.String(\"step.functions\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as events from '@aws-cdk/aws-events';\n\nconst myEventBus = new events.EventBus(this, 'EventBus', {\n  eventBusName: 'MyEventBus1',\n});\n\nnew tasks.EventBridgePutEvents(this, 'Send an event to EventBridge', {\n  entries: [{\n    detail: sfn.TaskInput.fromObject({\n      Message: 'Hello from Step Functions!',\n    }),\n    eventBus: myEventBus,\n    detailType: 'MessageFromStepFunctions',\n    source: 'step.functions',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EventBridgePutEvents"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBusProps",
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/aws-stepfunctions-tasks.EventBridgePutEvents",
        "@aws-cdk/aws-stepfunctions-tasks.EventBridgePutEventsProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myEventBus = new events.EventBus(this, 'EventBus', {\n  eventBusName: 'MyEventBus1',\n});\n\nnew tasks.EventBridgePutEvents(this, 'Send an event to EventBridge', {\n  entries: [{\n    detail: sfn.TaskInput.fromObject({\n      Message: 'Hello from Step Functions!',\n    }),\n    eventBus: myEventBus,\n    detailType: 'MessageFromStepFunctions',\n    source: 'step.functions',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 17,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "abf119bd80799a041776a9bbf752e294ddf24d8e053d557268e9fe4388bca81e"
    },
    "568f776f5a25ec8dbb93325234a74e24d2cfecf26d7a19e51de5cebebc06e59e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# event_bus: events.EventBus\n# task_input: stepfunctions.TaskInput\n\nevent_bridge_put_events_entry = stepfunctions_tasks.EventBridgePutEventsEntry(\n    detail=task_input,\n    detail_type=\"detailType\",\n    source=\"source\",\n\n    # the properties below are optional\n    event_bus=event_bus\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nEventBus eventBus;\nTaskInput taskInput;\n\nEventBridgePutEventsEntry eventBridgePutEventsEntry = new EventBridgePutEventsEntry {\n    Detail = taskInput,\n    DetailType = \"detailType\",\n    Source = \"source\",\n\n    // the properties below are optional\n    EventBus = eventBus\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nEventBus eventBus;\nTaskInput taskInput;\n\nEventBridgePutEventsEntry eventBridgePutEventsEntry = EventBridgePutEventsEntry.builder()\n        .detail(taskInput)\n        .detailType(\"detailType\")\n        .source(\"source\")\n\n        // the properties below are optional\n        .eventBus(eventBus)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar eventBus eventBus\nvar taskInput taskInput\neventBridgePutEventsEntry := &eventBridgePutEventsEntry{\n\tdetail: taskInput,\n\tdetailType: jsii.String(\"detailType\"),\n\tsource: jsii.String(\"source\"),\n\n\t// the properties below are optional\n\teventBus: eventBus,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const eventBus: events.EventBus;\ndeclare const taskInput: stepfunctions.TaskInput;\nconst eventBridgePutEventsEntry: stepfunctions_tasks.EventBridgePutEventsEntry = {\n  detail: taskInput,\n  detailType: 'detailType',\n  source: 'source',\n\n  // the properties below are optional\n  eventBus: eventBus,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EventBridgePutEventsEntry"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/aws-stepfunctions-tasks.EventBridgePutEventsEntry",
        "@aws-cdk/aws-stepfunctions.TaskInput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const eventBus: events.EventBus;\ndeclare const taskInput: stepfunctions.TaskInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eventBridgePutEventsEntry: stepfunctions_tasks.EventBridgePutEventsEntry = {\n  detail: taskInput,\n  detailType: 'detailType',\n  source: 'source',\n\n  // the properties below are optional\n  eventBus: eventBus,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "60aa593d7a5800b2dc1f7474e657ba3bac026de03534a697d2d3e01a848e6261"
    },
    "11afcb59bc122dcaf084a039c3c85f95bc2bcde9a6463f8d6050f481ed3cef67": {
      "translations": {
        "python": {
          "source": "sfn.TaskInput.from_text(\"{\\\"instance-id\\\": \\\"i-1234567890abcdef0\\\", \\\"state\\\": \\\"terminated\\\"}\")\nsfn.TaskInput.from_object({\"Message\": \"Hello from Step Functions\"})\nsfn.TaskInput.from_json_path_at(\"$.EventDetail\")",
          "version": "2"
        },
        "csharp": {
          "source": "TaskInput.FromText(\"{\\\"instance-id\\\": \\\"i-1234567890abcdef0\\\", \\\"state\\\": \\\"terminated\\\"}\");\nTaskInput.FromObject(new Dictionary<string, object> { { \"Message\", \"Hello from Step Functions\" } });\nTaskInput.FromJsonPathAt(\"$.EventDetail\");",
          "version": "1"
        },
        "java": {
          "source": "TaskInput.fromText(\"{\\\"instance-id\\\": \\\"i-1234567890abcdef0\\\", \\\"state\\\": \\\"terminated\\\"}\");\nTaskInput.fromObject(Map.of(\"Message\", \"Hello from Step Functions\"));\nTaskInput.fromJsonPathAt(\"$.EventDetail\");",
          "version": "1"
        },
        "go": {
          "source": "sfn.taskInput.fromText(jsii.String(\"{\\\"instance-id\\\": \\\"i-1234567890abcdef0\\\", \\\"state\\\": \\\"terminated\\\"}\"))\nsfn.taskInput.fromObject(map[string]interface{}{\n\t\"Message\": jsii.String(\"Hello from Step Functions\"),\n})\nsfn.taskInput.fromJsonPathAt(jsii.String(\"$.EventDetail\"))",
          "version": "1"
        },
        "$": {
          "source": "sfn.TaskInput.fromText('{\"instance-id\": \"i-1234567890abcdef0\", \"state\": \"terminated\"}');\nsfn.TaskInput.fromObject({ Message: 'Hello from Step Functions' });\nsfn.TaskInput.fromJsonPathAt('$.EventDetail');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EventBridgePutEventsEntry",
          "memberName": "detail"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nsfn.TaskInput.fromText('{\"instance-id\": \"i-1234567890abcdef0\", \"state\": \"terminated\"}');\nsfn.TaskInput.fromObject({ Message: 'Hello from Step Functions' });\nsfn.TaskInput.fromJsonPathAt('$.EventDetail');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "193": 1,
        "194": 6,
        "196": 3,
        "226": 3,
        "281": 1
      },
      "fqnsFingerprint": "cc4e2528d20025b60ea25cfad8f1038223f61e7625cc5b20cde4ffbe69ac6a99"
    },
    "129d32aa90c1f37851dadfd47ad971649ed28f2e779ced3bb054e6beb044c983": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_events as events\n\n\nmy_event_bus = events.EventBus(self, \"EventBus\",\n    event_bus_name=\"MyEventBus1\"\n)\n\ntasks.EventBridgePutEvents(self, \"Send an event to EventBridge\",\n    entries=[tasks.EventBridgePutEventsEntry(\n        detail=sfn.TaskInput.from_object({\n            \"Message\": \"Hello from Step Functions!\"\n        }),\n        event_bus=my_event_bus,\n        detail_type=\"MessageFromStepFunctions\",\n        source=\"step.functions\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\n\n\nEventBus myEventBus = new EventBus(this, \"EventBus\", new EventBusProps {\n    EventBusName = \"MyEventBus1\"\n});\n\nnew EventBridgePutEvents(this, \"Send an event to EventBridge\", new EventBridgePutEventsProps {\n    Entries = new [] { new EventBridgePutEventsEntry {\n        Detail = TaskInput.FromObject(new Dictionary<string, object> {\n            { \"Message\", \"Hello from Step Functions!\" }\n        }),\n        EventBus = myEventBus,\n        DetailType = \"MessageFromStepFunctions\",\n        Source = \"step.functions\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.*;\n\n\nEventBus myEventBus = EventBus.Builder.create(this, \"EventBus\")\n        .eventBusName(\"MyEventBus1\")\n        .build();\n\nEventBridgePutEvents.Builder.create(this, \"Send an event to EventBridge\")\n        .entries(List.of(EventBridgePutEventsEntry.builder()\n                .detail(TaskInput.fromObject(Map.of(\n                        \"Message\", \"Hello from Step Functions!\")))\n                .eventBus(myEventBus)\n                .detailType(\"MessageFromStepFunctions\")\n                .source(\"step.functions\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import events \"github.com/aws-samples/dummy/awscdkawsevents\"\n\nmyEventBus := events.NewEventBus(this, jsii.String(\"EventBus\"), &eventBusProps{\n\teventBusName: jsii.String(\"MyEventBus1\"),\n})\n\ntasks.NewEventBridgePutEvents(this, jsii.String(\"Send an event to EventBridge\"), &eventBridgePutEventsProps{\n\tentries: []eventBridgePutEventsEntry{\n\t\t&eventBridgePutEventsEntry{\n\t\t\tdetail: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\t\t\"Message\": jsii.String(\"Hello from Step Functions!\"),\n\t\t\t}),\n\t\t\teventBus: myEventBus,\n\t\t\tdetailType: jsii.String(\"MessageFromStepFunctions\"),\n\t\t\tsource: jsii.String(\"step.functions\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as events from '@aws-cdk/aws-events';\n\nconst myEventBus = new events.EventBus(this, 'EventBus', {\n  eventBusName: 'MyEventBus1',\n});\n\nnew tasks.EventBridgePutEvents(this, 'Send an event to EventBridge', {\n  entries: [{\n    detail: sfn.TaskInput.fromObject({\n      Message: 'Hello from Step Functions!',\n    }),\n    eventBus: myEventBus,\n    detailType: 'MessageFromStepFunctions',\n    source: 'step.functions',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.EventBridgePutEventsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBusProps",
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/aws-stepfunctions-tasks.EventBridgePutEvents",
        "@aws-cdk/aws-stepfunctions-tasks.EventBridgePutEventsProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as events from '@aws-cdk/aws-events';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myEventBus = new events.EventBus(this, 'EventBus', {\n  eventBusName: 'MyEventBus1',\n});\n\nnew tasks.EventBridgePutEvents(this, 'Send an event to EventBridge', {\n  entries: [{\n    detail: sfn.TaskInput.fromObject({\n      Message: 'Hello from Step Functions!',\n    }),\n    eventBus: myEventBus,\n    detailType: 'MessageFromStepFunctions',\n    source: 'step.functions',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 17,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "abf119bd80799a041776a9bbf752e294ddf24d8e053d557268e9fe4388bca81e"
    },
    "8e6d26cf9b905e35d03e09474a8421ec8d63616667992fce44ca0eea95e442e8": {
      "translations": {
        "python": {
          "source": "tasks.GlueDataBrewStartJobRun(self, \"Task\",\n    name=\"databrew-job\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new GlueDataBrewStartJobRun(this, \"Task\", new GlueDataBrewStartJobRunProps {\n    Name = \"databrew-job\"\n});",
          "version": "1"
        },
        "java": {
          "source": "GlueDataBrewStartJobRun.Builder.create(this, \"Task\")\n        .name(\"databrew-job\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewGlueDataBrewStartJobRun(this, jsii.String(\"Task\"), &glueDataBrewStartJobRunProps{\n\tname: jsii.String(\"databrew-job\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.GlueDataBrewStartJobRun(this, 'Task', {\n  name: 'databrew-job',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.GlueDataBrewStartJobRun"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.GlueDataBrewStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.GlueDataBrewStartJobRunProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.GlueDataBrewStartJobRun(this, 'Task', {\n  name: 'databrew-job',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "9841cafffab3a2caad0c6ad4d3f7cdb8bc43306bd751b25ca0699b81b2ba783c"
    },
    "0929979a3831f4aa6aed2a9c2cfdc3f59784e079b0ae3742bfc5c6f331b306f3": {
      "translations": {
        "python": {
          "source": "tasks.GlueDataBrewStartJobRun(self, \"Task\",\n    name=\"databrew-job\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new GlueDataBrewStartJobRun(this, \"Task\", new GlueDataBrewStartJobRunProps {\n    Name = \"databrew-job\"\n});",
          "version": "1"
        },
        "java": {
          "source": "GlueDataBrewStartJobRun.Builder.create(this, \"Task\")\n        .name(\"databrew-job\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewGlueDataBrewStartJobRun(this, jsii.String(\"Task\"), &glueDataBrewStartJobRunProps{\n\tname: jsii.String(\"databrew-job\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.GlueDataBrewStartJobRun(this, 'Task', {\n  name: 'databrew-job',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.GlueDataBrewStartJobRunProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.GlueDataBrewStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.GlueDataBrewStartJobRunProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.GlueDataBrewStartJobRun(this, 'Task', {\n  name: 'databrew-job',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "9841cafffab3a2caad0c6ad4d3f7cdb8bc43306bd751b25ca0699b81b2ba783c"
    },
    "54103855ccb49524597e61afeac7472a72f2d7fff3ffc443f94f6025ecb1ea52": {
      "translations": {
        "python": {
          "source": "tasks.GlueStartJobRun(self, \"Task\",\n    glue_job_name=\"my-glue-job\",\n    arguments=sfn.TaskInput.from_object({\n        \"key\": \"value\"\n    }),\n    timeout=Duration.minutes(30),\n    notify_delay_after=Duration.minutes(5)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new GlueStartJobRun(this, \"Task\", new GlueStartJobRunProps {\n    GlueJobName = \"my-glue-job\",\n    Arguments = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"key\", \"value\" }\n    }),\n    Timeout = Duration.Minutes(30),\n    NotifyDelayAfter = Duration.Minutes(5)\n});",
          "version": "1"
        },
        "java": {
          "source": "GlueStartJobRun.Builder.create(this, \"Task\")\n        .glueJobName(\"my-glue-job\")\n        .arguments(TaskInput.fromObject(Map.of(\n                \"key\", \"value\")))\n        .timeout(Duration.minutes(30))\n        .notifyDelayAfter(Duration.minutes(5))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewGlueStartJobRun(this, jsii.String(\"Task\"), &glueStartJobRunProps{\n\tglueJobName: jsii.String(\"my-glue-job\"),\n\targuments: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"key\": jsii.String(\"value\"),\n\t}),\n\ttimeout: duration.minutes(jsii.Number(30)),\n\tnotifyDelayAfter: *duration.minutes(jsii.Number(5)),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.GlueStartJobRun(this, 'Task', {\n  glueJobName: 'my-glue-job',\n  arguments: sfn.TaskInput.fromObject({\n    key: 'value',\n  }),\n  timeout: Duration.minutes(30),\n  notifyDelayAfter: Duration.minutes(5),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.GlueStartJobRun"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.GlueStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.GlueStartJobRunProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.GlueStartJobRun(this, 'Task', {\n  glueJobName: 'my-glue-job',\n  arguments: sfn.TaskInput.fromObject({\n    key: 'value',\n  }),\n  timeout: Duration.minutes(30),\n  notifyDelayAfter: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 2,
        "194": 5,
        "196": 3,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "c7f826cc3eff5642f2d17e5494473ccd44da53ab9c6a3e2bb129c9a9e592ab21"
    },
    "fea51ebed352808fc46d42eb8a7b54f310291cf95daa3a46cc9feb2b70837dbb": {
      "translations": {
        "python": {
          "source": "tasks.GlueStartJobRun(self, \"Task\",\n    glue_job_name=\"my-glue-job\",\n    arguments=sfn.TaskInput.from_object({\n        \"key\": \"value\"\n    }),\n    timeout=Duration.minutes(30),\n    notify_delay_after=Duration.minutes(5)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new GlueStartJobRun(this, \"Task\", new GlueStartJobRunProps {\n    GlueJobName = \"my-glue-job\",\n    Arguments = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"key\", \"value\" }\n    }),\n    Timeout = Duration.Minutes(30),\n    NotifyDelayAfter = Duration.Minutes(5)\n});",
          "version": "1"
        },
        "java": {
          "source": "GlueStartJobRun.Builder.create(this, \"Task\")\n        .glueJobName(\"my-glue-job\")\n        .arguments(TaskInput.fromObject(Map.of(\n                \"key\", \"value\")))\n        .timeout(Duration.minutes(30))\n        .notifyDelayAfter(Duration.minutes(5))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewGlueStartJobRun(this, jsii.String(\"Task\"), &glueStartJobRunProps{\n\tglueJobName: jsii.String(\"my-glue-job\"),\n\targuments: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"key\": jsii.String(\"value\"),\n\t}),\n\ttimeout: duration.minutes(jsii.Number(30)),\n\tnotifyDelayAfter: *duration.minutes(jsii.Number(5)),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.GlueStartJobRun(this, 'Task', {\n  glueJobName: 'my-glue-job',\n  arguments: sfn.TaskInput.fromObject({\n    key: 'value',\n  }),\n  timeout: Duration.minutes(30),\n  notifyDelayAfter: Duration.minutes(5),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.GlueStartJobRunProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.GlueStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.GlueStartJobRunProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.GlueStartJobRun(this, 'Task', {\n  glueJobName: 'my-glue-job',\n  arguments: sfn.TaskInput.fromObject({\n    key: 'value',\n  }),\n  timeout: Duration.minutes(30),\n  notifyDelayAfter: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 2,
        "194": 5,
        "196": 3,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "c7f826cc3eff5642f2d17e5494473ccd44da53ab9c6a3e2bb129c9a9e592ab21"
    },
    "01ee32e12f8055c12d8777b34a96426356fc2c81139001deb5b32a8971844942": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigatewayv2 as apigatewayv2\n\nhttp_api = apigatewayv2.HttpApi(self, \"MyHttpApi\")\n\ninvoke_task = tasks.CallApiGatewayHttpApiEndpoint(self, \"Call HTTP API\",\n    api_id=http_api.api_id,\n    api_stack=Stack.of(http_api),\n    method=tasks.HttpMethod.GET\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2;\n\nHttpApi httpApi = new HttpApi(this, \"MyHttpApi\");\n\nCallApiGatewayHttpApiEndpoint invokeTask = new CallApiGatewayHttpApiEndpoint(this, \"Call HTTP API\", new CallApiGatewayHttpApiEndpointProps {\n    ApiId = httpApi.ApiId,\n    ApiStack = Stack.Of(httpApi),\n    Method = HttpMethod.GET\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.*;\n\nHttpApi httpApi = new HttpApi(this, \"MyHttpApi\");\n\nCallApiGatewayHttpApiEndpoint invokeTask = CallApiGatewayHttpApiEndpoint.Builder.create(this, \"Call HTTP API\")\n        .apiId(httpApi.getApiId())\n        .apiStack(Stack.of(httpApi))\n        .method(HttpMethod.GET)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import apigatewayv2 \"github.com/aws-samples/dummy/awscdkawsapigatewayv2\"\nhttpApi := apigatewayv2.NewHttpApi(this, jsii.String(\"MyHttpApi\"))\n\ninvokeTask := tasks.NewCallApiGatewayHttpApiEndpoint(this, jsii.String(\"Call HTTP API\"), &callApiGatewayHttpApiEndpointProps{\n\tapiId: httpApi.apiId,\n\tapiStack: *stack.of(httpApi),\n\tmethod: tasks.httpMethod_GET,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nconst httpApi = new apigatewayv2.HttpApi(this, 'MyHttpApi');\n\nconst invokeTask = new tasks.CallApiGatewayHttpApiEndpoint(this, 'Call HTTP API', {\n  apiId: httpApi.apiId,\n  apiStack: Stack.of(httpApi),\n  method: tasks.HttpMethod.GET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.HttpMethod"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#apiId",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayHttpApiEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.CallApiGatewayHttpApiEndpointProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethod#GET",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stack#of",
        "constructs.Construct",
        "constructs.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst httpApi = new apigatewayv2.HttpApi(this, 'MyHttpApi');\n\nconst invokeTask = new tasks.CallApiGatewayHttpApiEndpoint(this, 'Call HTTP API', {\n  apiId: httpApi.apiId,\n  apiStack: Stack.of(httpApi),\n  method: tasks.HttpMethod.GET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0b40c896e6f6945c653310b6f8b23466b9b8b19ade6731e0ef44d51367f07be2"
    },
    "75ac95f7074a70b41e9a088a3265a98c3a4edafbcbdab648d97a96e211c3041a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_eks as eks\n\n\nmy_eks_cluster = eks.Cluster(self, \"my sample cluster\",\n    version=eks.KubernetesVersion.V1_18,\n    cluster_name=\"myEksCluster\"\n)\n\ntasks.EksCall(self, \"Call a EKS Endpoint\",\n    cluster=my_eks_cluster,\n    http_method=tasks.HttpMethods.GET,\n    http_path=\"/api/v1/namespaces/default/pods\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EKS;\n\n\nCluster myEksCluster = new Cluster(this, \"my sample cluster\", new ClusterProps {\n    Version = KubernetesVersion.V1_18,\n    ClusterName = \"myEksCluster\"\n});\n\nnew EksCall(this, \"Call a EKS Endpoint\", new EksCallProps {\n    Cluster = myEksCluster,\n    HttpMethod = HttpMethods.GET,\n    HttpPath = \"/api/v1/namespaces/default/pods\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.eks.*;\n\n\nCluster myEksCluster = Cluster.Builder.create(this, \"my sample cluster\")\n        .version(KubernetesVersion.V1_18)\n        .clusterName(\"myEksCluster\")\n        .build();\n\nEksCall.Builder.create(this, \"Call a EKS Endpoint\")\n        .cluster(myEksCluster)\n        .httpMethod(HttpMethods.GET)\n        .httpPath(\"/api/v1/namespaces/default/pods\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nmyEksCluster := eks.NewCluster(this, jsii.String(\"my sample cluster\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_18(),\n\tclusterName: jsii.String(\"myEksCluster\"),\n})\n\ntasks.NewEksCall(this, jsii.String(\"Call a EKS Endpoint\"), &eksCallProps{\n\tcluster: myEksCluster,\n\thttpMethod: tasks.httpMethods_GET,\n\thttpPath: jsii.String(\"/api/v1/namespaces/default/pods\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as eks from '@aws-cdk/aws-eks';\n\nconst myEksCluster = new eks.Cluster(this, 'my sample cluster', {\n  version: eks.KubernetesVersion.V1_18,\n  clusterName: 'myEksCluster',\n});\n\nnew tasks.EksCall(this, 'Call a EKS Endpoint', {\n  cluster: myEksCluster,\n  httpMethod: tasks.HttpMethods.GET,\n  httpPath: '/api/v1/namespaces/default/pods',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.HttpMethods"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_18",
        "@aws-cdk/aws-stepfunctions-tasks.EksCall",
        "@aws-cdk/aws-stepfunctions-tasks.EksCallProps",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethods",
        "@aws-cdk/aws-stepfunctions-tasks.HttpMethods#GET",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myEksCluster = new eks.Cluster(this, 'my sample cluster', {\n  version: eks.KubernetesVersion.V1_18,\n  clusterName: 'myEksCluster',\n});\n\nnew tasks.EksCall(this, 'Call a EKS Endpoint', {\n  cluster: myEksCluster,\n  httpMethod: tasks.HttpMethods.GET,\n  httpPath: '/api/v1/namespaces/default/pods',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 2,
        "193": 2,
        "194": 6,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2045a691be88a167462fca387dd6f1b77faf19bca3e58702fa3a7aa576860826"
    },
    "24ecf8030421475a9f91a4d4f287aeb5dbc49cb0371222dffab3049edb513e03": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.InputMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "70f6d729335030fc06e8c808c17deff83da5bfc2468b17a7b86f0fb664590de5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# activity: stepfunctions.Activity\n\ninvoke_activity = stepfunctions_tasks.InvokeActivity(activity,\n    heartbeat=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nActivity activity;\nInvokeActivity invokeActivity = new InvokeActivity(activity, new InvokeActivityProps {\n    Heartbeat = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nActivity activity;\n\nInvokeActivity invokeActivity = InvokeActivity.Builder.create(activity)\n        .heartbeat(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar activity activity\ninvokeActivity := stepfunctions_tasks.NewInvokeActivity(activity, &invokeActivityProps{\n\theartbeat: cdk.duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const activity: stepfunctions.Activity;\nconst invokeActivity = new stepfunctions_tasks.InvokeActivity(activity, /* all optional props */ {\n  heartbeat: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.InvokeActivity"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.InvokeActivity",
        "@aws-cdk/aws-stepfunctions-tasks.InvokeActivityProps",
        "@aws-cdk/aws-stepfunctions.IActivity",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const activity: stepfunctions.Activity;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst invokeActivity = new stepfunctions_tasks.InvokeActivity(activity, /* all optional props */ {\n  heartbeat: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "460219b9e78f15699e0becd3352cd0b2791d74fbf5936466bf62d9347ab3c8e6"
    },
    "7e648da1305b9b27679f088727e030f0483102fecc2eb5138f7826071baf4c5b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\ninvoke_activity_props = stepfunctions_tasks.InvokeActivityProps(\n    heartbeat=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\nInvokeActivityProps invokeActivityProps = new InvokeActivityProps {\n    Heartbeat = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nInvokeActivityProps invokeActivityProps = InvokeActivityProps.builder()\n        .heartbeat(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ninvokeActivityProps := &invokeActivityProps{\n\theartbeat: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\nconst invokeActivityProps: stepfunctions_tasks.InvokeActivityProps = {\n  heartbeat: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.InvokeActivityProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.InvokeActivityProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst invokeActivityProps: stepfunctions_tasks.InvokeActivityProps = {\n  heartbeat: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "8b5d5ec75fae9d75b4cb454a8538639666bf0592ecd2ef92cac15bf793ace0d0"
    },
    "4b91a990cafe6adfca0df5a3c4acf18220e4c538b4e0675c10c2e089880bb903": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# function_: lambda.Function\n# payload: Any\n\ninvoke_function = stepfunctions_tasks.InvokeFunction(function_,\n    payload={\n        \"payload_key\": payload\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nFunction function_;\nvar payload;\n\nInvokeFunction invokeFunction = new InvokeFunction(function_, new InvokeFunctionProps {\n    Payload = new Dictionary<string, object> {\n        { \"payloadKey\", payload }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nFunction function_;\nObject payload;\n\nInvokeFunction invokeFunction = InvokeFunction.Builder.create(function_)\n        .payload(Map.of(\n                \"payloadKey\", payload))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar function_ function\nvar payload interface{}\ninvokeFunction := stepfunctions_tasks.NewInvokeFunction(function_, &invokeFunctionProps{\n\tpayload: map[string]interface{}{\n\t\t\"payloadKey\": payload,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const function_: lambda.Function;\ndeclare const payload: any;\nconst invokeFunction = new stepfunctions_tasks.InvokeFunction(function_, /* all optional props */ {\n  payload: {\n    payloadKey: payload,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.InvokeFunction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.InvokeFunction",
        "@aws-cdk/aws-stepfunctions-tasks.InvokeFunctionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const function_: lambda.Function;\ndeclare const payload: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst invokeFunction = new stepfunctions_tasks.InvokeFunction(function_, /* all optional props */ {\n  payload: {\n    payloadKey: payload,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6677a4855d8b8f772bde14e7ebf1e5a63968e71bbe08de7cb24812e660d0e834"
    },
    "1221936acc00771b35097ce78e6df2ea3bfaee41422893bfb2997ee47a7e556b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# payload: Any\n\ninvoke_function_props = stepfunctions_tasks.InvokeFunctionProps(\n    payload={\n        \"payload_key\": payload\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nvar payload;\n\nInvokeFunctionProps invokeFunctionProps = new InvokeFunctionProps {\n    Payload = new Dictionary<string, object> {\n        { \"payloadKey\", payload }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nObject payload;\n\nInvokeFunctionProps invokeFunctionProps = InvokeFunctionProps.builder()\n        .payload(Map.of(\n                \"payloadKey\", payload))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar payload interface{}\ninvokeFunctionProps := &invokeFunctionProps{\n\tpayload: map[string]interface{}{\n\t\t\"payloadKey\": payload,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const payload: any;\nconst invokeFunctionProps: stepfunctions_tasks.InvokeFunctionProps = {\n  payload: {\n    payloadKey: payload,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.InvokeFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.InvokeFunctionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const payload: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst invokeFunctionProps: stepfunctions_tasks.InvokeFunctionProps = {\n  payload: {\n    payloadKey: payload,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4c8d0c6564492fa121187494706b248228dd7b68edfc4fd27a4d0bf8035580c4"
    },
    "45ff123662e55fdce41b037792e7701b9e381ae57a9c976a2528a3238b31db09": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\njob_dependency = stepfunctions_tasks.JobDependency(\n    job_id=\"jobId\",\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nJobDependency jobDependency = new JobDependency {\n    JobId = \"jobId\",\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nJobDependency jobDependency = JobDependency.builder()\n        .jobId(\"jobId\")\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\njobDependency := &jobDependency{\n\tjobId: jsii.String(\"jobId\"),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst jobDependency: stepfunctions_tasks.JobDependency = {\n  jobId: 'jobId',\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.JobDependency"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.JobDependency"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst jobDependency: stepfunctions_tasks.JobDependency = {\n  jobId: 'jobId',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "cebc3af3163193bdff5e5305de6ccc4cc2a3074b18698490c6616e12e953604d"
    },
    "e8b3332d664b0a7d1a95f2cb06939e2b3aa935e540f29d78fd06e2e68de7dba1": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_name=\"EMR-Containers-Job\",\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        )\n    ),\n    application_config=[tasks.ApplicationConfiguration(\n        classification=tasks.Classification.SPARK_DEFAULTS,\n        properties={\n            \"spark.executor.instances\": \"1\",\n            \"spark.executor.memory\": \"512M\"\n        }\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobName = \"EMR-Containers-Job\",\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        }\n    },\n    ApplicationConfig = new [] { new ApplicationConfiguration {\n        Classification = Classification.SPARK_DEFAULTS,\n        Properties = new Dictionary<string, string> {\n            { \"spark.executor.instances\", \"1\" },\n            { \"spark.executor.memory\", \"512M\" }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobName(\"EMR-Containers-Job\")\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .build())\n                .build())\n        .applicationConfig(List.of(ApplicationConfiguration.builder()\n                .classification(Classification.SPARK_DEFAULTS)\n                .properties(Map.of(\n                        \"spark.executor.instances\", \"1\",\n                        \"spark.executor.memory\", \"512M\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobName: jsii.String(\"EMR-Containers-Job\"),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t},\n\t},\n\tapplicationConfig: []applicationConfiguration{\n\t\t&applicationConfiguration{\n\t\t\tclassification: tasks.classification_SPARK_DEFAULTS(),\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"spark.executor.instances\": jsii.String(\"1\"),\n\t\t\t\t\"spark.executor.memory\": jsii.String(\"512M\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.JobDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.Classification",
        "@aws-cdk/aws-stepfunctions-tasks.Classification#SPARK_DEFAULTS",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 23,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 11
      },
      "fqnsFingerprint": "f326c63003a23b7bc92021d0409fcc199f142e6192e2f115710fd3ed22301c96"
    },
    "82adb5bb71930256ef59ddb2acbc9299a317c09b429a483b66528a8952512a0f": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Invoke Handler\",\n    lambda_function=fn,\n    payload=sfn.TaskInput.from_json_path_at(\"$.input\"),\n    invocation_type=tasks.LambdaInvocationType.EVENT\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nLambdaInvoke submitJob = new LambdaInvoke(this, \"Invoke Handler\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    Payload = TaskInput.FromJsonPathAt(\"$.input\"),\n    InvocationType = LambdaInvocationType.EVENT\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Invoke Handler\")\n        .lambdaFunction(fn)\n        .payload(TaskInput.fromJsonPathAt(\"$.input\"))\n        .invocationType(LambdaInvocationType.EVENT)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"Invoke Handler\"), &lambdaInvokeProps{\n\tlambdaFunction: fn,\n\tpayload: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.input\")),\n\tinvocationType: tasks.lambdaInvocationType_EVENT,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  payload: sfn.TaskInput.fromJsonPathAt('$.input'),\n  invocationType: tasks.LambdaInvocationType.EVENT,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.LambdaInvocationType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvocationType",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvocationType#EVENT",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  payload: sfn.TaskInput.fromJsonPathAt('$.input'),\n  invocationType: tasks.LambdaInvocationType.EVENT,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e15168f7d8e3418a8e8b332d6a7afe52439c12dc34879861210107c2cf66e864"
    },
    "6504d608d6ce412c31809fe2547d1a0b0bd00492ff7fbffdd7d4e2ea87312efb": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# order_fn: lambda.Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"InvokeOrderProcessor\",\n    lambda_function=order_fn,\n    payload=sfn.TaskInput.from_object({\n        \"OrderId\": sfn.JsonPath.string_at(\"$.OrderId\")\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nFunction orderFn;\n\n\nLambdaInvoke submitJob = new LambdaInvoke(this, \"InvokeOrderProcessor\", new LambdaInvokeProps {\n    LambdaFunction = orderFn,\n    Payload = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"OrderId\", JsonPath.StringAt(\"$.OrderId\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nFunction orderFn;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"InvokeOrderProcessor\")\n        .lambdaFunction(orderFn)\n        .payload(TaskInput.fromObject(Map.of(\n                \"OrderId\", JsonPath.stringAt(\"$.OrderId\"))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nvar orderFn function\n\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"InvokeOrderProcessor\"), &lambdaInvokeProps{\n\tlambdaFunction: orderFn,\n\tpayload: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"OrderId\": sfn.JsonPath.stringAt(jsii.String(\"$.OrderId\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const orderFn: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'InvokeOrderProcessor', {\n  lambdaFunction: orderFn,\n  payload: sfn.TaskInput.fromObject({\n    OrderId: sfn.JsonPath.stringAt('$.OrderId'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const orderFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'InvokeOrderProcessor', {\n  lambdaFunction: orderFn,\n  payload: sfn.TaskInput.fromObject({\n    OrderId: sfn.JsonPath.stringAt('$.OrderId'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4c83379fdf34701032294f755fb70afd17a9a7edee8a0dfc88ee41fa1f9bffb8"
    },
    "8bb4e8541a705aac449093ee1fbd2364664f2b7f2089f30dd278f83b22609f40": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# order_fn: lambda.Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"InvokeOrderProcessor\",\n    lambda_function=order_fn,\n    payload=sfn.TaskInput.from_object({\n        \"OrderId\": sfn.JsonPath.string_at(\"$.OrderId\")\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nFunction orderFn;\n\n\nLambdaInvoke submitJob = new LambdaInvoke(this, \"InvokeOrderProcessor\", new LambdaInvokeProps {\n    LambdaFunction = orderFn,\n    Payload = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"OrderId\", JsonPath.StringAt(\"$.OrderId\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nFunction orderFn;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"InvokeOrderProcessor\")\n        .lambdaFunction(orderFn)\n        .payload(TaskInput.fromObject(Map.of(\n                \"OrderId\", JsonPath.stringAt(\"$.OrderId\"))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nvar orderFn function\n\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"InvokeOrderProcessor\"), &lambdaInvokeProps{\n\tlambdaFunction: orderFn,\n\tpayload: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"OrderId\": sfn.JsonPath.stringAt(jsii.String(\"$.OrderId\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const orderFn: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'InvokeOrderProcessor', {\n  lambdaFunction: orderFn,\n  payload: sfn.TaskInput.fromObject({\n    OrderId: sfn.JsonPath.stringAt('$.OrderId'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const orderFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'InvokeOrderProcessor', {\n  lambdaFunction: orderFn,\n  payload: sfn.TaskInput.fromObject({\n    OrderId: sfn.JsonPath.stringAt('$.OrderId'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4c83379fdf34701032294f755fb70afd17a9a7edee8a0dfc88ee41fa1f9bffb8"
    },
    "b63f1f998e58adea14302f36a2f49554c64c948c1a3b20bba3229dbaf110505d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n\nlaunch_target_bind_options = stepfunctions_tasks.LaunchTargetBindOptions(\n    task_definition=task_definition,\n\n    # the properties below are optional\n    cluster=cluster\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nCluster cluster;\nTaskDefinition taskDefinition;\n\nLaunchTargetBindOptions launchTargetBindOptions = new LaunchTargetBindOptions {\n    TaskDefinition = taskDefinition,\n\n    // the properties below are optional\n    Cluster = cluster\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nCluster cluster;\nTaskDefinition taskDefinition;\n\nLaunchTargetBindOptions launchTargetBindOptions = LaunchTargetBindOptions.builder()\n        .taskDefinition(taskDefinition)\n\n        // the properties below are optional\n        .cluster(cluster)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar cluster cluster\nvar taskDefinition taskDefinition\nlaunchTargetBindOptions := &launchTargetBindOptions{\n\ttaskDefinition: taskDefinition,\n\n\t// the properties below are optional\n\tcluster: cluster,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst launchTargetBindOptions: stepfunctions_tasks.LaunchTargetBindOptions = {\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  cluster: cluster,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.LaunchTargetBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.LaunchTargetBindOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTargetBindOptions: stepfunctions_tasks.LaunchTargetBindOptions = {\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  cluster: cluster,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9653235c6a43d40ff1bf508a86febfc3be3d1fed940114914fd2dfdb998e5381"
    },
    "b0891556d9d76b27e2bc1d5fbca6eaee3df5eaf1eca6014dfe9731fc7bd4c4da": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\")\n\n# Use a field from the execution data as message.\ntask1 = tasks.SnsPublish(self, \"Publish1\",\n    topic=topic,\n    integration_pattern=sfn.IntegrationPattern.REQUEST_RESPONSE,\n    message=sfn.TaskInput.from_data_at(\"$.state.message\"),\n    message_attributes={\n        \"place\": tasks.MessageAttribute(\n            value=sfn.JsonPath.string_at(\"$.place\")\n        ),\n        \"pic\": tasks.MessageAttribute(\n            # BINARY must be explicitly set\n            data_type=tasks.MessageAttributeDataType.BINARY,\n            value=sfn.JsonPath.string_at(\"$.pic\")\n        ),\n        \"people\": tasks.MessageAttribute(\n            value=4\n        ),\n        \"handles\": tasks.MessageAttribute(\n            value=[\"@kslater\", \"@jjf\", null, \"@mfanning\"]\n        )\n    }\n)\n\n# Combine a field from the execution data with\n# a literal object.\ntask2 = tasks.SnsPublish(self, \"Publish2\",\n    topic=topic,\n    message=sfn.TaskInput.from_object({\n        \"field1\": \"somedata\",\n        \"field2\": sfn.JsonPath.string_at(\"$.field2\")\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\");\n\n// Use a field from the execution data as message.\nSnsPublish task1 = new SnsPublish(this, \"Publish1\", new SnsPublishProps {\n    Topic = topic,\n    IntegrationPattern = IntegrationPattern.REQUEST_RESPONSE,\n    Message = TaskInput.FromDataAt(\"$.state.message\"),\n    MessageAttributes = new Dictionary<string, MessageAttribute> {\n        { \"place\", new MessageAttribute {\n            Value = JsonPath.StringAt(\"$.place\")\n        } },\n        { \"pic\", new MessageAttribute {\n            // BINARY must be explicitly set\n            DataType = MessageAttributeDataType.BINARY,\n            Value = JsonPath.StringAt(\"$.pic\")\n        } },\n        { \"people\", new MessageAttribute {\n            Value = 4\n        } },\n        { \"handles\", new MessageAttribute {\n            Value = new [] { \"@kslater\", \"@jjf\", null, \"@mfanning\" }\n        } }\n    }\n});\n\n// Combine a field from the execution data with\n// a literal object.\nSnsPublish task2 = new SnsPublish(this, \"Publish2\", new SnsPublishProps {\n    Topic = topic,\n    Message = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"field1\", \"somedata\" },\n        { \"field2\", JsonPath.StringAt(\"$.field2\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"Topic\");\n\n// Use a field from the execution data as message.\nSnsPublish task1 = SnsPublish.Builder.create(this, \"Publish1\")\n        .topic(topic)\n        .integrationPattern(IntegrationPattern.REQUEST_RESPONSE)\n        .message(TaskInput.fromDataAt(\"$.state.message\"))\n        .messageAttributes(Map.of(\n                \"place\", MessageAttribute.builder()\n                        .value(JsonPath.stringAt(\"$.place\"))\n                        .build(),\n                \"pic\", MessageAttribute.builder()\n                        // BINARY must be explicitly set\n                        .dataType(MessageAttributeDataType.BINARY)\n                        .value(JsonPath.stringAt(\"$.pic\"))\n                        .build(),\n                \"people\", MessageAttribute.builder()\n                        .value(4)\n                        .build(),\n                \"handles\", MessageAttribute.builder()\n                        .value(List.of(\"@kslater\", \"@jjf\", null, \"@mfanning\"))\n                        .build()))\n        .build();\n\n// Combine a field from the execution data with\n// a literal object.\nSnsPublish task2 = SnsPublish.Builder.create(this, \"Publish2\")\n        .topic(topic)\n        .message(TaskInput.fromObject(Map.of(\n                \"field1\", \"somedata\",\n                \"field2\", JsonPath.stringAt(\"$.field2\"))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "topic := sns.NewTopic(this, jsii.String(\"Topic\"))\n\n// Use a field from the execution data as message.\ntask1 := tasks.NewSnsPublish(this, jsii.String(\"Publish1\"), &snsPublishProps{\n\ttopic: topic,\n\tintegrationPattern: sfn.integrationPattern_REQUEST_RESPONSE,\n\tmessage: sfn.taskInput.fromDataAt(jsii.String(\"$.state.message\")),\n\tmessageAttributes: map[string]messageAttribute{\n\t\t\"place\": &messageAttribute{\n\t\t\t\"value\": sfn.JsonPath.stringAt(jsii.String(\"$.place\")),\n\t\t},\n\t\t\"pic\": &messageAttribute{\n\t\t\t// BINARY must be explicitly set\n\t\t\t\"dataType\": tasks.MessageAttributeDataType_BINARY,\n\t\t\t\"value\": sfn.JsonPath.stringAt(jsii.String(\"$.pic\")),\n\t\t},\n\t\t\"people\": &messageAttribute{\n\t\t\t\"value\": jsii.Number(4),\n\t\t},\n\t\t\"handles\": &messageAttribute{\n\t\t\t\"value\": []interface{}{\n\t\t\t\tjsii.String(\"@kslater\"),\n\t\t\t\tjsii.String(\"@jjf\"),\n\t\t\t\tnil,\n\t\t\t\tjsii.String(\"@mfanning\"),\n\t\t\t},\n\t\t},\n\t},\n})\n\n// Combine a field from the execution data with\n// a literal object.\ntask2 := tasks.NewSnsPublish(this, jsii.String(\"Publish2\"), &snsPublishProps{\n\ttopic: topic,\n\tmessage: sfn.*taskInput.fromObject(map[string]interface{}{\n\t\t\"field1\": jsii.String(\"somedata\"),\n\t\t\"field2\": sfn.JsonPath.stringAt(jsii.String(\"$.field2\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SnsPublish(this, 'Publish1', {\n  topic,\n  integrationPattern: sfn.IntegrationPattern.REQUEST_RESPONSE,\n  message: sfn.TaskInput.fromDataAt('$.state.message'),\n  messageAttributes: {\n    place: {\n      value: sfn.JsonPath.stringAt('$.place'),\n    },\n    pic: {\n      // BINARY must be explicitly set\n      dataType: tasks.MessageAttributeDataType.BINARY,\n      value: sfn.JsonPath.stringAt('$.pic'),\n    },\n    people: {\n      value: 4,\n    },\n    handles: {\n      value: ['@kslater', '@jjf', null, '@mfanning'],\n    },\n  },\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SnsPublish(this, 'Publish2', {\n  topic,\n  message: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.MessageAttribute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-stepfunctions-tasks.MessageAttribute",
        "@aws-cdk/aws-stepfunctions-tasks.MessageAttributeDataType",
        "@aws-cdk/aws-stepfunctions-tasks.MessageAttributeDataType#BINARY",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublish",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#REQUEST_RESPONSE",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromDataAt",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SnsPublish(this, 'Publish1', {\n  topic,\n  integrationPattern: sfn.IntegrationPattern.REQUEST_RESPONSE,\n  message: sfn.TaskInput.fromDataAt('$.state.message'),\n  messageAttributes: {\n    place: {\n      value: sfn.JsonPath.stringAt('$.place'),\n    },\n    pic: {\n      // BINARY must be explicitly set\n      dataType: tasks.MessageAttributeDataType.BINARY,\n      value: sfn.JsonPath.stringAt('$.pic'),\n    },\n    people: {\n      value: 4,\n    },\n    handles: {\n      value: ['@kslater', '@jjf', null, '@mfanning'],\n    },\n  },\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SnsPublish(this, 'Publish2', {\n  topic,\n  message: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 11,
        "75": 47,
        "100": 1,
        "104": 3,
        "192": 1,
        "193": 8,
        "194": 17,
        "196": 5,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 15,
        "282": 2
      },
      "fqnsFingerprint": "685bbc194d92bf39863849a797859bc5bffcbe55292677e3dc7e59b158e7a94f"
    },
    "f7b58be19e8e568dcdaf6350e2c47da7ffd3ed186d14bed24ca248fabd522fb9": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\")\n\n# Use a field from the execution data as message.\ntask1 = tasks.SnsPublish(self, \"Publish1\",\n    topic=topic,\n    integration_pattern=sfn.IntegrationPattern.REQUEST_RESPONSE,\n    message=sfn.TaskInput.from_data_at(\"$.state.message\"),\n    message_attributes={\n        \"place\": tasks.MessageAttribute(\n            value=sfn.JsonPath.string_at(\"$.place\")\n        ),\n        \"pic\": tasks.MessageAttribute(\n            # BINARY must be explicitly set\n            data_type=tasks.MessageAttributeDataType.BINARY,\n            value=sfn.JsonPath.string_at(\"$.pic\")\n        ),\n        \"people\": tasks.MessageAttribute(\n            value=4\n        ),\n        \"handles\": tasks.MessageAttribute(\n            value=[\"@kslater\", \"@jjf\", null, \"@mfanning\"]\n        )\n    }\n)\n\n# Combine a field from the execution data with\n# a literal object.\ntask2 = tasks.SnsPublish(self, \"Publish2\",\n    topic=topic,\n    message=sfn.TaskInput.from_object({\n        \"field1\": \"somedata\",\n        \"field2\": sfn.JsonPath.string_at(\"$.field2\")\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\");\n\n// Use a field from the execution data as message.\nSnsPublish task1 = new SnsPublish(this, \"Publish1\", new SnsPublishProps {\n    Topic = topic,\n    IntegrationPattern = IntegrationPattern.REQUEST_RESPONSE,\n    Message = TaskInput.FromDataAt(\"$.state.message\"),\n    MessageAttributes = new Dictionary<string, MessageAttribute> {\n        { \"place\", new MessageAttribute {\n            Value = JsonPath.StringAt(\"$.place\")\n        } },\n        { \"pic\", new MessageAttribute {\n            // BINARY must be explicitly set\n            DataType = MessageAttributeDataType.BINARY,\n            Value = JsonPath.StringAt(\"$.pic\")\n        } },\n        { \"people\", new MessageAttribute {\n            Value = 4\n        } },\n        { \"handles\", new MessageAttribute {\n            Value = new [] { \"@kslater\", \"@jjf\", null, \"@mfanning\" }\n        } }\n    }\n});\n\n// Combine a field from the execution data with\n// a literal object.\nSnsPublish task2 = new SnsPublish(this, \"Publish2\", new SnsPublishProps {\n    Topic = topic,\n    Message = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"field1\", \"somedata\" },\n        { \"field2\", JsonPath.StringAt(\"$.field2\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"Topic\");\n\n// Use a field from the execution data as message.\nSnsPublish task1 = SnsPublish.Builder.create(this, \"Publish1\")\n        .topic(topic)\n        .integrationPattern(IntegrationPattern.REQUEST_RESPONSE)\n        .message(TaskInput.fromDataAt(\"$.state.message\"))\n        .messageAttributes(Map.of(\n                \"place\", MessageAttribute.builder()\n                        .value(JsonPath.stringAt(\"$.place\"))\n                        .build(),\n                \"pic\", MessageAttribute.builder()\n                        // BINARY must be explicitly set\n                        .dataType(MessageAttributeDataType.BINARY)\n                        .value(JsonPath.stringAt(\"$.pic\"))\n                        .build(),\n                \"people\", MessageAttribute.builder()\n                        .value(4)\n                        .build(),\n                \"handles\", MessageAttribute.builder()\n                        .value(List.of(\"@kslater\", \"@jjf\", null, \"@mfanning\"))\n                        .build()))\n        .build();\n\n// Combine a field from the execution data with\n// a literal object.\nSnsPublish task2 = SnsPublish.Builder.create(this, \"Publish2\")\n        .topic(topic)\n        .message(TaskInput.fromObject(Map.of(\n                \"field1\", \"somedata\",\n                \"field2\", JsonPath.stringAt(\"$.field2\"))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "topic := sns.NewTopic(this, jsii.String(\"Topic\"))\n\n// Use a field from the execution data as message.\ntask1 := tasks.NewSnsPublish(this, jsii.String(\"Publish1\"), &snsPublishProps{\n\ttopic: topic,\n\tintegrationPattern: sfn.integrationPattern_REQUEST_RESPONSE,\n\tmessage: sfn.taskInput.fromDataAt(jsii.String(\"$.state.message\")),\n\tmessageAttributes: map[string]messageAttribute{\n\t\t\"place\": &messageAttribute{\n\t\t\t\"value\": sfn.JsonPath.stringAt(jsii.String(\"$.place\")),\n\t\t},\n\t\t\"pic\": &messageAttribute{\n\t\t\t// BINARY must be explicitly set\n\t\t\t\"dataType\": tasks.MessageAttributeDataType_BINARY,\n\t\t\t\"value\": sfn.JsonPath.stringAt(jsii.String(\"$.pic\")),\n\t\t},\n\t\t\"people\": &messageAttribute{\n\t\t\t\"value\": jsii.Number(4),\n\t\t},\n\t\t\"handles\": &messageAttribute{\n\t\t\t\"value\": []interface{}{\n\t\t\t\tjsii.String(\"@kslater\"),\n\t\t\t\tjsii.String(\"@jjf\"),\n\t\t\t\tnil,\n\t\t\t\tjsii.String(\"@mfanning\"),\n\t\t\t},\n\t\t},\n\t},\n})\n\n// Combine a field from the execution data with\n// a literal object.\ntask2 := tasks.NewSnsPublish(this, jsii.String(\"Publish2\"), &snsPublishProps{\n\ttopic: topic,\n\tmessage: sfn.*taskInput.fromObject(map[string]interface{}{\n\t\t\"field1\": jsii.String(\"somedata\"),\n\t\t\"field2\": sfn.JsonPath.stringAt(jsii.String(\"$.field2\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SnsPublish(this, 'Publish1', {\n  topic,\n  integrationPattern: sfn.IntegrationPattern.REQUEST_RESPONSE,\n  message: sfn.TaskInput.fromDataAt('$.state.message'),\n  messageAttributes: {\n    place: {\n      value: sfn.JsonPath.stringAt('$.place'),\n    },\n    pic: {\n      // BINARY must be explicitly set\n      dataType: tasks.MessageAttributeDataType.BINARY,\n      value: sfn.JsonPath.stringAt('$.pic'),\n    },\n    people: {\n      value: 4,\n    },\n    handles: {\n      value: ['@kslater', '@jjf', null, '@mfanning'],\n    },\n  },\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SnsPublish(this, 'Publish2', {\n  topic,\n  message: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.MessageAttributeDataType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-stepfunctions-tasks.MessageAttribute",
        "@aws-cdk/aws-stepfunctions-tasks.MessageAttributeDataType",
        "@aws-cdk/aws-stepfunctions-tasks.MessageAttributeDataType#BINARY",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublish",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#REQUEST_RESPONSE",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromDataAt",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SnsPublish(this, 'Publish1', {\n  topic,\n  integrationPattern: sfn.IntegrationPattern.REQUEST_RESPONSE,\n  message: sfn.TaskInput.fromDataAt('$.state.message'),\n  messageAttributes: {\n    place: {\n      value: sfn.JsonPath.stringAt('$.place'),\n    },\n    pic: {\n      // BINARY must be explicitly set\n      dataType: tasks.MessageAttributeDataType.BINARY,\n      value: sfn.JsonPath.stringAt('$.pic'),\n    },\n    people: {\n      value: 4,\n    },\n    handles: {\n      value: ['@kslater', '@jjf', null, '@mfanning'],\n    },\n  },\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SnsPublish(this, 'Publish2', {\n  topic,\n  message: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 11,
        "75": 47,
        "100": 1,
        "104": 3,
        "192": 1,
        "193": 8,
        "194": 17,
        "196": 5,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 15,
        "282": 2
      },
      "fqnsFingerprint": "685bbc194d92bf39863849a797859bc5bffcbe55292677e3dc7e59b158e7a94f"
    },
    "8fa7ed1019b2ff42ccc0f4332da8a734450a950240679ebe74108980b543fecf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nmetric_definition = stepfunctions_tasks.MetricDefinition(\n    name=\"name\",\n    regex=\"regex\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nMetricDefinition metricDefinition = new MetricDefinition {\n    Name = \"name\",\n    Regex = \"regex\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nMetricDefinition metricDefinition = MetricDefinition.builder()\n        .name(\"name\")\n        .regex(\"regex\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nmetricDefinition := &metricDefinition{\n\tname: jsii.String(\"name\"),\n\tregex: jsii.String(\"regex\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst metricDefinition: stepfunctions_tasks.MetricDefinition = {\n  name: 'name',\n  regex: 'regex',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.MetricDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.MetricDefinition"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst metricDefinition: stepfunctions_tasks.MetricDefinition = {\n  name: 'name',\n  regex: 'regex',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ca62fbb33d7749701eabb8473839ea36238e504a9b7366d92790c37d33ca0843"
    },
    "dcefdcfb511082f1a3fccaa980f291fffe8d16c6670e10f9e0ba6bcafb2700d1": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateModel(self, \"Sagemaker\",\n    model_name=\"MyModel\",\n    primary_container=tasks.ContainerDefinition(\n        image=tasks.DockerImage.from_json_expression(sfn.JsonPath.string_at(\"$.Model.imageName\")),\n        mode=tasks.Mode.SINGLE_MODEL,\n        model_s3_location=tasks.S3Location.from_json_expression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateModel(this, \"Sagemaker\", new SageMakerCreateModelProps {\n    ModelName = \"MyModel\",\n    PrimaryContainer = new ContainerDefinition(new ContainerDefinitionOptions {\n        Image = DockerImage.FromJsonExpression(JsonPath.StringAt(\"$.Model.imageName\")),\n        Mode = Mode.SINGLE_MODEL,\n        ModelS3Location = S3Location.FromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateModel.Builder.create(this, \"Sagemaker\")\n        .modelName(\"MyModel\")\n        .primaryContainer(ContainerDefinition.Builder.create()\n                .image(DockerImage.fromJsonExpression(JsonPath.stringAt(\"$.Model.imageName\")))\n                .mode(Mode.SINGLE_MODEL)\n                .modelS3Location(S3Location.fromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateModel(this, jsii.String(\"Sagemaker\"), &sageMakerCreateModelProps{\n\tmodelName: jsii.String(\"MyModel\"),\n\tprimaryContainer: tasks.NewContainerDefinition(&containerDefinitionOptions{\n\t\timage: tasks.dockerImage.fromJsonExpression(sfn.jsonPath.stringAt(jsii.String(\"$.Model.imageName\"))),\n\t\tmode: tasks.mode_SINGLE_MODEL,\n\t\tmodelS3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.Mode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinitionOptions",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.IContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.Mode",
        "@aws-cdk/aws-stepfunctions-tasks.Mode#SINGLE_MODEL",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModel",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModelProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "193": 2,
        "194": 10,
        "196": 3,
        "197": 2,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "b1970df7f72e14acedbd643173af4da87ef70ae8be1bea9122c50f2481b3c3ee"
    },
    "110bdc8d985924917063c5e3115084a67e07d01ac52f5a90c3a095f75d898b2b": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTransformJob(self, \"Batch Inference\",\n    transform_job_name=\"MyTransformJob\",\n    model_name=\"MyModelName\",\n    model_client_options=tasks.ModelClientOptions(\n        invocations_max_retries=3,  # default is 0\n        invocations_timeout=Duration.minutes(5)\n    ),\n    transform_input=tasks.TransformInput(\n        transform_data_source=tasks.TransformDataSource(\n            s3_data_source=tasks.TransformS3DataSource(\n                s3_uri=\"s3://inputbucket/train\",\n                s3_data_type=tasks.S3DataType.S3_PREFIX\n            )\n        )\n    ),\n    transform_output=tasks.TransformOutput(\n        s3_output_path=\"s3://outputbucket/TransformJobOutputPath\"\n    ),\n    transform_resources=tasks.TransformResources(\n        instance_count=1,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTransformJob(this, \"Batch Inference\", new SageMakerCreateTransformJobProps {\n    TransformJobName = \"MyTransformJob\",\n    ModelName = \"MyModelName\",\n    ModelClientOptions = new ModelClientOptions {\n        InvocationsMaxRetries = 3,  // default is 0\n        InvocationsTimeout = Duration.Minutes(5)\n    },\n    TransformInput = new TransformInput {\n        TransformDataSource = new TransformDataSource {\n            S3DataSource = new TransformS3DataSource {\n                S3Uri = \"s3://inputbucket/train\",\n                S3DataType = S3DataType.S3_PREFIX\n            }\n        }\n    },\n    TransformOutput = new TransformOutput {\n        S3OutputPath = \"s3://outputbucket/TransformJobOutputPath\"\n    },\n    TransformResources = new TransformResources {\n        InstanceCount = 1,\n        InstanceType = InstanceType.Of(InstanceClass.M4, InstanceSize.XLARGE)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTransformJob.Builder.create(this, \"Batch Inference\")\n        .transformJobName(\"MyTransformJob\")\n        .modelName(\"MyModelName\")\n        .modelClientOptions(ModelClientOptions.builder()\n                .invocationsMaxRetries(3) // default is 0\n                .invocationsTimeout(Duration.minutes(5))\n                .build())\n        .transformInput(TransformInput.builder()\n                .transformDataSource(TransformDataSource.builder()\n                        .s3DataSource(TransformS3DataSource.builder()\n                                .s3Uri(\"s3://inputbucket/train\")\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .build())\n                        .build())\n                .build())\n        .transformOutput(TransformOutput.builder()\n                .s3OutputPath(\"s3://outputbucket/TransformJobOutputPath\")\n                .build())\n        .transformResources(TransformResources.builder()\n                .instanceCount(1)\n                .instanceType(InstanceType.of(InstanceClass.M4, InstanceSize.XLARGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTransformJob(this, jsii.String(\"Batch Inference\"), &sageMakerCreateTransformJobProps{\n\ttransformJobName: jsii.String(\"MyTransformJob\"),\n\tmodelName: jsii.String(\"MyModelName\"),\n\tmodelClientOptions: &modelClientOptions{\n\t\tinvocationsMaxRetries: jsii.Number(3),\n\t\t // default is 0\n\t\tinvocationsTimeout: duration.minutes(jsii.Number(5)),\n\t},\n\ttransformInput: &transformInput{\n\t\ttransformDataSource: &transformDataSource{\n\t\t\ts3DataSource: &transformS3DataSource{\n\t\t\t\ts3Uri: jsii.String(\"s3://inputbucket/train\"),\n\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t},\n\t\t},\n\t},\n\ttransformOutput: &transformOutput{\n\t\ts3OutputPath: jsii.String(\"s3://outputbucket/TransformJobOutputPath\"),\n\t},\n\ttransformResources: &transformResources{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M4, ec2.instanceSize_XLARGE),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ModelClientOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M4",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.ModelClientOptions",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.TransformDataSource",
        "@aws-cdk/aws-stepfunctions-tasks.TransformInput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformOutput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformResources",
        "@aws-cdk/aws-stepfunctions-tasks.TransformS3DataSource",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 31,
        "104": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 15
      },
      "fqnsFingerprint": "fd299dab2d91364d338c465c76cc2f657ae1e29ff838db159e29f333974ba0fb"
    },
    "0897b9c8115c3f7f544f5500f51f49da6d608d30bf1405ed9d74f31d9f40ed0e": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            spark_submit_parameters=\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        )\n    ),\n    monitoring=tasks.Monitoring(\n        logging=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            SparkSubmitParameters = \"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        }\n    },\n    Monitoring = new Monitoring {\n        Logging = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .sparkSubmitParameters(\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\")\n                        .build())\n                .build())\n        .monitoring(Monitoring.builder()\n                .logging(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t\tsparkSubmitParameters: jsii.String(\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"),\n\t\t},\n\t},\n\tmonitoring: &monitoring{\n\t\tlogging: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n  monitoring: {\n    logging: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.Monitoring"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.Monitoring",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n  monitoring: {\n    logging: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 1,
        "106": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 8
      },
      "fqnsFingerprint": "78590f203cbda285f99fc64bbbf70fdca618458749f07518e5a18a2188d3c364"
    },
    "26d93e9fce4fdb7adb579190335632d993732215fed439537438092644120f9e": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "24ade3ebb49925f4174ea59570cfd5b967ebfce26f1c9b1d8cbe89eb0a1584cc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# accelerator_type: stepfunctions_tasks.AcceleratorType\n# instance_type: ec2.InstanceType\n\nproduction_variant = stepfunctions_tasks.ProductionVariant(\n    instance_type=instance_type,\n    model_name=\"modelName\",\n    variant_name=\"variantName\",\n\n    # the properties below are optional\n    accelerator_type=accelerator_type,\n    initial_instance_count=123,\n    initial_variant_weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nAcceleratorType acceleratorType;\nInstanceType instanceType;\n\nProductionVariant productionVariant = new ProductionVariant {\n    InstanceType = instanceType,\n    ModelName = \"modelName\",\n    VariantName = \"variantName\",\n\n    // the properties below are optional\n    AcceleratorType = acceleratorType,\n    InitialInstanceCount = 123,\n    InitialVariantWeight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nAcceleratorType acceleratorType;\nInstanceType instanceType;\n\nProductionVariant productionVariant = ProductionVariant.builder()\n        .instanceType(instanceType)\n        .modelName(\"modelName\")\n        .variantName(\"variantName\")\n\n        // the properties below are optional\n        .acceleratorType(acceleratorType)\n        .initialInstanceCount(123)\n        .initialVariantWeight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar acceleratorType acceleratorType\nvar instanceType instanceType\nproductionVariant := &productionVariant{\n\tinstanceType: instanceType,\n\tmodelName: jsii.String(\"modelName\"),\n\tvariantName: jsii.String(\"variantName\"),\n\n\t// the properties below are optional\n\tacceleratorType: acceleratorType,\n\tinitialInstanceCount: jsii.Number(123),\n\tinitialVariantWeight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const acceleratorType: stepfunctions_tasks.AcceleratorType;\ndeclare const instanceType: ec2.InstanceType;\nconst productionVariant: stepfunctions_tasks.ProductionVariant = {\n  instanceType: instanceType,\n  modelName: 'modelName',\n  variantName: 'variantName',\n\n  // the properties below are optional\n  acceleratorType: acceleratorType,\n  initialInstanceCount: 123,\n  initialVariantWeight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ProductionVariant"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-stepfunctions-tasks.AcceleratorType",
        "@aws-cdk/aws-stepfunctions-tasks.ProductionVariant"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const acceleratorType: stepfunctions_tasks.AcceleratorType;\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst productionVariant: stepfunctions_tasks.ProductionVariant = {\n  instanceType: instanceType,\n  modelName: 'modelName',\n  variantName: 'variantName',\n\n  // the properties below are optional\n  acceleratorType: acceleratorType,\n  initialInstanceCount: 123,\n  initialVariantWeight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 19,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "301f45192889ee9d72a82e41bfe83109c7b85a6644ab91841983cbdb8b57e8a5"
    },
    "96dfbd1484378c87d6dd756c001fd13d4f1239c3d440cd64a58355f25f1565ff": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# task_input: stepfunctions.TaskInput\n# topic: sns.Topic\n\npublish_to_topic = stepfunctions_tasks.PublishToTopic(topic,\n    message=task_input,\n\n    # the properties below are optional\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    message_per_subscription_type=False,\n    subject=\"subject\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nTaskInput taskInput;\nTopic topic;\n\nPublishToTopic publishToTopic = new PublishToTopic(topic, new PublishToTopicProps {\n    Message = taskInput,\n\n    // the properties below are optional\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    MessagePerSubscriptionType = false,\n    Subject = \"subject\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nTaskInput taskInput;\nTopic topic;\n\nPublishToTopic publishToTopic = PublishToTopic.Builder.create(topic)\n        .message(taskInput)\n\n        // the properties below are optional\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .messagePerSubscriptionType(false)\n        .subject(\"subject\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import sns \"github.com/aws-samples/dummy/awscdkawssns\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar taskInput taskInput\nvar topic topic\npublishToTopic := stepfunctions_tasks.NewPublishToTopic(topic, &publishToTopicProps{\n\tmessage: taskInput,\n\n\t// the properties below are optional\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tmessagePerSubscriptionType: jsii.Boolean(false),\n\tsubject: jsii.String(\"subject\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const taskInput: stepfunctions.TaskInput;\ndeclare const topic: sns.Topic;\nconst publishToTopic = new stepfunctions_tasks.PublishToTopic(topic, {\n  message: taskInput,\n\n  // the properties below are optional\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  messagePerSubscriptionType: false,\n  subject: 'subject',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.PublishToTopic"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-stepfunctions-tasks.PublishToTopic",
        "@aws-cdk/aws-stepfunctions-tasks.PublishToTopicProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET",
        "@aws-cdk/aws-stepfunctions.TaskInput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const taskInput: stepfunctions.TaskInput;\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst publishToTopic = new stepfunctions_tasks.PublishToTopic(topic, {\n  message: taskInput,\n\n  // the properties below are optional\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  messagePerSubscriptionType: false,\n  subject: 'subject',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "91": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "302f56dfe6578c84fd84055ab03e026e497644bf6d3142b4b4be8b8ea42e92c9"
    },
    "f21a160fa68f4ea44b2fc33dad6bb39ebc1856a13f6dd7b3637c7a0b16fb4234": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# task_input: stepfunctions.TaskInput\n\npublish_to_topic_props = stepfunctions_tasks.PublishToTopicProps(\n    message=task_input,\n\n    # the properties below are optional\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    message_per_subscription_type=False,\n    subject=\"subject\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nTaskInput taskInput;\n\nPublishToTopicProps publishToTopicProps = new PublishToTopicProps {\n    Message = taskInput,\n\n    // the properties below are optional\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    MessagePerSubscriptionType = false,\n    Subject = \"subject\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nTaskInput taskInput;\n\nPublishToTopicProps publishToTopicProps = PublishToTopicProps.builder()\n        .message(taskInput)\n\n        // the properties below are optional\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .messagePerSubscriptionType(false)\n        .subject(\"subject\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar taskInput taskInput\npublishToTopicProps := &publishToTopicProps{\n\tmessage: taskInput,\n\n\t// the properties below are optional\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tmessagePerSubscriptionType: jsii.Boolean(false),\n\tsubject: jsii.String(\"subject\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const taskInput: stepfunctions.TaskInput;\nconst publishToTopicProps: stepfunctions_tasks.PublishToTopicProps = {\n  message: taskInput,\n\n  // the properties below are optional\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  messagePerSubscriptionType: false,\n  subject: 'subject',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.PublishToTopicProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.PublishToTopicProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET",
        "@aws-cdk/aws-stepfunctions.TaskInput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const taskInput: stepfunctions.TaskInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst publishToTopicProps: stepfunctions_tasks.PublishToTopicProps = {\n  message: taskInput,\n\n  // the properties below are optional\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  messagePerSubscriptionType: false,\n  subject: 'subject',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "80cf68cedbb30dbdce50bd7a170c3bdec54abc9cd7b77cca5ad93cfcec5ce874"
    },
    "e2e37d1edd5f754c32c87d4555dc0d5687eb744b4e90bb153c7819c382320b06": {
      "translations": {
        "python": {
          "source": "start_query_execution_job = tasks.AthenaStartQueryExecution(self, \"Athena Start Query\",\n    query_string=sfn.JsonPath.format(\"select contacts where year={};\", sfn.JsonPath.string_at(\"$.year\")),\n    query_execution_context=tasks.QueryExecutionContext(\n        database_name=\"interactions\"\n    ),\n    result_configuration=tasks.ResultConfiguration(\n        encryption_configuration=tasks.EncryptionConfiguration(\n            encryption_option=tasks.EncryptionOption.S3_MANAGED\n        ),\n        output_location=s3.Location(\n            bucket_name=\"mybucket\",\n            object_key=\"myprefix\"\n        )\n    ),\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = new AthenaStartQueryExecution(this, \"Athena Start Query\", new AthenaStartQueryExecutionProps {\n    QueryString = JsonPath.Format(\"select contacts where year={};\", JsonPath.StringAt(\"$.year\")),\n    QueryExecutionContext = new QueryExecutionContext {\n        DatabaseName = \"interactions\"\n    },\n    ResultConfiguration = new ResultConfiguration {\n        EncryptionConfiguration = new EncryptionConfiguration {\n            EncryptionOption = EncryptionOption.S3_MANAGED\n        },\n        OutputLocation = new Location {\n            BucketName = \"mybucket\",\n            ObjectKey = \"myprefix\"\n        }\n    },\n    IntegrationPattern = IntegrationPattern.RUN_JOB\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = AthenaStartQueryExecution.Builder.create(this, \"Athena Start Query\")\n        .queryString(JsonPath.format(\"select contacts where year={};\", JsonPath.stringAt(\"$.year\")))\n        .queryExecutionContext(QueryExecutionContext.builder()\n                .databaseName(\"interactions\")\n                .build())\n        .resultConfiguration(ResultConfiguration.builder()\n                .encryptionConfiguration(EncryptionConfiguration.builder()\n                        .encryptionOption(EncryptionOption.S3_MANAGED)\n                        .build())\n                .outputLocation(Location.builder()\n                        .bucketName(\"mybucket\")\n                        .objectKey(\"myprefix\")\n                        .build())\n                .build())\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "startQueryExecutionJob := tasks.NewAthenaStartQueryExecution(this, jsii.String(\"Athena Start Query\"), &athenaStartQueryExecutionProps{\n\tqueryString: sfn.jsonPath.format(jsii.String(\"select contacts where year={};\"), sfn.*jsonPath.stringAt(jsii.String(\"$.year\"))),\n\tqueryExecutionContext: &queryExecutionContext{\n\t\tdatabaseName: jsii.String(\"interactions\"),\n\t},\n\tresultConfiguration: &resultConfiguration{\n\t\tencryptionConfiguration: &encryptionConfiguration{\n\t\t\tencryptionOption: tasks.encryptionOption_S3_MANAGED,\n\t\t},\n\t\toutputLocation: &location{\n\t\t\tbucketName: jsii.String(\"mybucket\"),\n\t\t\tobjectKey: jsii.String(\"myprefix\"),\n\t\t},\n\t},\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n})",
          "version": "1"
        },
        "$": {
          "source": "const startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.QueryExecutionContext"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionConfiguration",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption#S3_MANAGED",
        "@aws-cdk/aws-stepfunctions-tasks.QueryExecutionContext",
        "@aws-cdk/aws-stepfunctions-tasks.ResultConfiguration",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#format",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "18ccfd09b7dfcdcde29c0cc0b620e945875db2aef84e404c5df86ce1cec06402"
    },
    "74c6905902ef98946f4330d20cf5d5f84e756a602958117511be51459cb9ec3e": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_name=\"EMR-Containers-Job\",\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        )\n    ),\n    application_config=[tasks.ApplicationConfiguration(\n        classification=tasks.Classification.SPARK_DEFAULTS,\n        properties={\n            \"spark.executor.instances\": \"1\",\n            \"spark.executor.memory\": \"512M\"\n        }\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobName = \"EMR-Containers-Job\",\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        }\n    },\n    ApplicationConfig = new [] { new ApplicationConfiguration {\n        Classification = Classification.SPARK_DEFAULTS,\n        Properties = new Dictionary<string, string> {\n            { \"spark.executor.instances\", \"1\" },\n            { \"spark.executor.memory\", \"512M\" }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobName(\"EMR-Containers-Job\")\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .build())\n                .build())\n        .applicationConfig(List.of(ApplicationConfiguration.builder()\n                .classification(Classification.SPARK_DEFAULTS)\n                .properties(Map.of(\n                        \"spark.executor.instances\", \"1\",\n                        \"spark.executor.memory\", \"512M\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobName: jsii.String(\"EMR-Containers-Job\"),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t},\n\t},\n\tapplicationConfig: []applicationConfiguration{\n\t\t&applicationConfiguration{\n\t\t\tclassification: tasks.classification_SPARK_DEFAULTS(),\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"spark.executor.instances\": jsii.String(\"1\"),\n\t\t\t\t\"spark.executor.memory\": jsii.String(\"512M\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.Classification",
        "@aws-cdk/aws-stepfunctions-tasks.Classification#SPARK_DEFAULTS",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 23,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 11
      },
      "fqnsFingerprint": "f326c63003a23b7bc92021d0409fcc199f142e6192e2f115710fd3ed22301c96"
    },
    "fcbe0268150b1f5ac09434c94c1996f4fb0f299939b535e2eb1cb0b420a5b6ad": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "692ff5dd004efb8a3e75720355c958401bf5484e84089adba7a8365afa5d9e7e": {
      "translations": {
        "python": {
          "source": "ec2.InstanceType(sfn.JsonPath.string_at(\"$.path.to.instanceType\"))",
          "version": "2"
        },
        "csharp": {
          "source": "new InstanceType(JsonPath.StringAt(\"$.path.to.instanceType\"));",
          "version": "1"
        },
        "java": {
          "source": "new InstanceType(JsonPath.stringAt(\"$.path.to.instanceType\"));",
          "version": "1"
        },
        "go": {
          "source": "ec2.NewInstanceType(sfn.jsonPath.stringAt(jsii.String(\"$.path.to.instanceType\")))",
          "version": "1"
        },
        "$": {
          "source": "new ec2.InstanceType(sfn.JsonPath.stringAt('$.path.to.instanceType'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
          "memberName": "instanceType"
        },
        "field": {
          "field": "markdown",
          "line": 4
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew ec2.InstanceType(sfn.JsonPath.stringAt('$.path.to.instanceType'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1
      },
      "fqnsFingerprint": "624e15e78f1f0b3a9e4e7601f98b65557c7d31a52cb0ef1ae11cb3f190b30b12"
    },
    "fb94944fb6b9516ad091d7bc22ee095f3be1030001043e9b700add8a74029ac3": {
      "translations": {
        "python": {
          "source": "start_query_execution_job = tasks.AthenaStartQueryExecution(self, \"Athena Start Query\",\n    query_string=sfn.JsonPath.format(\"select contacts where year={};\", sfn.JsonPath.string_at(\"$.year\")),\n    query_execution_context=tasks.QueryExecutionContext(\n        database_name=\"interactions\"\n    ),\n    result_configuration=tasks.ResultConfiguration(\n        encryption_configuration=tasks.EncryptionConfiguration(\n            encryption_option=tasks.EncryptionOption.S3_MANAGED\n        ),\n        output_location=s3.Location(\n            bucket_name=\"mybucket\",\n            object_key=\"myprefix\"\n        )\n    ),\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = new AthenaStartQueryExecution(this, \"Athena Start Query\", new AthenaStartQueryExecutionProps {\n    QueryString = JsonPath.Format(\"select contacts where year={};\", JsonPath.StringAt(\"$.year\")),\n    QueryExecutionContext = new QueryExecutionContext {\n        DatabaseName = \"interactions\"\n    },\n    ResultConfiguration = new ResultConfiguration {\n        EncryptionConfiguration = new EncryptionConfiguration {\n            EncryptionOption = EncryptionOption.S3_MANAGED\n        },\n        OutputLocation = new Location {\n            BucketName = \"mybucket\",\n            ObjectKey = \"myprefix\"\n        }\n    },\n    IntegrationPattern = IntegrationPattern.RUN_JOB\n});",
          "version": "1"
        },
        "java": {
          "source": "AthenaStartQueryExecution startQueryExecutionJob = AthenaStartQueryExecution.Builder.create(this, \"Athena Start Query\")\n        .queryString(JsonPath.format(\"select contacts where year={};\", JsonPath.stringAt(\"$.year\")))\n        .queryExecutionContext(QueryExecutionContext.builder()\n                .databaseName(\"interactions\")\n                .build())\n        .resultConfiguration(ResultConfiguration.builder()\n                .encryptionConfiguration(EncryptionConfiguration.builder()\n                        .encryptionOption(EncryptionOption.S3_MANAGED)\n                        .build())\n                .outputLocation(Location.builder()\n                        .bucketName(\"mybucket\")\n                        .objectKey(\"myprefix\")\n                        .build())\n                .build())\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "startQueryExecutionJob := tasks.NewAthenaStartQueryExecution(this, jsii.String(\"Athena Start Query\"), &athenaStartQueryExecutionProps{\n\tqueryString: sfn.jsonPath.format(jsii.String(\"select contacts where year={};\"), sfn.*jsonPath.stringAt(jsii.String(\"$.year\"))),\n\tqueryExecutionContext: &queryExecutionContext{\n\t\tdatabaseName: jsii.String(\"interactions\"),\n\t},\n\tresultConfiguration: &resultConfiguration{\n\t\tencryptionConfiguration: &encryptionConfiguration{\n\t\t\tencryptionOption: tasks.encryptionOption_S3_MANAGED,\n\t\t},\n\t\toutputLocation: &location{\n\t\t\tbucketName: jsii.String(\"mybucket\"),\n\t\t\tobjectKey: jsii.String(\"myprefix\"),\n\t\t},\n\t},\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n})",
          "version": "1"
        },
        "$": {
          "source": "const startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ResultConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecution",
        "@aws-cdk/aws-stepfunctions-tasks.AthenaStartQueryExecutionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionConfiguration",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption",
        "@aws-cdk/aws-stepfunctions-tasks.EncryptionOption#S3_MANAGED",
        "@aws-cdk/aws-stepfunctions-tasks.QueryExecutionContext",
        "@aws-cdk/aws-stepfunctions-tasks.ResultConfiguration",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#format",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst startQueryExecutionJob = new tasks.AthenaStartQueryExecution(this, 'Athena Start Query', {\n  queryString: sfn.JsonPath.format('select contacts where year={};', sfn.JsonPath.stringAt('$.year')),\n  queryExecutionContext: {\n    databaseName: 'interactions',\n  },\n  resultConfiguration: {\n    encryptionConfiguration: {\n      encryptionOption: tasks.EncryptionOption.S3_MANAGED,\n    },\n    outputLocation: {\n      bucketName: 'mybucket',\n      objectKey: 'myprefix',\n    },\n  },\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "18ccfd09b7dfcdcde29c0cc0b620e945875db2aef84e404c5df86ce1cec06402"
    },
    "d8d4a65f7f27d0378e76dd2067b2f35ba94367cef0f9b8bc0c2c9a41cae60f6c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# instance_type: ec2.InstanceType\n# payload: Any\n\nrun_batch_job = stepfunctions_tasks.RunBatchJob(\n    job_definition_arn=\"jobDefinitionArn\",\n    job_name=\"jobName\",\n    job_queue_arn=\"jobQueueArn\",\n\n    # the properties below are optional\n    array_size=123,\n    attempts=123,\n    container_overrides=stepfunctions_tasks.ContainerOverrides(\n        command=[\"command\"],\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        gpu_count=123,\n        instance_type=instance_type,\n        memory=123,\n        vcpus=123\n    ),\n    depends_on=[stepfunctions_tasks.JobDependency(\n        job_id=\"jobId\",\n        type=\"type\"\n    )],\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    payload={\n        \"payload_key\": payload\n    },\n    timeout=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nInstanceType instanceType;\nvar payload;\nRunBatchJob runBatchJob = new RunBatchJob(new RunBatchJobProps {\n    JobDefinitionArn = \"jobDefinitionArn\",\n    JobName = \"jobName\",\n    JobQueueArn = \"jobQueueArn\",\n\n    // the properties below are optional\n    ArraySize = 123,\n    Attempts = 123,\n    ContainerOverrides = new ContainerOverrides {\n        Command = new [] { \"command\" },\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        GpuCount = 123,\n        InstanceType = instanceType,\n        Memory = 123,\n        Vcpus = 123\n    },\n    DependsOn = new [] { new JobDependency {\n        JobId = \"jobId\",\n        Type = \"type\"\n    } },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    Payload = new Dictionary<string, object> {\n        { \"payloadKey\", payload }\n    },\n    Timeout = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nInstanceType instanceType;\nObject payload;\n\nRunBatchJob runBatchJob = RunBatchJob.Builder.create()\n        .jobDefinitionArn(\"jobDefinitionArn\")\n        .jobName(\"jobName\")\n        .jobQueueArn(\"jobQueueArn\")\n\n        // the properties below are optional\n        .arraySize(123)\n        .attempts(123)\n        .containerOverrides(ContainerOverrides.builder()\n                .command(List.of(\"command\"))\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .gpuCount(123)\n                .instanceType(instanceType)\n                .memory(123)\n                .vcpus(123)\n                .build())\n        .dependsOn(List.of(JobDependency.builder()\n                .jobId(\"jobId\")\n                .type(\"type\")\n                .build()))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .payload(Map.of(\n                \"payloadKey\", payload))\n        .timeout(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar instanceType instanceType\nvar payload interface{}\nrunBatchJob := stepfunctions_tasks.NewRunBatchJob(&runBatchJobProps{\n\tjobDefinitionArn: jsii.String(\"jobDefinitionArn\"),\n\tjobName: jsii.String(\"jobName\"),\n\tjobQueueArn: jsii.String(\"jobQueueArn\"),\n\n\t// the properties below are optional\n\tarraySize: jsii.Number(123),\n\tattempts: jsii.Number(123),\n\tcontainerOverrides: &containerOverrides{\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tgpuCount: jsii.Number(123),\n\t\tinstanceType: instanceType,\n\t\tmemory: jsii.Number(123),\n\t\tvcpus: jsii.Number(123),\n\t},\n\tdependsOn: []jobDependency{\n\t\t&jobDependency{\n\t\t\tjobId: jsii.String(\"jobId\"),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tpayload: map[string]interface{}{\n\t\t\"payloadKey\": payload,\n\t},\n\ttimeout: cdk.duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const instanceType: ec2.InstanceType;\ndeclare const payload: any;\nconst runBatchJob = new stepfunctions_tasks.RunBatchJob({\n  jobDefinitionArn: 'jobDefinitionArn',\n  jobName: 'jobName',\n  jobQueueArn: 'jobQueueArn',\n\n  // the properties below are optional\n  arraySize: 123,\n  attempts: 123,\n  containerOverrides: {\n    command: ['command'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    gpuCount: 123,\n    instanceType: instanceType,\n    memory: 123,\n    vcpus: 123,\n  },\n  dependsOn: [{\n    jobId: 'jobId',\n    type: 'type',\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  payload: {\n    payloadKey: payload,\n  },\n  timeout: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.RunBatchJob"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-stepfunctions-tasks.ContainerOverrides",
        "@aws-cdk/aws-stepfunctions-tasks.RunBatchJob",
        "@aws-cdk/aws-stepfunctions-tasks.RunBatchJobProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const instanceType: ec2.InstanceType;\ndeclare const payload: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runBatchJob = new stepfunctions_tasks.RunBatchJob({\n  jobDefinitionArn: 'jobDefinitionArn',\n  jobName: 'jobName',\n  jobQueueArn: 'jobQueueArn',\n\n  // the properties below are optional\n  arraySize: 123,\n  attempts: 123,\n  containerOverrides: {\n    command: ['command'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    gpuCount: 123,\n    instanceType: instanceType,\n    memory: 123,\n    vcpus: 123,\n  },\n  dependsOn: [{\n    jobId: 'jobId',\n    type: 'type',\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  payload: {\n    payloadKey: payload,\n  },\n  timeout: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 11,
        "75": 39,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 5,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 20,
        "290": 1
      },
      "fqnsFingerprint": "8c05d9d6bfc163dc5864fda8afe5e9b6dfaaf766e079144abe1ecf77055a88ac"
    },
    "9c99987ad9326fc5c73a335f664c1ac6ac757b7005923a1f4cb67de4a7a31e0f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# instance_type: ec2.InstanceType\n# payload: Any\n\nrun_batch_job_props = stepfunctions_tasks.RunBatchJobProps(\n    job_definition_arn=\"jobDefinitionArn\",\n    job_name=\"jobName\",\n    job_queue_arn=\"jobQueueArn\",\n\n    # the properties below are optional\n    array_size=123,\n    attempts=123,\n    container_overrides=stepfunctions_tasks.ContainerOverrides(\n        command=[\"command\"],\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        gpu_count=123,\n        instance_type=instance_type,\n        memory=123,\n        vcpus=123\n    ),\n    depends_on=[stepfunctions_tasks.JobDependency(\n        job_id=\"jobId\",\n        type=\"type\"\n    )],\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    payload={\n        \"payload_key\": payload\n    },\n    timeout=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nInstanceType instanceType;\nvar payload;\nRunBatchJobProps runBatchJobProps = new RunBatchJobProps {\n    JobDefinitionArn = \"jobDefinitionArn\",\n    JobName = \"jobName\",\n    JobQueueArn = \"jobQueueArn\",\n\n    // the properties below are optional\n    ArraySize = 123,\n    Attempts = 123,\n    ContainerOverrides = new ContainerOverrides {\n        Command = new [] { \"command\" },\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        GpuCount = 123,\n        InstanceType = instanceType,\n        Memory = 123,\n        Vcpus = 123\n    },\n    DependsOn = new [] { new JobDependency {\n        JobId = \"jobId\",\n        Type = \"type\"\n    } },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    Payload = new Dictionary<string, object> {\n        { \"payloadKey\", payload }\n    },\n    Timeout = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nInstanceType instanceType;\nObject payload;\n\nRunBatchJobProps runBatchJobProps = RunBatchJobProps.builder()\n        .jobDefinitionArn(\"jobDefinitionArn\")\n        .jobName(\"jobName\")\n        .jobQueueArn(\"jobQueueArn\")\n\n        // the properties below are optional\n        .arraySize(123)\n        .attempts(123)\n        .containerOverrides(ContainerOverrides.builder()\n                .command(List.of(\"command\"))\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .gpuCount(123)\n                .instanceType(instanceType)\n                .memory(123)\n                .vcpus(123)\n                .build())\n        .dependsOn(List.of(JobDependency.builder()\n                .jobId(\"jobId\")\n                .type(\"type\")\n                .build()))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .payload(Map.of(\n                \"payloadKey\", payload))\n        .timeout(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar instanceType instanceType\nvar payload interface{}\nrunBatchJobProps := &runBatchJobProps{\n\tjobDefinitionArn: jsii.String(\"jobDefinitionArn\"),\n\tjobName: jsii.String(\"jobName\"),\n\tjobQueueArn: jsii.String(\"jobQueueArn\"),\n\n\t// the properties below are optional\n\tarraySize: jsii.Number(123),\n\tattempts: jsii.Number(123),\n\tcontainerOverrides: &containerOverrides{\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tgpuCount: jsii.Number(123),\n\t\tinstanceType: instanceType,\n\t\tmemory: jsii.Number(123),\n\t\tvcpus: jsii.Number(123),\n\t},\n\tdependsOn: []jobDependency{\n\t\t&jobDependency{\n\t\t\tjobId: jsii.String(\"jobId\"),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tpayload: map[string]interface{}{\n\t\t\"payloadKey\": payload,\n\t},\n\ttimeout: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const instanceType: ec2.InstanceType;\ndeclare const payload: any;\nconst runBatchJobProps: stepfunctions_tasks.RunBatchJobProps = {\n  jobDefinitionArn: 'jobDefinitionArn',\n  jobName: 'jobName',\n  jobQueueArn: 'jobQueueArn',\n\n  // the properties below are optional\n  arraySize: 123,\n  attempts: 123,\n  containerOverrides: {\n    command: ['command'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    gpuCount: 123,\n    instanceType: instanceType,\n    memory: 123,\n    vcpus: 123,\n  },\n  dependsOn: [{\n    jobId: 'jobId',\n    type: 'type',\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  payload: {\n    payloadKey: payload,\n  },\n  timeout: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.RunBatchJobProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-stepfunctions-tasks.ContainerOverrides",
        "@aws-cdk/aws-stepfunctions-tasks.RunBatchJobProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const instanceType: ec2.InstanceType;\ndeclare const payload: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runBatchJobProps: stepfunctions_tasks.RunBatchJobProps = {\n  jobDefinitionArn: 'jobDefinitionArn',\n  jobName: 'jobName',\n  jobQueueArn: 'jobQueueArn',\n\n  // the properties below are optional\n  arraySize: 123,\n  attempts: 123,\n  containerOverrides: {\n    command: ['command'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    gpuCount: 123,\n    instanceType: instanceType,\n    memory: 123,\n    vcpus: 123,\n  },\n  dependsOn: [{\n    jobId: 'jobId',\n    type: 'type',\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  payload: {\n    payloadKey: payload,\n  },\n  timeout: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 11,
        "75": 39,
        "125": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 5,
        "194": 4,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 20,
        "290": 1
      },
      "fqnsFingerprint": "8d9562b6c86764381939024fdc89e0d9e77b9f5de024a979f64d3e6a9be411b5"
    },
    "9e125e8e31359e26e2aa55bc7171599f3c4f853fe97b2ee14801ead808bbf4fd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# placement_constraint: ecs.PlacementConstraint\n# placement_strategy: ecs.PlacementStrategy\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# task_definition: ecs.TaskDefinition\n\nrun_ecs_ec2_task = stepfunctions_tasks.RunEcsEc2Task(\n    cluster=cluster,\n    task_definition=task_definition,\n\n    # the properties below are optional\n    container_overrides=[stepfunctions_tasks.ContainerOverride(\n        container_definition=container_definition,\n\n        # the properties below are optional\n        command=[\"command\"],\n        cpu=123,\n        environment=[stepfunctions_tasks.TaskEnvironmentVariable(\n            name=\"name\",\n            value=\"value\"\n        )],\n        memory_limit=123,\n        memory_reservation=123\n    )],\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    placement_constraints=[placement_constraint],\n    placement_strategies=[placement_strategy],\n    security_group=security_group,\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nPlacementConstraint placementConstraint;\nPlacementStrategy placementStrategy;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTaskDefinition taskDefinition;\n\nRunEcsEc2Task runEcsEc2Task = new RunEcsEc2Task(new RunEcsEc2TaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n\n    // the properties below are optional\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Cpu = 123,\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        MemoryLimit = 123,\n        MemoryReservation = 123\n    } },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    PlacementConstraints = new [] { placementConstraint },\n    PlacementStrategies = new [] { placementStrategy },\n    SecurityGroup = securityGroup,\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nPlacementConstraint placementConstraint;\nPlacementStrategy placementStrategy;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTaskDefinition taskDefinition;\n\nRunEcsEc2Task runEcsEc2Task = RunEcsEc2Task.Builder.create()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n\n        // the properties below are optional\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .cpu(123)\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .memoryLimit(123)\n                .memoryReservation(123)\n                .build()))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .placementConstraints(List.of(placementConstraint))\n        .placementStrategies(List.of(placementStrategy))\n        .securityGroup(securityGroup)\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar cluster cluster\nvar containerDefinition containerDefinition\nvar placementConstraint placementConstraint\nvar placementStrategy placementStrategy\nvar securityGroup securityGroup\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar taskDefinition taskDefinition\nrunEcsEc2Task := stepfunctions_tasks.NewRunEcsEc2Task(&runEcsEc2TaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\n\t// the properties below are optional\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerDefinition: containerDefinition,\n\n\t\t\t// the properties below are optional\n\t\t\tcommand: []*string{\n\t\t\t\tjsii.String(\"command\"),\n\t\t\t},\n\t\t\tcpu: jsii.Number(123),\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmemoryLimit: jsii.Number(123),\n\t\t\tmemoryReservation: jsii.Number(123),\n\t\t},\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tplacementConstraints: []*placementConstraint{\n\t\tplacementConstraint,\n\t},\n\tplacementStrategies: []*placementStrategy{\n\t\tplacementStrategy,\n\t},\n\tsecurityGroup: securityGroup,\n\tsubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const placementConstraint: ecs.PlacementConstraint;\ndeclare const placementStrategy: ecs.PlacementStrategy;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst runEcsEc2Task = new stepfunctions_tasks.RunEcsEc2Task({\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  placementConstraints: [placementConstraint],\n  placementStrategies: [placementStrategy],\n  securityGroup: securityGroup,\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.RunEcsEc2Task"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.RunEcsEc2Task",
        "@aws-cdk/aws-stepfunctions-tasks.RunEcsEc2TaskProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const placementConstraint: ecs.PlacementConstraint;\ndeclare const placementStrategy: ecs.PlacementStrategy;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runEcsEc2Task = new stepfunctions_tasks.RunEcsEc2Task({\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  placementConstraints: [placementConstraint],\n  placementStrategies: [placementStrategy],\n  securityGroup: securityGroup,\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 68,
        "91": 1,
        "130": 8,
        "153": 8,
        "169": 8,
        "192": 8,
        "193": 4,
        "194": 5,
        "197": 1,
        "225": 9,
        "242": 9,
        "243": 9,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 23,
        "290": 1
      },
      "fqnsFingerprint": "df7364dff361ea374c9a1d4b9ccde4a6001efb240731616a7351551645e1f5ec"
    },
    "38c4166884b2f68a3062d89b604ca7907e14e0c1fcd65157b9a43e342a80bd07": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# placement_constraint: ecs.PlacementConstraint\n# placement_strategy: ecs.PlacementStrategy\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# task_definition: ecs.TaskDefinition\n\nrun_ecs_ec2_task_props = stepfunctions_tasks.RunEcsEc2TaskProps(\n    cluster=cluster,\n    task_definition=task_definition,\n\n    # the properties below are optional\n    container_overrides=[stepfunctions_tasks.ContainerOverride(\n        container_definition=container_definition,\n\n        # the properties below are optional\n        command=[\"command\"],\n        cpu=123,\n        environment=[stepfunctions_tasks.TaskEnvironmentVariable(\n            name=\"name\",\n            value=\"value\"\n        )],\n        memory_limit=123,\n        memory_reservation=123\n    )],\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    placement_constraints=[placement_constraint],\n    placement_strategies=[placement_strategy],\n    security_group=security_group,\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nPlacementConstraint placementConstraint;\nPlacementStrategy placementStrategy;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTaskDefinition taskDefinition;\n\nRunEcsEc2TaskProps runEcsEc2TaskProps = new RunEcsEc2TaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n\n    // the properties below are optional\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Cpu = 123,\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        MemoryLimit = 123,\n        MemoryReservation = 123\n    } },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    PlacementConstraints = new [] { placementConstraint },\n    PlacementStrategies = new [] { placementStrategy },\n    SecurityGroup = securityGroup,\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nPlacementConstraint placementConstraint;\nPlacementStrategy placementStrategy;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTaskDefinition taskDefinition;\n\nRunEcsEc2TaskProps runEcsEc2TaskProps = RunEcsEc2TaskProps.builder()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n\n        // the properties below are optional\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .cpu(123)\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .memoryLimit(123)\n                .memoryReservation(123)\n                .build()))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .placementConstraints(List.of(placementConstraint))\n        .placementStrategies(List.of(placementStrategy))\n        .securityGroup(securityGroup)\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar cluster cluster\nvar containerDefinition containerDefinition\nvar placementConstraint placementConstraint\nvar placementStrategy placementStrategy\nvar securityGroup securityGroup\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar taskDefinition taskDefinition\nrunEcsEc2TaskProps := &runEcsEc2TaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\n\t// the properties below are optional\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerDefinition: containerDefinition,\n\n\t\t\t// the properties below are optional\n\t\t\tcommand: []*string{\n\t\t\t\tjsii.String(\"command\"),\n\t\t\t},\n\t\t\tcpu: jsii.Number(123),\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmemoryLimit: jsii.Number(123),\n\t\t\tmemoryReservation: jsii.Number(123),\n\t\t},\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tplacementConstraints: []*placementConstraint{\n\t\tplacementConstraint,\n\t},\n\tplacementStrategies: []*placementStrategy{\n\t\tplacementStrategy,\n\t},\n\tsecurityGroup: securityGroup,\n\tsubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const placementConstraint: ecs.PlacementConstraint;\ndeclare const placementStrategy: ecs.PlacementStrategy;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst runEcsEc2TaskProps: stepfunctions_tasks.RunEcsEc2TaskProps = {\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  placementConstraints: [placementConstraint],\n  placementStrategies: [placementStrategy],\n  securityGroup: securityGroup,\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.RunEcsEc2TaskProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.RunEcsEc2TaskProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const placementConstraint: ecs.PlacementConstraint;\ndeclare const placementStrategy: ecs.PlacementStrategy;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runEcsEc2TaskProps: stepfunctions_tasks.RunEcsEc2TaskProps = {\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  placementConstraints: [placementConstraint],\n  placementStrategies: [placementStrategy],\n  securityGroup: securityGroup,\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 68,
        "91": 1,
        "130": 8,
        "153": 9,
        "169": 9,
        "192": 8,
        "193": 4,
        "194": 4,
        "225": 9,
        "242": 9,
        "243": 9,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 23,
        "290": 1
      },
      "fqnsFingerprint": "153f395d226814b1bfa74417613b8274ba28e439ded10e77dc0ed7e56e0931b0"
    },
    "756624844bf90848da7ed534c696817ad4164926f5f634ea64ac30da84bc700c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# task_definition: ecs.TaskDefinition\n\nrun_ecs_fargate_task = stepfunctions_tasks.RunEcsFargateTask(\n    cluster=cluster,\n    task_definition=task_definition,\n\n    # the properties below are optional\n    assign_public_ip=False,\n    container_overrides=[stepfunctions_tasks.ContainerOverride(\n        container_definition=container_definition,\n\n        # the properties below are optional\n        command=[\"command\"],\n        cpu=123,\n        environment=[stepfunctions_tasks.TaskEnvironmentVariable(\n            name=\"name\",\n            value=\"value\"\n        )],\n        memory_limit=123,\n        memory_reservation=123\n    )],\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    platform_version=ecs.FargatePlatformVersion.LATEST,\n    security_group=security_group,\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTaskDefinition taskDefinition;\n\nRunEcsFargateTask runEcsFargateTask = new RunEcsFargateTask(new RunEcsFargateTaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n\n    // the properties below are optional\n    AssignPublicIp = false,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Cpu = 123,\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        MemoryLimit = 123,\n        MemoryReservation = 123\n    } },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    PlatformVersion = FargatePlatformVersion.LATEST,\n    SecurityGroup = securityGroup,\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTaskDefinition taskDefinition;\n\nRunEcsFargateTask runEcsFargateTask = RunEcsFargateTask.Builder.create()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n\n        // the properties below are optional\n        .assignPublicIp(false)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .cpu(123)\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .memoryLimit(123)\n                .memoryReservation(123)\n                .build()))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .platformVersion(FargatePlatformVersion.LATEST)\n        .securityGroup(securityGroup)\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar cluster cluster\nvar containerDefinition containerDefinition\nvar securityGroup securityGroup\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar taskDefinition taskDefinition\nrunEcsFargateTask := stepfunctions_tasks.NewRunEcsFargateTask(&runEcsFargateTaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\n\t// the properties below are optional\n\tassignPublicIp: jsii.Boolean(false),\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerDefinition: containerDefinition,\n\n\t\t\t// the properties below are optional\n\t\t\tcommand: []*string{\n\t\t\t\tjsii.String(\"command\"),\n\t\t\t},\n\t\t\tcpu: jsii.Number(123),\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmemoryLimit: jsii.Number(123),\n\t\t\tmemoryReservation: jsii.Number(123),\n\t\t},\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tplatformVersion: ecs.fargatePlatformVersion_LATEST,\n\tsecurityGroup: securityGroup,\n\tsubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst runEcsFargateTask = new stepfunctions_tasks.RunEcsFargateTask({\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  assignPublicIp: false,\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n  securityGroup: securityGroup,\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.RunEcsFargateTask"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#LATEST",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.RunEcsFargateTask",
        "@aws-cdk/aws-stepfunctions-tasks.RunEcsFargateTaskProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runEcsFargateTask = new stepfunctions_tasks.RunEcsFargateTask({\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  assignPublicIp: false,\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n  securityGroup: securityGroup,\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 63,
        "91": 2,
        "130": 6,
        "153": 6,
        "169": 6,
        "192": 6,
        "193": 4,
        "194": 7,
        "197": 1,
        "225": 7,
        "242": 7,
        "243": 7,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 23,
        "290": 1
      },
      "fqnsFingerprint": "6d7633e34dc91f033abd22cc14fc5bf980d8852427ca425b130eb13ee8393df4"
    },
    "73827c689882493cdff350f59ab54184902f27b1efbe730aa212299c5d658cc8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# task_definition: ecs.TaskDefinition\n\nrun_ecs_fargate_task_props = stepfunctions_tasks.RunEcsFargateTaskProps(\n    cluster=cluster,\n    task_definition=task_definition,\n\n    # the properties below are optional\n    assign_public_ip=False,\n    container_overrides=[stepfunctions_tasks.ContainerOverride(\n        container_definition=container_definition,\n\n        # the properties below are optional\n        command=[\"command\"],\n        cpu=123,\n        environment=[stepfunctions_tasks.TaskEnvironmentVariable(\n            name=\"name\",\n            value=\"value\"\n        )],\n        memory_limit=123,\n        memory_reservation=123\n    )],\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    platform_version=ecs.FargatePlatformVersion.LATEST,\n    security_group=security_group,\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTaskDefinition taskDefinition;\n\nRunEcsFargateTaskProps runEcsFargateTaskProps = new RunEcsFargateTaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n\n    // the properties below are optional\n    AssignPublicIp = false,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Cpu = 123,\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        MemoryLimit = 123,\n        MemoryReservation = 123\n    } },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    PlatformVersion = FargatePlatformVersion.LATEST,\n    SecurityGroup = securityGroup,\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nTaskDefinition taskDefinition;\n\nRunEcsFargateTaskProps runEcsFargateTaskProps = RunEcsFargateTaskProps.builder()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n\n        // the properties below are optional\n        .assignPublicIp(false)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .cpu(123)\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .memoryLimit(123)\n                .memoryReservation(123)\n                .build()))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .platformVersion(FargatePlatformVersion.LATEST)\n        .securityGroup(securityGroup)\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar cluster cluster\nvar containerDefinition containerDefinition\nvar securityGroup securityGroup\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar taskDefinition taskDefinition\nrunEcsFargateTaskProps := &runEcsFargateTaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\n\t// the properties below are optional\n\tassignPublicIp: jsii.Boolean(false),\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerDefinition: containerDefinition,\n\n\t\t\t// the properties below are optional\n\t\t\tcommand: []*string{\n\t\t\t\tjsii.String(\"command\"),\n\t\t\t},\n\t\t\tcpu: jsii.Number(123),\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmemoryLimit: jsii.Number(123),\n\t\t\tmemoryReservation: jsii.Number(123),\n\t\t},\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tplatformVersion: ecs.fargatePlatformVersion_LATEST,\n\tsecurityGroup: securityGroup,\n\tsubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst runEcsFargateTaskProps: stepfunctions_tasks.RunEcsFargateTaskProps = {\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  assignPublicIp: false,\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n  securityGroup: securityGroup,\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.RunEcsFargateTaskProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#LATEST",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.RunEcsFargateTaskProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runEcsFargateTaskProps: stepfunctions_tasks.RunEcsFargateTaskProps = {\n  cluster: cluster,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  assignPublicIp: false,\n  containerOverrides: [{\n    containerDefinition: containerDefinition,\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    memoryLimit: 123,\n    memoryReservation: 123,\n  }],\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n  securityGroup: securityGroup,\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 63,
        "91": 2,
        "130": 6,
        "153": 7,
        "169": 7,
        "192": 6,
        "193": 4,
        "194": 6,
        "225": 7,
        "242": 7,
        "243": 7,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 23,
        "290": 1
      },
      "fqnsFingerprint": "cb42c1663648b40b2f2ab3f23f6f82850bb8aa383d04abd5c1b0360382f1e97f"
    },
    "c0c42f672eb9c9e2c4c39726dc1de3a03c6f36a8e44733e75016011c0e67274d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\nrun_glue_job_task = stepfunctions_tasks.RunGlueJobTask(\"glueJobName\",\n    arguments={\n        \"arguments_key\": \"arguments\"\n    },\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    notify_delay_after=cdk.Duration.minutes(30),\n    security_configuration=\"securityConfiguration\",\n    timeout=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\nRunGlueJobTask runGlueJobTask = new RunGlueJobTask(\"glueJobName\", new RunGlueJobTaskProps {\n    Arguments = new Dictionary<string, string> {\n        { \"argumentsKey\", \"arguments\" }\n    },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    NotifyDelayAfter = Duration.Minutes(30),\n    SecurityConfiguration = \"securityConfiguration\",\n    Timeout = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nRunGlueJobTask runGlueJobTask = RunGlueJobTask.Builder.create(\"glueJobName\")\n        .arguments(Map.of(\n                \"argumentsKey\", \"arguments\"))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .notifyDelayAfter(Duration.minutes(30))\n        .securityConfiguration(\"securityConfiguration\")\n        .timeout(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nrunGlueJobTask := stepfunctions_tasks.NewRunGlueJobTask(jsii.String(\"glueJobName\"), &runGlueJobTaskProps{\n\targuments: map[string]*string{\n\t\t\"argumentsKey\": jsii.String(\"arguments\"),\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tnotifyDelayAfter: cdk.duration.minutes(jsii.Number(30)),\n\tsecurityConfiguration: jsii.String(\"securityConfiguration\"),\n\ttimeout: cdk.*duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\nconst runGlueJobTask = new stepfunctions_tasks.RunGlueJobTask('glueJobName', /* all optional props */ {\n  arguments: {\n    argumentsKey: 'arguments',\n  },\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  notifyDelayAfter: cdk.Duration.minutes(30),\n  securityConfiguration: 'securityConfiguration',\n  timeout: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.RunGlueJobTask"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.RunGlueJobTask",
        "@aws-cdk/aws-stepfunctions-tasks.RunGlueJobTaskProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runGlueJobTask = new stepfunctions_tasks.RunGlueJobTask('glueJobName', /* all optional props */ {\n  arguments: {\n    argumentsKey: 'arguments',\n  },\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  notifyDelayAfter: cdk.Duration.minutes(30),\n  securityConfiguration: 'securityConfiguration',\n  timeout: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 21,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "8661c7d89ef9421ca5820697128e82a6de6be5e0f9fdbd5ec8a974f37d71d39b"
    },
    "f1d4500d88cd725e1315c59ac09128a33fac16fae3c7545d939d6b6196e2edea": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\nrun_glue_job_task_props = stepfunctions_tasks.RunGlueJobTaskProps(\n    arguments={\n        \"arguments_key\": \"arguments\"\n    },\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    notify_delay_after=cdk.Duration.minutes(30),\n    security_configuration=\"securityConfiguration\",\n    timeout=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\nRunGlueJobTaskProps runGlueJobTaskProps = new RunGlueJobTaskProps {\n    Arguments = new Dictionary<string, string> {\n        { \"argumentsKey\", \"arguments\" }\n    },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    NotifyDelayAfter = Duration.Minutes(30),\n    SecurityConfiguration = \"securityConfiguration\",\n    Timeout = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nRunGlueJobTaskProps runGlueJobTaskProps = RunGlueJobTaskProps.builder()\n        .arguments(Map.of(\n                \"argumentsKey\", \"arguments\"))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .notifyDelayAfter(Duration.minutes(30))\n        .securityConfiguration(\"securityConfiguration\")\n        .timeout(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nrunGlueJobTaskProps := &runGlueJobTaskProps{\n\targuments: map[string]*string{\n\t\t\"argumentsKey\": jsii.String(\"arguments\"),\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tnotifyDelayAfter: cdk.duration.minutes(jsii.Number(30)),\n\tsecurityConfiguration: jsii.String(\"securityConfiguration\"),\n\ttimeout: cdk.*duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\nconst runGlueJobTaskProps: stepfunctions_tasks.RunGlueJobTaskProps = {\n  arguments: {\n    argumentsKey: 'arguments',\n  },\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  notifyDelayAfter: cdk.Duration.minutes(30),\n  securityConfiguration: 'securityConfiguration',\n  timeout: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.RunGlueJobTaskProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.RunGlueJobTaskProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runGlueJobTaskProps: stepfunctions_tasks.RunGlueJobTaskProps = {\n  arguments: {\n    argumentsKey: 'arguments',\n  },\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  notifyDelayAfter: cdk.Duration.minutes(30),\n  securityConfiguration: 'securityConfiguration',\n  timeout: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 21,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "0c7a4f584956f79a0728623e7aba43c3ebc7431c2877e70505012c0b3d43f13c"
    },
    "226e50d9c6a7ad84e628cfd09cfc163123d83eb87db7f62188a4b635e54e9489": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# function_: lambda.Function\n# task_input: stepfunctions.TaskInput\n\nrun_lambda_task = stepfunctions_tasks.RunLambdaTask(function_,\n    client_context=\"clientContext\",\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    invocation_type=stepfunctions_tasks.InvocationType.REQUEST_RESPONSE,\n    payload=task_input,\n    qualifier=\"qualifier\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nFunction function_;\nTaskInput taskInput;\n\nRunLambdaTask runLambdaTask = new RunLambdaTask(function_, new RunLambdaTaskProps {\n    ClientContext = \"clientContext\",\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    InvocationType = InvocationType.REQUEST_RESPONSE,\n    Payload = taskInput,\n    Qualifier = \"qualifier\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nFunction function_;\nTaskInput taskInput;\n\nRunLambdaTask runLambdaTask = RunLambdaTask.Builder.create(function_)\n        .clientContext(\"clientContext\")\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .invocationType(InvocationType.REQUEST_RESPONSE)\n        .payload(taskInput)\n        .qualifier(\"qualifier\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar function_ function\nvar taskInput taskInput\nrunLambdaTask := stepfunctions_tasks.NewRunLambdaTask(function_, &runLambdaTaskProps{\n\tclientContext: jsii.String(\"clientContext\"),\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tinvocationType: stepfunctions_tasks.invocationType_REQUEST_RESPONSE,\n\tpayload: taskInput,\n\tqualifier: jsii.String(\"qualifier\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const function_: lambda.Function;\ndeclare const taskInput: stepfunctions.TaskInput;\nconst runLambdaTask = new stepfunctions_tasks.RunLambdaTask(function_, /* all optional props */ {\n  clientContext: 'clientContext',\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  invocationType: stepfunctions_tasks.InvocationType.REQUEST_RESPONSE,\n  payload: taskInput,\n  qualifier: 'qualifier',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.RunLambdaTask"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.InvocationType",
        "@aws-cdk/aws-stepfunctions-tasks.InvocationType#REQUEST_RESPONSE",
        "@aws-cdk/aws-stepfunctions-tasks.RunLambdaTask",
        "@aws-cdk/aws-stepfunctions-tasks.RunLambdaTaskProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET",
        "@aws-cdk/aws-stepfunctions.TaskInput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const function_: lambda.Function;\ndeclare const taskInput: stepfunctions.TaskInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runLambdaTask = new stepfunctions_tasks.RunLambdaTask(function_, /* all optional props */ {\n  clientContext: 'clientContext',\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  invocationType: stepfunctions_tasks.InvocationType.REQUEST_RESPONSE,\n  payload: taskInput,\n  qualifier: 'qualifier',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "96f34e36a4e7f494008c9df99b7bec9414c02a8e1e60620d5236134462611bee"
    },
    "df9fc07b2ba826b2c3e35d010d2dabf951faa666ab629f30dfda81e5e60dec31": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# task_input: stepfunctions.TaskInput\n\nrun_lambda_task_props = stepfunctions_tasks.RunLambdaTaskProps(\n    client_context=\"clientContext\",\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    invocation_type=stepfunctions_tasks.InvocationType.REQUEST_RESPONSE,\n    payload=task_input,\n    qualifier=\"qualifier\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nTaskInput taskInput;\n\nRunLambdaTaskProps runLambdaTaskProps = new RunLambdaTaskProps {\n    ClientContext = \"clientContext\",\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    InvocationType = InvocationType.REQUEST_RESPONSE,\n    Payload = taskInput,\n    Qualifier = \"qualifier\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nTaskInput taskInput;\n\nRunLambdaTaskProps runLambdaTaskProps = RunLambdaTaskProps.builder()\n        .clientContext(\"clientContext\")\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .invocationType(InvocationType.REQUEST_RESPONSE)\n        .payload(taskInput)\n        .qualifier(\"qualifier\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar taskInput taskInput\nrunLambdaTaskProps := &runLambdaTaskProps{\n\tclientContext: jsii.String(\"clientContext\"),\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tinvocationType: stepfunctions_tasks.invocationType_REQUEST_RESPONSE,\n\tpayload: taskInput,\n\tqualifier: jsii.String(\"qualifier\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const taskInput: stepfunctions.TaskInput;\nconst runLambdaTaskProps: stepfunctions_tasks.RunLambdaTaskProps = {\n  clientContext: 'clientContext',\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  invocationType: stepfunctions_tasks.InvocationType.REQUEST_RESPONSE,\n  payload: taskInput,\n  qualifier: 'qualifier',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.RunLambdaTaskProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.InvocationType",
        "@aws-cdk/aws-stepfunctions-tasks.InvocationType#REQUEST_RESPONSE",
        "@aws-cdk/aws-stepfunctions-tasks.RunLambdaTaskProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET",
        "@aws-cdk/aws-stepfunctions.TaskInput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const taskInput: stepfunctions.TaskInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runLambdaTaskProps: stepfunctions_tasks.RunLambdaTaskProps = {\n  clientContext: 'clientContext',\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  invocationType: stepfunctions_tasks.InvocationType.REQUEST_RESPONSE,\n  payload: taskInput,\n  qualifier: 'qualifier',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "0dce843f5fe7890eef9efa9d96b018d839229406338ddf99f620fefcb21e83aa"
    },
    "3391998522543c7cabb3e010f549badefe16a497ce197379acad2d24a9eaeae5": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.S3DataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "f2afb235badc1227acb51c538ce16621dead155caadbcf8a5a8582fbbdee6276": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.S3DataType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "1b83b91b3949129f4fd23f9d3bb12acd416cdc1130061e6071b73f2c6e7184dc": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.S3Location"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "8a4182030943e6ed74d743acb3a1a3828ba7c35e49de9746bd0b0c0fc9275df6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\ns3_location_bind_options = stepfunctions_tasks.S3LocationBindOptions(\n    for_reading=False,\n    for_writing=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nS3LocationBindOptions s3LocationBindOptions = new S3LocationBindOptions {\n    ForReading = false,\n    ForWriting = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nS3LocationBindOptions s3LocationBindOptions = S3LocationBindOptions.builder()\n        .forReading(false)\n        .forWriting(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\ns3LocationBindOptions := &s3LocationBindOptions{\n\tforReading: jsii.Boolean(false),\n\tforWriting: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst s3LocationBindOptions: stepfunctions_tasks.S3LocationBindOptions = {\n  forReading: false,\n  forWriting: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.S3LocationBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.S3LocationBindOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3LocationBindOptions: stepfunctions_tasks.S3LocationBindOptions = {\n  forReading: false,\n  forWriting: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4341f4d12550befe5edf85d0baf4289834574d2d89cb57982b8c0035298247db"
    },
    "84d914971cbcce57511ef9f0ae4a3b765a939c4340f740759d187cf0ccc1438f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\ns3_location_config = stepfunctions_tasks.S3LocationConfig(\n    uri=\"uri\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nS3LocationConfig s3LocationConfig = new S3LocationConfig {\n    Uri = \"uri\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nS3LocationConfig s3LocationConfig = S3LocationConfig.builder()\n        .uri(\"uri\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\ns3LocationConfig := &s3LocationConfig{\n\turi: jsii.String(\"uri\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst s3LocationConfig: stepfunctions_tasks.S3LocationConfig = {\n  uri: 'uri',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.S3LocationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.S3LocationConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3LocationConfig: stepfunctions_tasks.S3LocationConfig = {\n  uri: 'uri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "8ae5838732d40dda12bad5c0adeacc9eb12589cf3680c42a4ce13d5913d3f15c"
    },
    "23fc45b11c47351d60c750f71594f39a00d26c48ef069a6d30a6a0cba7a1219f": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateEndpoint(self, \"SagemakerEndpoint\",\n    endpoint_name=sfn.JsonPath.string_at(\"$.EndpointName\"),\n    endpoint_config_name=sfn.JsonPath.string_at(\"$.EndpointConfigName\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateEndpoint(this, \"SagemakerEndpoint\", new SageMakerCreateEndpointProps {\n    EndpointName = JsonPath.StringAt(\"$.EndpointName\"),\n    EndpointConfigName = JsonPath.StringAt(\"$.EndpointConfigName\")\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateEndpoint.Builder.create(this, \"SagemakerEndpoint\")\n        .endpointName(JsonPath.stringAt(\"$.EndpointName\"))\n        .endpointConfigName(JsonPath.stringAt(\"$.EndpointConfigName\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateEndpoint(this, jsii.String(\"SagemakerEndpoint\"), &sageMakerCreateEndpointProps{\n\tendpointName: sfn.jsonPath.stringAt(jsii.String(\"$.EndpointName\")),\n\tendpointConfigName: sfn.*jsonPath.stringAt(jsii.String(\"$.EndpointConfigName\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.EndpointName'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.EndpointConfigName'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.EndpointName'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.EndpointConfigName'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "eaf2966b4774d956f39544d673985e29bf622770e180f5eab7eac06fd0a0af95"
    },
    "3117d609fe1e008578ac23b5848b8c5ca89964b1ab52a50471b6b192d4cc5f0c": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateEndpointConfig(self, \"SagemakerEndpointConfig\",\n    endpoint_config_name=\"MyEndpointConfig\",\n    production_variants=[tasks.ProductionVariant(\n        initial_instance_count=2,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.XLARGE),\n        model_name=\"MyModel\",\n        variant_name=\"awesome-variant\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateEndpointConfig(this, \"SagemakerEndpointConfig\", new SageMakerCreateEndpointConfigProps {\n    EndpointConfigName = \"MyEndpointConfig\",\n    ProductionVariants = new [] { new ProductionVariant {\n        InitialInstanceCount = 2,\n        InstanceType = InstanceType.Of(InstanceClass.M5, InstanceSize.XLARGE),\n        ModelName = \"MyModel\",\n        VariantName = \"awesome-variant\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateEndpointConfig.Builder.create(this, \"SagemakerEndpointConfig\")\n        .endpointConfigName(\"MyEndpointConfig\")\n        .productionVariants(List.of(ProductionVariant.builder()\n                .initialInstanceCount(2)\n                .instanceType(InstanceType.of(InstanceClass.M5, InstanceSize.XLARGE))\n                .modelName(\"MyModel\")\n                .variantName(\"awesome-variant\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateEndpointConfig(this, jsii.String(\"SagemakerEndpointConfig\"), &sageMakerCreateEndpointConfigProps{\n\tendpointConfigName: jsii.String(\"MyEndpointConfig\"),\n\tproductionVariants: []productionVariant{\n\t\t&productionVariant{\n\t\t\tinitialInstanceCount: jsii.Number(2),\n\t\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M5, ec2.instanceSize_XLARGE),\n\t\t\tmodelName: jsii.String(\"MyModel\"),\n\t\t\tvariantName: jsii.String(\"awesome-variant\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateEndpointConfig(this, 'SagemakerEndpointConfig', {\n  endpointConfigName: 'MyEndpointConfig',\n  productionVariants: [{\n  initialInstanceCount: 2,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.XLARGE),\n    modelName: 'MyModel',\n    variantName: 'awesome-variant',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointConfig",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointConfigProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateEndpointConfig(this, 'SagemakerEndpointConfig', {\n  endpointConfigName: 'MyEndpointConfig',\n  productionVariants: [{\n  initialInstanceCount: 2,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.XLARGE),\n    modelName: 'MyModel',\n    variantName: 'awesome-variant',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 17,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "67e671070d669fa6cc3abe3f77934897aebe7e0bffaa120f977a8c7baf7e8982"
    },
    "b1a2e8f48a54a38492ca80985901295d89763382e89e1ed376ad2830840adf42": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateEndpointConfig(self, \"SagemakerEndpointConfig\",\n    endpoint_config_name=\"MyEndpointConfig\",\n    production_variants=[tasks.ProductionVariant(\n        initial_instance_count=2,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.XLARGE),\n        model_name=\"MyModel\",\n        variant_name=\"awesome-variant\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateEndpointConfig(this, \"SagemakerEndpointConfig\", new SageMakerCreateEndpointConfigProps {\n    EndpointConfigName = \"MyEndpointConfig\",\n    ProductionVariants = new [] { new ProductionVariant {\n        InitialInstanceCount = 2,\n        InstanceType = InstanceType.Of(InstanceClass.M5, InstanceSize.XLARGE),\n        ModelName = \"MyModel\",\n        VariantName = \"awesome-variant\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateEndpointConfig.Builder.create(this, \"SagemakerEndpointConfig\")\n        .endpointConfigName(\"MyEndpointConfig\")\n        .productionVariants(List.of(ProductionVariant.builder()\n                .initialInstanceCount(2)\n                .instanceType(InstanceType.of(InstanceClass.M5, InstanceSize.XLARGE))\n                .modelName(\"MyModel\")\n                .variantName(\"awesome-variant\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateEndpointConfig(this, jsii.String(\"SagemakerEndpointConfig\"), &sageMakerCreateEndpointConfigProps{\n\tendpointConfigName: jsii.String(\"MyEndpointConfig\"),\n\tproductionVariants: []productionVariant{\n\t\t&productionVariant{\n\t\t\tinitialInstanceCount: jsii.Number(2),\n\t\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M5, ec2.instanceSize_XLARGE),\n\t\t\tmodelName: jsii.String(\"MyModel\"),\n\t\t\tvariantName: jsii.String(\"awesome-variant\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateEndpointConfig(this, 'SagemakerEndpointConfig', {\n  endpointConfigName: 'MyEndpointConfig',\n  productionVariants: [{\n  initialInstanceCount: 2,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.XLARGE),\n    modelName: 'MyModel',\n    variantName: 'awesome-variant',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointConfig",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointConfigProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateEndpointConfig(this, 'SagemakerEndpointConfig', {\n  endpointConfigName: 'MyEndpointConfig',\n  productionVariants: [{\n  initialInstanceCount: 2,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.XLARGE),\n    modelName: 'MyModel',\n    variantName: 'awesome-variant',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 17,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "67e671070d669fa6cc3abe3f77934897aebe7e0bffaa120f977a8c7baf7e8982"
    },
    "48eec6e37a1c52406855aa7ff03b9aca25bb16545dadd182405342224f35ab1e": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateEndpoint(self, \"SagemakerEndpoint\",\n    endpoint_name=sfn.JsonPath.string_at(\"$.EndpointName\"),\n    endpoint_config_name=sfn.JsonPath.string_at(\"$.EndpointConfigName\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateEndpoint(this, \"SagemakerEndpoint\", new SageMakerCreateEndpointProps {\n    EndpointName = JsonPath.StringAt(\"$.EndpointName\"),\n    EndpointConfigName = JsonPath.StringAt(\"$.EndpointConfigName\")\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateEndpoint.Builder.create(this, \"SagemakerEndpoint\")\n        .endpointName(JsonPath.stringAt(\"$.EndpointName\"))\n        .endpointConfigName(JsonPath.stringAt(\"$.EndpointConfigName\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateEndpoint(this, jsii.String(\"SagemakerEndpoint\"), &sageMakerCreateEndpointProps{\n\tendpointName: sfn.jsonPath.stringAt(jsii.String(\"$.EndpointName\")),\n\tendpointConfigName: sfn.*jsonPath.stringAt(jsii.String(\"$.EndpointConfigName\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.EndpointName'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.EndpointConfigName'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateEndpointProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.EndpointName'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.EndpointConfigName'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "eaf2966b4774d956f39544d673985e29bf622770e180f5eab7eac06fd0a0af95"
    },
    "92cc1aa409650a3bb12eb0f23a1834c79a4d9564fe37a00918260934528f3bcc": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateModel(self, \"Sagemaker\",\n    model_name=\"MyModel\",\n    primary_container=tasks.ContainerDefinition(\n        image=tasks.DockerImage.from_json_expression(sfn.JsonPath.string_at(\"$.Model.imageName\")),\n        mode=tasks.Mode.SINGLE_MODEL,\n        model_s3_location=tasks.S3Location.from_json_expression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateModel(this, \"Sagemaker\", new SageMakerCreateModelProps {\n    ModelName = \"MyModel\",\n    PrimaryContainer = new ContainerDefinition(new ContainerDefinitionOptions {\n        Image = DockerImage.FromJsonExpression(JsonPath.StringAt(\"$.Model.imageName\")),\n        Mode = Mode.SINGLE_MODEL,\n        ModelS3Location = S3Location.FromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateModel.Builder.create(this, \"Sagemaker\")\n        .modelName(\"MyModel\")\n        .primaryContainer(ContainerDefinition.Builder.create()\n                .image(DockerImage.fromJsonExpression(JsonPath.stringAt(\"$.Model.imageName\")))\n                .mode(Mode.SINGLE_MODEL)\n                .modelS3Location(S3Location.fromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateModel(this, jsii.String(\"Sagemaker\"), &sageMakerCreateModelProps{\n\tmodelName: jsii.String(\"MyModel\"),\n\tprimaryContainer: tasks.NewContainerDefinition(&containerDefinitionOptions{\n\t\timage: tasks.dockerImage.fromJsonExpression(sfn.jsonPath.stringAt(jsii.String(\"$.Model.imageName\"))),\n\t\tmode: tasks.mode_SINGLE_MODEL,\n\t\tmodelS3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinitionOptions",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.IContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.Mode",
        "@aws-cdk/aws-stepfunctions-tasks.Mode#SINGLE_MODEL",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModel",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModelProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "193": 2,
        "194": 10,
        "196": 3,
        "197": 2,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "b1970df7f72e14acedbd643173af4da87ef70ae8be1bea9122c50f2481b3c3ee"
    },
    "2f222acdf399914d72272b81a315b1cdf811f8295674bca7357d94c7529debf6": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateModel(self, \"Sagemaker\",\n    model_name=\"MyModel\",\n    primary_container=tasks.ContainerDefinition(\n        image=tasks.DockerImage.from_json_expression(sfn.JsonPath.string_at(\"$.Model.imageName\")),\n        mode=tasks.Mode.SINGLE_MODEL,\n        model_s3_location=tasks.S3Location.from_json_expression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateModel(this, \"Sagemaker\", new SageMakerCreateModelProps {\n    ModelName = \"MyModel\",\n    PrimaryContainer = new ContainerDefinition(new ContainerDefinitionOptions {\n        Image = DockerImage.FromJsonExpression(JsonPath.StringAt(\"$.Model.imageName\")),\n        Mode = Mode.SINGLE_MODEL,\n        ModelS3Location = S3Location.FromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateModel.Builder.create(this, \"Sagemaker\")\n        .modelName(\"MyModel\")\n        .primaryContainer(ContainerDefinition.Builder.create()\n                .image(DockerImage.fromJsonExpression(JsonPath.stringAt(\"$.Model.imageName\")))\n                .mode(Mode.SINGLE_MODEL)\n                .modelS3Location(S3Location.fromJsonExpression(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateModel(this, jsii.String(\"Sagemaker\"), &sageMakerCreateModelProps{\n\tmodelName: jsii.String(\"MyModel\"),\n\tprimaryContainer: tasks.NewContainerDefinition(&containerDefinitionOptions{\n\t\timage: tasks.dockerImage.fromJsonExpression(sfn.jsonPath.stringAt(jsii.String(\"$.Model.imageName\"))),\n\t\tmode: tasks.mode_SINGLE_MODEL,\n\t\tmodelS3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.TrainingJob.ModelArtifacts.S3ModelArtifacts\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModelProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.ContainerDefinitionOptions",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage",
        "@aws-cdk/aws-stepfunctions-tasks.DockerImage#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.IContainerDefinition",
        "@aws-cdk/aws-stepfunctions-tasks.Mode",
        "@aws-cdk/aws-stepfunctions-tasks.Mode#SINGLE_MODEL",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModel",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateModelProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateModel(this, 'Sagemaker', {\n  modelName: 'MyModel',\n  primaryContainer: new tasks.ContainerDefinition({\n    image: tasks.DockerImage.fromJsonExpression(sfn.JsonPath.stringAt('$.Model.imageName')),\n    mode: tasks.Mode.SINGLE_MODEL,\n    modelS3Location: tasks.S3Location.fromJsonExpression('$.TrainingJob.ModelArtifacts.S3ModelArtifacts'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "193": 2,
        "194": 10,
        "196": 3,
        "197": 2,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "b1970df7f72e14acedbd643173af4da87ef70ae8be1bea9122c50f2481b3c3ee"
    },
    "793f71737b5ea0ffa29d69f6f8456b645e32d103368e78e13b40d93f740cebc2": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "ae2eec7c0872f0dcb459a06163ca7479f940dcdf6c5a50ecf07545a75e9abde1": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "9099b1231d18aab78c17e27b6dd8c8fc4ea9699992621961cf7b9e2e7934053a": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTransformJob(self, \"Batch Inference\",\n    transform_job_name=\"MyTransformJob\",\n    model_name=\"MyModelName\",\n    model_client_options=tasks.ModelClientOptions(\n        invocations_max_retries=3,  # default is 0\n        invocations_timeout=Duration.minutes(5)\n    ),\n    transform_input=tasks.TransformInput(\n        transform_data_source=tasks.TransformDataSource(\n            s3_data_source=tasks.TransformS3DataSource(\n                s3_uri=\"s3://inputbucket/train\",\n                s3_data_type=tasks.S3DataType.S3_PREFIX\n            )\n        )\n    ),\n    transform_output=tasks.TransformOutput(\n        s3_output_path=\"s3://outputbucket/TransformJobOutputPath\"\n    ),\n    transform_resources=tasks.TransformResources(\n        instance_count=1,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTransformJob(this, \"Batch Inference\", new SageMakerCreateTransformJobProps {\n    TransformJobName = \"MyTransformJob\",\n    ModelName = \"MyModelName\",\n    ModelClientOptions = new ModelClientOptions {\n        InvocationsMaxRetries = 3,  // default is 0\n        InvocationsTimeout = Duration.Minutes(5)\n    },\n    TransformInput = new TransformInput {\n        TransformDataSource = new TransformDataSource {\n            S3DataSource = new TransformS3DataSource {\n                S3Uri = \"s3://inputbucket/train\",\n                S3DataType = S3DataType.S3_PREFIX\n            }\n        }\n    },\n    TransformOutput = new TransformOutput {\n        S3OutputPath = \"s3://outputbucket/TransformJobOutputPath\"\n    },\n    TransformResources = new TransformResources {\n        InstanceCount = 1,\n        InstanceType = InstanceType.Of(InstanceClass.M4, InstanceSize.XLARGE)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTransformJob.Builder.create(this, \"Batch Inference\")\n        .transformJobName(\"MyTransformJob\")\n        .modelName(\"MyModelName\")\n        .modelClientOptions(ModelClientOptions.builder()\n                .invocationsMaxRetries(3) // default is 0\n                .invocationsTimeout(Duration.minutes(5))\n                .build())\n        .transformInput(TransformInput.builder()\n                .transformDataSource(TransformDataSource.builder()\n                        .s3DataSource(TransformS3DataSource.builder()\n                                .s3Uri(\"s3://inputbucket/train\")\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .build())\n                        .build())\n                .build())\n        .transformOutput(TransformOutput.builder()\n                .s3OutputPath(\"s3://outputbucket/TransformJobOutputPath\")\n                .build())\n        .transformResources(TransformResources.builder()\n                .instanceCount(1)\n                .instanceType(InstanceType.of(InstanceClass.M4, InstanceSize.XLARGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTransformJob(this, jsii.String(\"Batch Inference\"), &sageMakerCreateTransformJobProps{\n\ttransformJobName: jsii.String(\"MyTransformJob\"),\n\tmodelName: jsii.String(\"MyModelName\"),\n\tmodelClientOptions: &modelClientOptions{\n\t\tinvocationsMaxRetries: jsii.Number(3),\n\t\t // default is 0\n\t\tinvocationsTimeout: duration.minutes(jsii.Number(5)),\n\t},\n\ttransformInput: &transformInput{\n\t\ttransformDataSource: &transformDataSource{\n\t\t\ts3DataSource: &transformS3DataSource{\n\t\t\t\ts3Uri: jsii.String(\"s3://inputbucket/train\"),\n\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t},\n\t\t},\n\t},\n\ttransformOutput: &transformOutput{\n\t\ts3OutputPath: jsii.String(\"s3://outputbucket/TransformJobOutputPath\"),\n\t},\n\ttransformResources: &transformResources{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M4, ec2.instanceSize_XLARGE),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJob"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M4",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.ModelClientOptions",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.TransformDataSource",
        "@aws-cdk/aws-stepfunctions-tasks.TransformInput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformOutput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformResources",
        "@aws-cdk/aws-stepfunctions-tasks.TransformS3DataSource",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 31,
        "104": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 15
      },
      "fqnsFingerprint": "fd299dab2d91364d338c465c76cc2f657ae1e29ff838db159e29f333974ba0fb"
    },
    "45220a719277a3d57a37ec1f35e2dec5e9da417f36487ddb6eb1889e2301ec89": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTransformJob(self, \"Batch Inference\",\n    transform_job_name=\"MyTransformJob\",\n    model_name=\"MyModelName\",\n    model_client_options=tasks.ModelClientOptions(\n        invocations_max_retries=3,  # default is 0\n        invocations_timeout=Duration.minutes(5)\n    ),\n    transform_input=tasks.TransformInput(\n        transform_data_source=tasks.TransformDataSource(\n            s3_data_source=tasks.TransformS3DataSource(\n                s3_uri=\"s3://inputbucket/train\",\n                s3_data_type=tasks.S3DataType.S3_PREFIX\n            )\n        )\n    ),\n    transform_output=tasks.TransformOutput(\n        s3_output_path=\"s3://outputbucket/TransformJobOutputPath\"\n    ),\n    transform_resources=tasks.TransformResources(\n        instance_count=1,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTransformJob(this, \"Batch Inference\", new SageMakerCreateTransformJobProps {\n    TransformJobName = \"MyTransformJob\",\n    ModelName = \"MyModelName\",\n    ModelClientOptions = new ModelClientOptions {\n        InvocationsMaxRetries = 3,  // default is 0\n        InvocationsTimeout = Duration.Minutes(5)\n    },\n    TransformInput = new TransformInput {\n        TransformDataSource = new TransformDataSource {\n            S3DataSource = new TransformS3DataSource {\n                S3Uri = \"s3://inputbucket/train\",\n                S3DataType = S3DataType.S3_PREFIX\n            }\n        }\n    },\n    TransformOutput = new TransformOutput {\n        S3OutputPath = \"s3://outputbucket/TransformJobOutputPath\"\n    },\n    TransformResources = new TransformResources {\n        InstanceCount = 1,\n        InstanceType = InstanceType.Of(InstanceClass.M4, InstanceSize.XLARGE)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTransformJob.Builder.create(this, \"Batch Inference\")\n        .transformJobName(\"MyTransformJob\")\n        .modelName(\"MyModelName\")\n        .modelClientOptions(ModelClientOptions.builder()\n                .invocationsMaxRetries(3) // default is 0\n                .invocationsTimeout(Duration.minutes(5))\n                .build())\n        .transformInput(TransformInput.builder()\n                .transformDataSource(TransformDataSource.builder()\n                        .s3DataSource(TransformS3DataSource.builder()\n                                .s3Uri(\"s3://inputbucket/train\")\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .build())\n                        .build())\n                .build())\n        .transformOutput(TransformOutput.builder()\n                .s3OutputPath(\"s3://outputbucket/TransformJobOutputPath\")\n                .build())\n        .transformResources(TransformResources.builder()\n                .instanceCount(1)\n                .instanceType(InstanceType.of(InstanceClass.M4, InstanceSize.XLARGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTransformJob(this, jsii.String(\"Batch Inference\"), &sageMakerCreateTransformJobProps{\n\ttransformJobName: jsii.String(\"MyTransformJob\"),\n\tmodelName: jsii.String(\"MyModelName\"),\n\tmodelClientOptions: &modelClientOptions{\n\t\tinvocationsMaxRetries: jsii.Number(3),\n\t\t // default is 0\n\t\tinvocationsTimeout: duration.minutes(jsii.Number(5)),\n\t},\n\ttransformInput: &transformInput{\n\t\ttransformDataSource: &transformDataSource{\n\t\t\ts3DataSource: &transformS3DataSource{\n\t\t\t\ts3Uri: jsii.String(\"s3://inputbucket/train\"),\n\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t},\n\t\t},\n\t},\n\ttransformOutput: &transformOutput{\n\t\ts3OutputPath: jsii.String(\"s3://outputbucket/TransformJobOutputPath\"),\n\t},\n\ttransformResources: &transformResources{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M4, ec2.instanceSize_XLARGE),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJobProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M4",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.ModelClientOptions",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.TransformDataSource",
        "@aws-cdk/aws-stepfunctions-tasks.TransformInput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformOutput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformResources",
        "@aws-cdk/aws-stepfunctions-tasks.TransformS3DataSource",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 31,
        "104": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 15
      },
      "fqnsFingerprint": "fd299dab2d91364d338c465c76cc2f657ae1e29ff838db159e29f333974ba0fb"
    },
    "c12cec849b73858d5c7e0fb02984a3c0a0912e483d01ae5c4c35834f536e3288": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerUpdateEndpoint(self, \"SagemakerEndpoint\",\n    endpoint_name=sfn.JsonPath.string_at(\"$.Endpoint.Name\"),\n    endpoint_config_name=sfn.JsonPath.string_at(\"$.Endpoint.EndpointConfig\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerUpdateEndpoint(this, \"SagemakerEndpoint\", new SageMakerUpdateEndpointProps {\n    EndpointName = JsonPath.StringAt(\"$.Endpoint.Name\"),\n    EndpointConfigName = JsonPath.StringAt(\"$.Endpoint.EndpointConfig\")\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerUpdateEndpoint.Builder.create(this, \"SagemakerEndpoint\")\n        .endpointName(JsonPath.stringAt(\"$.Endpoint.Name\"))\n        .endpointConfigName(JsonPath.stringAt(\"$.Endpoint.EndpointConfig\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerUpdateEndpoint(this, jsii.String(\"SagemakerEndpoint\"), &sageMakerUpdateEndpointProps{\n\tendpointName: sfn.jsonPath.stringAt(jsii.String(\"$.Endpoint.Name\")),\n\tendpointConfigName: sfn.*jsonPath.stringAt(jsii.String(\"$.Endpoint.EndpointConfig\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerUpdateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.Endpoint.Name'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.Endpoint.EndpointConfig'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerUpdateEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerUpdateEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerUpdateEndpointProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerUpdateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.Endpoint.Name'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.Endpoint.EndpointConfig'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "87bd5f1d476a7f9521bf31e574dc19bb67cbbda7a701836eefc1513e60694dad"
    },
    "01bd72309e40434c8df4dae1e65ab72678b057ecff98e6b2e0f0df95ea7dfea2": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerUpdateEndpoint(self, \"SagemakerEndpoint\",\n    endpoint_name=sfn.JsonPath.string_at(\"$.Endpoint.Name\"),\n    endpoint_config_name=sfn.JsonPath.string_at(\"$.Endpoint.EndpointConfig\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerUpdateEndpoint(this, \"SagemakerEndpoint\", new SageMakerUpdateEndpointProps {\n    EndpointName = JsonPath.StringAt(\"$.Endpoint.Name\"),\n    EndpointConfigName = JsonPath.StringAt(\"$.Endpoint.EndpointConfig\")\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerUpdateEndpoint.Builder.create(this, \"SagemakerEndpoint\")\n        .endpointName(JsonPath.stringAt(\"$.Endpoint.Name\"))\n        .endpointConfigName(JsonPath.stringAt(\"$.Endpoint.EndpointConfig\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerUpdateEndpoint(this, jsii.String(\"SagemakerEndpoint\"), &sageMakerUpdateEndpointProps{\n\tendpointName: sfn.jsonPath.stringAt(jsii.String(\"$.Endpoint.Name\")),\n\tendpointConfigName: sfn.*jsonPath.stringAt(jsii.String(\"$.Endpoint.EndpointConfig\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerUpdateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.Endpoint.Name'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.Endpoint.EndpointConfig'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SageMakerUpdateEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerUpdateEndpoint",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerUpdateEndpointProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerUpdateEndpoint(this, 'SagemakerEndpoint', {\n  endpointName: sfn.JsonPath.stringAt('$.Endpoint.Name'),\n  endpointConfigName: sfn.JsonPath.stringAt('$.Endpoint.EndpointConfig'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "87bd5f1d476a7f9521bf31e574dc19bb67cbbda7a701836eefc1513e60694dad"
    },
    "c8a59757e3c9c887190582502939ac8446f4630d9754bc439943a4c73a8da175": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_sqs as sqs\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# queue: sqs.Queue\n# task_input: stepfunctions.TaskInput\n\nsend_to_queue = stepfunctions_tasks.SendToQueue(queue,\n    message_body=task_input,\n\n    # the properties below are optional\n    delay=cdk.Duration.minutes(30),\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    message_deduplication_id=\"messageDeduplicationId\",\n    message_group_id=\"messageGroupId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SQS;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nQueue queue;\nTaskInput taskInput;\nSendToQueue sendToQueue = new SendToQueue(queue, new SendToQueueProps {\n    MessageBody = taskInput,\n\n    // the properties below are optional\n    Delay = Duration.Minutes(30),\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    MessageDeduplicationId = \"messageDeduplicationId\",\n    MessageGroupId = \"messageGroupId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.sqs.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nQueue queue;\nTaskInput taskInput;\n\nSendToQueue sendToQueue = SendToQueue.Builder.create(queue)\n        .messageBody(taskInput)\n\n        // the properties below are optional\n        .delay(Duration.minutes(30))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .messageDeduplicationId(\"messageDeduplicationId\")\n        .messageGroupId(\"messageGroupId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import sqs \"github.com/aws-samples/dummy/awscdkawssqs\"import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar queue queue\nvar taskInput taskInput\nsendToQueue := stepfunctions_tasks.NewSendToQueue(queue, &sendToQueueProps{\n\tmessageBody: taskInput,\n\n\t// the properties below are optional\n\tdelay: cdk.duration.minutes(jsii.Number(30)),\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tmessageDeduplicationId: jsii.String(\"messageDeduplicationId\"),\n\tmessageGroupId: jsii.String(\"messageGroupId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\ndeclare const taskInput: stepfunctions.TaskInput;\nconst sendToQueue = new stepfunctions_tasks.SendToQueue(queue, {\n  messageBody: taskInput,\n\n  // the properties below are optional\n  delay: cdk.Duration.minutes(30),\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  messageDeduplicationId: 'messageDeduplicationId',\n  messageGroupId: 'messageGroupId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SendToQueue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-stepfunctions-tasks.SendToQueue",
        "@aws-cdk/aws-stepfunctions-tasks.SendToQueueProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\ndeclare const taskInput: stepfunctions.TaskInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sendToQueue = new stepfunctions_tasks.SendToQueue(queue, {\n  messageBody: taskInput,\n\n  // the properties below are optional\n  delay: cdk.Duration.minutes(30),\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  messageDeduplicationId: 'messageDeduplicationId',\n  messageGroupId: 'messageGroupId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 26,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "549636d36ec77e334d21dc9f63d8c0e5dea1b5834962a4b6a8a8c329753f40f9"
    },
    "b5f5abae4c93dee158e300720b8cda6e957f921f73d1c715f81b9a254fc0c93b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\nimport aws_cdk.core as cdk\n\n# task_input: stepfunctions.TaskInput\n\nsend_to_queue_props = stepfunctions_tasks.SendToQueueProps(\n    message_body=task_input,\n\n    # the properties below are optional\n    delay=cdk.Duration.minutes(30),\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    message_deduplication_id=\"messageDeduplicationId\",\n    message_group_id=\"messageGroupId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\nusing Amazon.CDK;\n\nTaskInput taskInput;\nSendToQueueProps sendToQueueProps = new SendToQueueProps {\n    MessageBody = taskInput,\n\n    // the properties below are optional\n    Delay = Duration.Minutes(30),\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    MessageDeduplicationId = \"messageDeduplicationId\",\n    MessageGroupId = \"messageGroupId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\nimport software.amazon.awscdk.core.*;\n\nTaskInput taskInput;\n\nSendToQueueProps sendToQueueProps = SendToQueueProps.builder()\n        .messageBody(taskInput)\n\n        // the properties below are optional\n        .delay(Duration.minutes(30))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .messageDeduplicationId(\"messageDeduplicationId\")\n        .messageGroupId(\"messageGroupId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar taskInput taskInput\nsendToQueueProps := &sendToQueueProps{\n\tmessageBody: taskInput,\n\n\t// the properties below are optional\n\tdelay: cdk.duration.minutes(jsii.Number(30)),\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tmessageDeduplicationId: jsii.String(\"messageDeduplicationId\"),\n\tmessageGroupId: jsii.String(\"messageGroupId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const taskInput: stepfunctions.TaskInput;\nconst sendToQueueProps: stepfunctions_tasks.SendToQueueProps = {\n  messageBody: taskInput,\n\n  // the properties below are optional\n  delay: cdk.Duration.minutes(30),\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  messageDeduplicationId: 'messageDeduplicationId',\n  messageGroupId: 'messageGroupId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SendToQueueProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.SendToQueueProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const taskInput: stepfunctions.TaskInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sendToQueueProps: stepfunctions_tasks.SendToQueueProps = {\n  messageBody: taskInput,\n\n  // the properties below are optional\n  delay: cdk.Duration.minutes(30),\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  messageDeduplicationId: 'messageDeduplicationId',\n  messageGroupId: 'messageGroupId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 21,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "159a62ceb057a5656396ed2de2ed2530403af07322dfeae7724158697b824c3d"
    },
    "8b8d14e82241b7157f899dd90fa79f04087be6ad0d05c4e1d2a2dbbd956d7a8b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\nshuffle_config = stepfunctions_tasks.ShuffleConfig(\n    seed=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nShuffleConfig shuffleConfig = new ShuffleConfig {\n    Seed = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nShuffleConfig shuffleConfig = ShuffleConfig.builder()\n        .seed(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\nshuffleConfig := &shuffleConfig{\n\tseed: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst shuffleConfig: stepfunctions_tasks.ShuffleConfig = {\n  seed: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.ShuffleConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.ShuffleConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst shuffleConfig: stepfunctions_tasks.ShuffleConfig = {\n  seed: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "84c3e4118ded11e9a1bfb919694af411e8c5ceaa29fcb32c182bb6d034214b19"
    },
    "d4e45a021af642e57e43fdd5d9d8b68f178acddb6229ec90b78bc15e4ef5297f": {
      "translations": {
        "python": {
          "source": "convert_to_seconds = tasks.EvaluateExpression(self, \"Convert to seconds\",\n    expression=\"$.waitMilliseconds / 1000\",\n    result_path=\"$.waitSeconds\"\n)\n\ncreate_message = tasks.EvaluateExpression(self, \"Create message\",\n    # Note: this is a string inside a string.\n    expression=\"`Now waiting ${$.waitSeconds} seconds...`\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.SnsPublish(self, \"Publish message\",\n    topic=sns.Topic(self, \"cool-topic\"),\n    message=sfn.TaskInput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.Wait(self, \"Wait\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "EvaluateExpression convertToSeconds = new EvaluateExpression(this, \"Convert to seconds\", new EvaluateExpressionProps {\n    Expression = \"$.waitMilliseconds / 1000\",\n    ResultPath = \"$.waitSeconds\"\n});\n\nEvaluateExpression createMessage = new EvaluateExpression(this, \"Create message\", new EvaluateExpressionProps {\n    // Note: this is a string inside a string.\n    Expression = \"`Now waiting ${$.waitSeconds} seconds...`\",\n    Runtime = Runtime.NODEJS_14_X,\n    ResultPath = \"$.message\"\n});\n\nSnsPublish publishMessage = new SnsPublish(this, \"Publish message\", new SnsPublishProps {\n    Topic = new Topic(this, \"cool-topic\"),\n    Message = TaskInput.FromJsonPathAt(\"$.message\"),\n    ResultPath = \"$.sns\"\n});\n\nWait wait = new Wait(this, \"Wait\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = convertToSeconds.Next(createMessage).Next(publishMessage).Next(wait)\n});",
          "version": "1"
        },
        "java": {
          "source": "EvaluateExpression convertToSeconds = EvaluateExpression.Builder.create(this, \"Convert to seconds\")\n        .expression(\"$.waitMilliseconds / 1000\")\n        .resultPath(\"$.waitSeconds\")\n        .build();\n\nEvaluateExpression createMessage = EvaluateExpression.Builder.create(this, \"Create message\")\n        // Note: this is a string inside a string.\n        .expression(\"`Now waiting ${$.waitSeconds} seconds...`\")\n        .runtime(Runtime.NODEJS_14_X)\n        .resultPath(\"$.message\")\n        .build();\n\nSnsPublish publishMessage = SnsPublish.Builder.create(this, \"Publish message\")\n        .topic(new Topic(this, \"cool-topic\"))\n        .message(TaskInput.fromJsonPathAt(\"$.message\"))\n        .resultPath(\"$.sns\")\n        .build();\n\nWait wait = Wait.Builder.create(this, \"Wait\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(convertToSeconds.next(createMessage).next(publishMessage).next(wait))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "convertToSeconds := tasks.NewEvaluateExpression(this, jsii.String(\"Convert to seconds\"), &evaluateExpressionProps{\n\texpression: jsii.String(\"$.waitMilliseconds / 1000\"),\n\tresultPath: jsii.String(\"$.waitSeconds\"),\n})\n\ncreateMessage := tasks.NewEvaluateExpression(this, jsii.String(\"Create message\"), &evaluateExpressionProps{\n\t// Note: this is a string inside a string.\n\texpression: jsii.String(\"`Now waiting ${$.waitSeconds} seconds...`\"),\n\truntime: lambda.runtime_NODEJS_14_X(),\n\tresultPath: jsii.String(\"$.message\"),\n})\n\npublishMessage := tasks.NewSnsPublish(this, jsii.String(\"Publish message\"), &snsPublishProps{\n\ttopic: sns.NewTopic(this, jsii.String(\"cool-topic\")),\n\tmessage: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.message\")),\n\tresultPath: jsii.String(\"$.sns\"),\n})\n\nwait := sfn.NewWait(this, jsii.String(\"Wait\"), &waitProps{\n\ttime: sfn.waitTime.secondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &stateMachineProps{\n\tdefinition: convertToSeconds.next(createMessage).next(publishMessage).next(wait),\n})",
          "version": "1"
        },
        "$": {
          "source": "const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SnsPublish"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublish",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 42,
        "104": 6,
        "193": 5,
        "194": 15,
        "196": 5,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 10
      },
      "fqnsFingerprint": "4ed01fad2aee65313d791cb2f4478ef39c4a467c70593ae9b560df902f17337d"
    },
    "a5d99fc79bb6be7a195c525bb76fd6ad7606ab311e3c6bf3044daedca43fb953": {
      "translations": {
        "python": {
          "source": "convert_to_seconds = tasks.EvaluateExpression(self, \"Convert to seconds\",\n    expression=\"$.waitMilliseconds / 1000\",\n    result_path=\"$.waitSeconds\"\n)\n\ncreate_message = tasks.EvaluateExpression(self, \"Create message\",\n    # Note: this is a string inside a string.\n    expression=\"`Now waiting ${$.waitSeconds} seconds...`\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.SnsPublish(self, \"Publish message\",\n    topic=sns.Topic(self, \"cool-topic\"),\n    message=sfn.TaskInput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.Wait(self, \"Wait\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "EvaluateExpression convertToSeconds = new EvaluateExpression(this, \"Convert to seconds\", new EvaluateExpressionProps {\n    Expression = \"$.waitMilliseconds / 1000\",\n    ResultPath = \"$.waitSeconds\"\n});\n\nEvaluateExpression createMessage = new EvaluateExpression(this, \"Create message\", new EvaluateExpressionProps {\n    // Note: this is a string inside a string.\n    Expression = \"`Now waiting ${$.waitSeconds} seconds...`\",\n    Runtime = Runtime.NODEJS_14_X,\n    ResultPath = \"$.message\"\n});\n\nSnsPublish publishMessage = new SnsPublish(this, \"Publish message\", new SnsPublishProps {\n    Topic = new Topic(this, \"cool-topic\"),\n    Message = TaskInput.FromJsonPathAt(\"$.message\"),\n    ResultPath = \"$.sns\"\n});\n\nWait wait = new Wait(this, \"Wait\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = convertToSeconds.Next(createMessage).Next(publishMessage).Next(wait)\n});",
          "version": "1"
        },
        "java": {
          "source": "EvaluateExpression convertToSeconds = EvaluateExpression.Builder.create(this, \"Convert to seconds\")\n        .expression(\"$.waitMilliseconds / 1000\")\n        .resultPath(\"$.waitSeconds\")\n        .build();\n\nEvaluateExpression createMessage = EvaluateExpression.Builder.create(this, \"Create message\")\n        // Note: this is a string inside a string.\n        .expression(\"`Now waiting ${$.waitSeconds} seconds...`\")\n        .runtime(Runtime.NODEJS_14_X)\n        .resultPath(\"$.message\")\n        .build();\n\nSnsPublish publishMessage = SnsPublish.Builder.create(this, \"Publish message\")\n        .topic(new Topic(this, \"cool-topic\"))\n        .message(TaskInput.fromJsonPathAt(\"$.message\"))\n        .resultPath(\"$.sns\")\n        .build();\n\nWait wait = Wait.Builder.create(this, \"Wait\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(convertToSeconds.next(createMessage).next(publishMessage).next(wait))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "convertToSeconds := tasks.NewEvaluateExpression(this, jsii.String(\"Convert to seconds\"), &evaluateExpressionProps{\n\texpression: jsii.String(\"$.waitMilliseconds / 1000\"),\n\tresultPath: jsii.String(\"$.waitSeconds\"),\n})\n\ncreateMessage := tasks.NewEvaluateExpression(this, jsii.String(\"Create message\"), &evaluateExpressionProps{\n\t// Note: this is a string inside a string.\n\texpression: jsii.String(\"`Now waiting ${$.waitSeconds} seconds...`\"),\n\truntime: lambda.runtime_NODEJS_14_X(),\n\tresultPath: jsii.String(\"$.message\"),\n})\n\npublishMessage := tasks.NewSnsPublish(this, jsii.String(\"Publish message\"), &snsPublishProps{\n\ttopic: sns.NewTopic(this, jsii.String(\"cool-topic\")),\n\tmessage: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.message\")),\n\tresultPath: jsii.String(\"$.sns\"),\n})\n\nwait := sfn.NewWait(this, jsii.String(\"Wait\"), &waitProps{\n\ttime: sfn.waitTime.secondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &stateMachineProps{\n\tdefinition: convertToSeconds.next(createMessage).next(publishMessage).next(wait),\n})",
          "version": "1"
        },
        "$": {
          "source": "const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublish",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 42,
        "104": 6,
        "193": 5,
        "194": 15,
        "196": 5,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 10
      },
      "fqnsFingerprint": "4ed01fad2aee65313d791cb2f4478ef39c4a467c70593ae9b560df902f17337d"
    },
    "c19fd6418cae0af23797d3d29e5ea4f67ecc71ac186e7b1d57b1f41d05913276": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_name=\"EMR-Containers-Job\",\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        )\n    ),\n    application_config=[tasks.ApplicationConfiguration(\n        classification=tasks.Classification.SPARK_DEFAULTS,\n        properties={\n            \"spark.executor.instances\": \"1\",\n            \"spark.executor.memory\": \"512M\"\n        }\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobName = \"EMR-Containers-Job\",\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        }\n    },\n    ApplicationConfig = new [] { new ApplicationConfiguration {\n        Classification = Classification.SPARK_DEFAULTS,\n        Properties = new Dictionary<string, string> {\n            { \"spark.executor.instances\", \"1\" },\n            { \"spark.executor.memory\", \"512M\" }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobName(\"EMR-Containers-Job\")\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .build())\n                .build())\n        .applicationConfig(List.of(ApplicationConfiguration.builder()\n                .classification(Classification.SPARK_DEFAULTS)\n                .properties(Map.of(\n                        \"spark.executor.instances\", \"1\",\n                        \"spark.executor.memory\", \"512M\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobName: jsii.String(\"EMR-Containers-Job\"),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t},\n\t},\n\tapplicationConfig: []applicationConfiguration{\n\t\t&applicationConfiguration{\n\t\t\tclassification: tasks.classification_SPARK_DEFAULTS(),\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"spark.executor.instances\": jsii.String(\"1\"),\n\t\t\t\t\"spark.executor.memory\": jsii.String(\"512M\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.Classification",
        "@aws-cdk/aws-stepfunctions-tasks.Classification#SPARK_DEFAULTS",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 23,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 11
      },
      "fqnsFingerprint": "f326c63003a23b7bc92021d0409fcc199f142e6192e2f115710fd3ed22301c96"
    },
    "de3ff1147b4232750042b5373c6db50fc494087b09802aeaeb83f133275a7551": {
      "translations": {
        "python": {
          "source": "queue = sqs.Queue(self, \"Queue\")\n\n# Use a field from the execution data as message.\ntask1 = tasks.SqsSendMessage(self, \"Send1\",\n    queue=queue,\n    message_body=sfn.TaskInput.from_json_path_at(\"$.message\")\n)\n\n# Combine a field from the execution data with\n# a literal object.\ntask2 = tasks.SqsSendMessage(self, \"Send2\",\n    queue=queue,\n    message_body=sfn.TaskInput.from_object({\n        \"field1\": \"somedata\",\n        \"field2\": sfn.JsonPath.string_at(\"$.field2\")\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Queue queue = new Queue(this, \"Queue\");\n\n// Use a field from the execution data as message.\nSqsSendMessage task1 = new SqsSendMessage(this, \"Send1\", new SqsSendMessageProps {\n    Queue = queue,\n    MessageBody = TaskInput.FromJsonPathAt(\"$.message\")\n});\n\n// Combine a field from the execution data with\n// a literal object.\nSqsSendMessage task2 = new SqsSendMessage(this, \"Send2\", new SqsSendMessageProps {\n    Queue = queue,\n    MessageBody = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"field1\", \"somedata\" },\n        { \"field2\", JsonPath.StringAt(\"$.field2\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Queue queue = new Queue(this, \"Queue\");\n\n// Use a field from the execution data as message.\nSqsSendMessage task1 = SqsSendMessage.Builder.create(this, \"Send1\")\n        .queue(queue)\n        .messageBody(TaskInput.fromJsonPathAt(\"$.message\"))\n        .build();\n\n// Combine a field from the execution data with\n// a literal object.\nSqsSendMessage task2 = SqsSendMessage.Builder.create(this, \"Send2\")\n        .queue(queue)\n        .messageBody(TaskInput.fromObject(Map.of(\n                \"field1\", \"somedata\",\n                \"field2\", JsonPath.stringAt(\"$.field2\"))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "queue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\n// Use a field from the execution data as message.\ntask1 := tasks.NewSqsSendMessage(this, jsii.String(\"Send1\"), &sqsSendMessageProps{\n\tqueue: queue,\n\tmessageBody: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.message\")),\n})\n\n// Combine a field from the execution data with\n// a literal object.\ntask2 := tasks.NewSqsSendMessage(this, jsii.String(\"Send2\"), &sqsSendMessageProps{\n\tqueue: queue,\n\tmessageBody: sfn.*taskInput.fromObject(map[string]interface{}{\n\t\t\"field1\": jsii.String(\"somedata\"),\n\t\t\"field2\": sfn.JsonPath.stringAt(jsii.String(\"$.field2\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const queue = new sqs.Queue(this, 'Queue');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SqsSendMessage(this, 'Send1', {\n  queue,\n  messageBody: sfn.TaskInput.fromJsonPathAt('$.message'),\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SqsSendMessage(this, 'Send2', {\n  queue,\n  messageBody: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SqsSendMessage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-stepfunctions-tasks.SqsSendMessage",
        "@aws-cdk/aws-stepfunctions-tasks.SqsSendMessageProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst queue = new sqs.Queue(this, 'Queue');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SqsSendMessage(this, 'Send1', {\n  queue,\n  messageBody: sfn.TaskInput.fromJsonPathAt('$.message'),\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SqsSendMessage(this, 'Send2', {\n  queue,\n  messageBody: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 24,
        "104": 3,
        "193": 3,
        "194": 9,
        "196": 3,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 2
      },
      "fqnsFingerprint": "e526fb6f266c3dc84e3192708616cea057700b098051ef8c2619f94d33e99063"
    },
    "530a9aeb2e6c0e545ec1ad6cfd92b0f40f59b3ba19abe870485af2a2f1ef6060": {
      "translations": {
        "python": {
          "source": "queue = sqs.Queue(self, \"Queue\")\n\n# Use a field from the execution data as message.\ntask1 = tasks.SqsSendMessage(self, \"Send1\",\n    queue=queue,\n    message_body=sfn.TaskInput.from_json_path_at(\"$.message\")\n)\n\n# Combine a field from the execution data with\n# a literal object.\ntask2 = tasks.SqsSendMessage(self, \"Send2\",\n    queue=queue,\n    message_body=sfn.TaskInput.from_object({\n        \"field1\": \"somedata\",\n        \"field2\": sfn.JsonPath.string_at(\"$.field2\")\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Queue queue = new Queue(this, \"Queue\");\n\n// Use a field from the execution data as message.\nSqsSendMessage task1 = new SqsSendMessage(this, \"Send1\", new SqsSendMessageProps {\n    Queue = queue,\n    MessageBody = TaskInput.FromJsonPathAt(\"$.message\")\n});\n\n// Combine a field from the execution data with\n// a literal object.\nSqsSendMessage task2 = new SqsSendMessage(this, \"Send2\", new SqsSendMessageProps {\n    Queue = queue,\n    MessageBody = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"field1\", \"somedata\" },\n        { \"field2\", JsonPath.StringAt(\"$.field2\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Queue queue = new Queue(this, \"Queue\");\n\n// Use a field from the execution data as message.\nSqsSendMessage task1 = SqsSendMessage.Builder.create(this, \"Send1\")\n        .queue(queue)\n        .messageBody(TaskInput.fromJsonPathAt(\"$.message\"))\n        .build();\n\n// Combine a field from the execution data with\n// a literal object.\nSqsSendMessage task2 = SqsSendMessage.Builder.create(this, \"Send2\")\n        .queue(queue)\n        .messageBody(TaskInput.fromObject(Map.of(\n                \"field1\", \"somedata\",\n                \"field2\", JsonPath.stringAt(\"$.field2\"))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "queue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\n// Use a field from the execution data as message.\ntask1 := tasks.NewSqsSendMessage(this, jsii.String(\"Send1\"), &sqsSendMessageProps{\n\tqueue: queue,\n\tmessageBody: sfn.taskInput.fromJsonPathAt(jsii.String(\"$.message\")),\n})\n\n// Combine a field from the execution data with\n// a literal object.\ntask2 := tasks.NewSqsSendMessage(this, jsii.String(\"Send2\"), &sqsSendMessageProps{\n\tqueue: queue,\n\tmessageBody: sfn.*taskInput.fromObject(map[string]interface{}{\n\t\t\"field1\": jsii.String(\"somedata\"),\n\t\t\"field2\": sfn.JsonPath.stringAt(jsii.String(\"$.field2\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const queue = new sqs.Queue(this, 'Queue');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SqsSendMessage(this, 'Send1', {\n  queue,\n  messageBody: sfn.TaskInput.fromJsonPathAt('$.message'),\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SqsSendMessage(this, 'Send2', {\n  queue,\n  messageBody: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.SqsSendMessageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-stepfunctions-tasks.SqsSendMessage",
        "@aws-cdk/aws-stepfunctions-tasks.SqsSendMessageProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst queue = new sqs.Queue(this, 'Queue');\n\n// Use a field from the execution data as message.\nconst task1 = new tasks.SqsSendMessage(this, 'Send1', {\n  queue,\n  messageBody: sfn.TaskInput.fromJsonPathAt('$.message'),\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new tasks.SqsSendMessage(this, 'Send2', {\n  queue,\n  messageBody: sfn.TaskInput.fromObject({\n    field1: 'somedata',\n    field2: sfn.JsonPath.stringAt('$.field2'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 24,
        "104": 3,
        "193": 3,
        "194": 9,
        "196": 3,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 2
      },
      "fqnsFingerprint": "e526fb6f266c3dc84e3192708616cea057700b098051ef8c2619f94d33e99063"
    },
    "fe9468ecde9e51237f04f25033128275cfd2dc2d48854d8365abf6c4a3ff6b75": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# input: Any\n# state_machine: stepfunctions.StateMachine\n\nstart_execution = stepfunctions_tasks.StartExecution(state_machine,\n    input={\n        \"input_key\": input\n    },\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nvar input;\nStateMachine stateMachine;\n\nStartExecution startExecution = new StartExecution(stateMachine, new StartExecutionProps {\n    Input = new Dictionary<string, object> {\n        { \"inputKey\", input }\n    },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    Name = \"name\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nObject input;\nStateMachine stateMachine;\n\nStartExecution startExecution = StartExecution.Builder.create(stateMachine)\n        .input(Map.of(\n                \"inputKey\", input))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar input interface{}\nvar stateMachine stateMachine\nstartExecution := stepfunctions_tasks.NewStartExecution(stateMachine, &startExecutionProps{\n\tinput: map[string]interface{}{\n\t\t\"inputKey\": input,\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tname: jsii.String(\"name\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const input: any;\ndeclare const stateMachine: stepfunctions.StateMachine;\nconst startExecution = new stepfunctions_tasks.StartExecution(stateMachine, /* all optional props */ {\n  input: {\n    inputKey: input,\n  },\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  name: 'name',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.StartExecution"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.StartExecution",
        "@aws-cdk/aws-stepfunctions-tasks.StartExecutionProps",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const input: any;\ndeclare const stateMachine: stepfunctions.StateMachine;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst startExecution = new stepfunctions_tasks.StartExecution(stateMachine, /* all optional props */ {\n  input: {\n    inputKey: input,\n  },\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  name: 'name',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b8e200b8d58f236fcb9ef625806cae214f7520cad38c11b0b6c7e236f39a331d"
    },
    "fd0b13308e5d2b3125bf4679399e3a967de745dd3cfae44ece357173507e23d7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# input: Any\n\nstart_execution_props = stepfunctions_tasks.StartExecutionProps(\n    input={\n        \"input_key\": input\n    },\n    integration_pattern=stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nvar input;\n\nStartExecutionProps startExecutionProps = new StartExecutionProps {\n    Input = new Dictionary<string, object> {\n        { \"inputKey\", input }\n    },\n    IntegrationPattern = ServiceIntegrationPattern.FIRE_AND_FORGET,\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nObject input;\n\nStartExecutionProps startExecutionProps = StartExecutionProps.builder()\n        .input(Map.of(\n                \"inputKey\", input))\n        .integrationPattern(ServiceIntegrationPattern.FIRE_AND_FORGET)\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar input interface{}\nstartExecutionProps := &startExecutionProps{\n\tinput: map[string]interface{}{\n\t\t\"inputKey\": input,\n\t},\n\tintegrationPattern: stepfunctions.serviceIntegrationPattern_FIRE_AND_FORGET,\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const input: any;\nconst startExecutionProps: stepfunctions_tasks.StartExecutionProps = {\n  input: {\n    inputKey: input,\n  },\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.StartExecutionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.StartExecutionProps",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
        "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern#FIRE_AND_FORGET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const input: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst startExecutionProps: stepfunctions_tasks.StartExecutionProps = {\n  input: {\n    inputKey: input,\n  },\n  integrationPattern: stepfunctions.ServiceIntegrationPattern.FIRE_AND_FORGET,\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8c30685f22e7f351944fa166347d0354e5586fdfdf8db5ac32e05313e144dd8f"
    },
    "c1ad04bfbd70fd09e2ca8015036248961262e7773e3dc622307f2bace39cfed4": {
      "translations": {
        "python": {
          "source": "submit_job_activity = sfn.Activity(self, \"SubmitJob\")\n\ntasks.StepFunctionsInvokeActivity(self, \"Submit Job\",\n    activity=submit_job_activity\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Activity submitJobActivity = new Activity(this, \"SubmitJob\");\n\nnew StepFunctionsInvokeActivity(this, \"Submit Job\", new StepFunctionsInvokeActivityProps {\n    Activity = submitJobActivity\n});",
          "version": "1"
        },
        "java": {
          "source": "Activity submitJobActivity = new Activity(this, \"SubmitJob\");\n\nStepFunctionsInvokeActivity.Builder.create(this, \"Submit Job\")\n        .activity(submitJobActivity)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "submitJobActivity := sfn.NewActivity(this, jsii.String(\"SubmitJob\"))\n\ntasks.NewStepFunctionsInvokeActivity(this, jsii.String(\"Submit Job\"), &stepFunctionsInvokeActivityProps{\n\tactivity: submitJobActivity,\n})",
          "version": "1"
        },
        "$": {
          "source": "const submitJobActivity = new sfn.Activity(this, 'SubmitJob');\n\nnew tasks.StepFunctionsInvokeActivity(this, 'Submit Job', {\n  activity: submitJobActivity,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsInvokeActivity"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsInvokeActivity",
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsInvokeActivityProps",
        "@aws-cdk/aws-stepfunctions.Activity",
        "@aws-cdk/aws-stepfunctions.IActivity",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst submitJobActivity = new sfn.Activity(this, 'SubmitJob');\n\nnew tasks.StepFunctionsInvokeActivity(this, 'Submit Job', {\n  activity: submitJobActivity,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "41e6d5f4c35795bf6b506a252089e04606d32259ec2884561b5e35bd55a9c86e"
    },
    "27d3432582f3322afff8373c6c743d468480b480bb648e6d857d0d78da443606": {
      "translations": {
        "python": {
          "source": "submit_job_activity = sfn.Activity(self, \"SubmitJob\")\n\ntasks.StepFunctionsInvokeActivity(self, \"Submit Job\",\n    activity=submit_job_activity\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Activity submitJobActivity = new Activity(this, \"SubmitJob\");\n\nnew StepFunctionsInvokeActivity(this, \"Submit Job\", new StepFunctionsInvokeActivityProps {\n    Activity = submitJobActivity\n});",
          "version": "1"
        },
        "java": {
          "source": "Activity submitJobActivity = new Activity(this, \"SubmitJob\");\n\nStepFunctionsInvokeActivity.Builder.create(this, \"Submit Job\")\n        .activity(submitJobActivity)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "submitJobActivity := sfn.NewActivity(this, jsii.String(\"SubmitJob\"))\n\ntasks.NewStepFunctionsInvokeActivity(this, jsii.String(\"Submit Job\"), &stepFunctionsInvokeActivityProps{\n\tactivity: submitJobActivity,\n})",
          "version": "1"
        },
        "$": {
          "source": "const submitJobActivity = new sfn.Activity(this, 'SubmitJob');\n\nnew tasks.StepFunctionsInvokeActivity(this, 'Submit Job', {\n  activity: submitJobActivity,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsInvokeActivityProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsInvokeActivity",
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsInvokeActivityProps",
        "@aws-cdk/aws-stepfunctions.Activity",
        "@aws-cdk/aws-stepfunctions.IActivity",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst submitJobActivity = new sfn.Activity(this, 'SubmitJob');\n\nnew tasks.StepFunctionsInvokeActivity(this, 'Submit Job', {\n  activity: submitJobActivity,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "41e6d5f4c35795bf6b506a252089e04606d32259ec2884561b5e35bd55a9c86e"
    },
    "4b292bafa7cb539b09e208e6e1a21f106f1ec955a1597ef8c5837b4ac9d53636": {
      "translations": {
        "python": {
          "source": "# Define a state machine with one Pass state\nchild = sfn.StateMachine(self, \"ChildStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"PassState\"))\n)\n\n# Include the state machine in a Task state with callback pattern\ntask = tasks.StepFunctionsStartExecution(self, \"ChildTask\",\n    state_machine=child,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    input=sfn.TaskInput.from_object({\n        \"token\": sfn.JsonPath.task_token,\n        \"foo\": \"bar\"\n    }),\n    name=\"MyExecutionName\"\n)\n\n# Define a second state machine with the Task state above\nsfn.StateMachine(self, \"ParentStateMachine\",\n    definition=task\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Define a state machine with one Pass state\nStateMachine child = new StateMachine(this, \"ChildStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"PassState\"))\n});\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = new StepFunctionsStartExecution(this, \"ChildTask\", new StepFunctionsStartExecutionProps {\n    StateMachine = child,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Input = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"token\", JsonPath.TaskToken },\n        { \"foo\", \"bar\" }\n    }),\n    Name = \"MyExecutionName\"\n});\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nnew StateMachine(this, \"ParentStateMachine\", new StateMachineProps {\n    Definition = task\n});",
          "version": "1"
        },
        "java": {
          "source": "// Define a state machine with one Pass state\nStateMachine child = StateMachine.Builder.create(this, \"ChildStateMachine\")\n        .definition(Chain.start(new Pass(this, \"PassState\")))\n        .build();\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = StepFunctionsStartExecution.Builder.create(this, \"ChildTask\")\n        .stateMachine(child)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .input(TaskInput.fromObject(Map.of(\n                \"token\", JsonPath.getTaskToken(),\n                \"foo\", \"bar\")))\n        .name(\"MyExecutionName\")\n        .build();\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nStateMachine.Builder.create(this, \"ParentStateMachine\")\n        .definition(task)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Define a state machine with one Pass state\nchild := sfn.NewStateMachine(this, jsii.String(\"ChildStateMachine\"), &stateMachineProps{\n\tdefinition: sfn.chain.start(sfn.NewPass(this, jsii.String(\"PassState\"))),\n})\n\n// Include the state machine in a Task state with callback pattern\ntask := tasks.NewStepFunctionsStartExecution(this, jsii.String(\"ChildTask\"), &stepFunctionsStartExecutionProps{\n\tstateMachine: child,\n\tintegrationPattern: sfn.integrationPattern_WAIT_FOR_TASK_TOKEN,\n\tinput: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"token\": sfn.JsonPath.taskToken,\n\t\t\"foo\": jsii.String(\"bar\"),\n\t}),\n\tname: jsii.String(\"MyExecutionName\"),\n})\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nsfn.NewStateMachine(this, jsii.String(\"ParentStateMachine\"), &stateMachineProps{\n\tdefinition: task,\n})",
          "version": "1"
        },
        "$": {
          "source": "// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecution"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecution",
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecutionProps",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 32,
        "104": 4,
        "193": 4,
        "194": 12,
        "196": 2,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "61eb42c592cb642cc8e058db2cd663e1685d0fe3207a62baaae7f4f7fb4a0833"
    },
    "14a6147742c3efba6a0a9b8980aba637dc5b7d3bdb4cf0c6f8000cd1f7c0f01f": {
      "translations": {
        "python": {
          "source": "# Define a state machine with one Pass state\nchild = sfn.StateMachine(self, \"ChildStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"PassState\"))\n)\n\n# Include the state machine in a Task state with callback pattern\ntask = tasks.StepFunctionsStartExecution(self, \"ChildTask\",\n    state_machine=child,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    input=sfn.TaskInput.from_object({\n        \"token\": sfn.JsonPath.task_token,\n        \"foo\": \"bar\"\n    }),\n    name=\"MyExecutionName\"\n)\n\n# Define a second state machine with the Task state above\nsfn.StateMachine(self, \"ParentStateMachine\",\n    definition=task\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Define a state machine with one Pass state\nStateMachine child = new StateMachine(this, \"ChildStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"PassState\"))\n});\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = new StepFunctionsStartExecution(this, \"ChildTask\", new StepFunctionsStartExecutionProps {\n    StateMachine = child,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Input = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"token\", JsonPath.TaskToken },\n        { \"foo\", \"bar\" }\n    }),\n    Name = \"MyExecutionName\"\n});\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nnew StateMachine(this, \"ParentStateMachine\", new StateMachineProps {\n    Definition = task\n});",
          "version": "1"
        },
        "java": {
          "source": "// Define a state machine with one Pass state\nStateMachine child = StateMachine.Builder.create(this, \"ChildStateMachine\")\n        .definition(Chain.start(new Pass(this, \"PassState\")))\n        .build();\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = StepFunctionsStartExecution.Builder.create(this, \"ChildTask\")\n        .stateMachine(child)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .input(TaskInput.fromObject(Map.of(\n                \"token\", JsonPath.getTaskToken(),\n                \"foo\", \"bar\")))\n        .name(\"MyExecutionName\")\n        .build();\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nStateMachine.Builder.create(this, \"ParentStateMachine\")\n        .definition(task)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Define a state machine with one Pass state\nchild := sfn.NewStateMachine(this, jsii.String(\"ChildStateMachine\"), &stateMachineProps{\n\tdefinition: sfn.chain.start(sfn.NewPass(this, jsii.String(\"PassState\"))),\n})\n\n// Include the state machine in a Task state with callback pattern\ntask := tasks.NewStepFunctionsStartExecution(this, jsii.String(\"ChildTask\"), &stepFunctionsStartExecutionProps{\n\tstateMachine: child,\n\tintegrationPattern: sfn.integrationPattern_WAIT_FOR_TASK_TOKEN,\n\tinput: sfn.taskInput.fromObject(map[string]interface{}{\n\t\t\"token\": sfn.JsonPath.taskToken,\n\t\t\"foo\": jsii.String(\"bar\"),\n\t}),\n\tname: jsii.String(\"MyExecutionName\"),\n})\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nsfn.NewStateMachine(this, jsii.String(\"ParentStateMachine\"), &stateMachineProps{\n\tdefinition: task,\n})",
          "version": "1"
        },
        "$": {
          "source": "// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecutionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecution",
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecutionProps",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 32,
        "104": 4,
        "193": 4,
        "194": 12,
        "196": 2,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "61eb42c592cb642cc8e058db2cd663e1685d0fe3207a62baaae7f4f7fb4a0833"
    },
    "25f5f7c2f12479d5cd289382925c12960dadc8ef4a9c70b20a753411aa9e9e9a": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTrainingJob(this, jsii.String(\"TrainSagemaker\"), &sageMakerCreateTrainingJobProps{\n\ttrainingJobName: sfn.jsonPath.stringAt(jsii.String(\"$.JobName\")),\n\talgorithmSpecification: &algorithmSpecification{\n\t\talgorithmName: jsii.String(\"BlazingText\"),\n\t\ttrainingInputMode: tasks.inputMode_FILE,\n\t},\n\tinputDataConfig: []channel{\n\t\t&channel{\n\t\t\tchannelName: jsii.String(\"train\"),\n\t\t\tdataSource: &dataSource{\n\t\t\t\ts3DataSource: &s3DataSource{\n\t\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t\t\ts3Location: tasks.s3Location.fromJsonExpression(jsii.String(\"$.S3Bucket\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\toutputDataConfig: &outputDataConfig{\n\t\ts3OutputLocation: tasks.*s3Location.fromBucket(s3.bucket.fromBucketName(this, jsii.String(\"Bucket\"), jsii.String(\"mybucket\")), jsii.String(\"myoutputpath\")),\n\t},\n\tresourceConfig: &resourceConfig{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.NewInstanceType(sfn.*jsonPath.stringAt(jsii.String(\"$.InstanceType\"))),\n\t\tvolumeSize: size.gibibytes(jsii.Number(50)),\n\t},\n\t // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n\tstoppingCondition: &stoppingCondition{\n\t\tmaxRuntime: duration.hours(jsii.Number(2)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "53ad1371833b8bf1e4f3c7de12365440b065381773f4f7c091e9a46b3b35a32f"
    },
    "ea7ac6d912cd3df076b4e22d8bd71ee47c710ecaea28252b0448600f4c579841": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\ntask_environment_variable = stepfunctions_tasks.TaskEnvironmentVariable(\n    name=\"name\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nTaskEnvironmentVariable taskEnvironmentVariable = new TaskEnvironmentVariable {\n    Name = \"name\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nTaskEnvironmentVariable taskEnvironmentVariable = TaskEnvironmentVariable.builder()\n        .name(\"name\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\ntaskEnvironmentVariable := &taskEnvironmentVariable{\n\tname: jsii.String(\"name\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\nconst taskEnvironmentVariable: stepfunctions_tasks.TaskEnvironmentVariable = {\n  name: 'name',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.TaskEnvironmentVariable"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.TaskEnvironmentVariable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst taskEnvironmentVariable: stepfunctions_tasks.TaskEnvironmentVariable = {\n  name: 'name',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "dbe91df97aa6cc1524bf4ead2a7865a756ee3ba1fb9dea07ce46efdc27229350"
    },
    "0ab9f1635f81283b94a01530311f4bd03c1fd88067dde7c90393c2e8f675a6b9": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTransformJob(self, \"Batch Inference\",\n    transform_job_name=\"MyTransformJob\",\n    model_name=\"MyModelName\",\n    model_client_options=tasks.ModelClientOptions(\n        invocations_max_retries=3,  # default is 0\n        invocations_timeout=Duration.minutes(5)\n    ),\n    transform_input=tasks.TransformInput(\n        transform_data_source=tasks.TransformDataSource(\n            s3_data_source=tasks.TransformS3DataSource(\n                s3_uri=\"s3://inputbucket/train\",\n                s3_data_type=tasks.S3DataType.S3_PREFIX\n            )\n        )\n    ),\n    transform_output=tasks.TransformOutput(\n        s3_output_path=\"s3://outputbucket/TransformJobOutputPath\"\n    ),\n    transform_resources=tasks.TransformResources(\n        instance_count=1,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTransformJob(this, \"Batch Inference\", new SageMakerCreateTransformJobProps {\n    TransformJobName = \"MyTransformJob\",\n    ModelName = \"MyModelName\",\n    ModelClientOptions = new ModelClientOptions {\n        InvocationsMaxRetries = 3,  // default is 0\n        InvocationsTimeout = Duration.Minutes(5)\n    },\n    TransformInput = new TransformInput {\n        TransformDataSource = new TransformDataSource {\n            S3DataSource = new TransformS3DataSource {\n                S3Uri = \"s3://inputbucket/train\",\n                S3DataType = S3DataType.S3_PREFIX\n            }\n        }\n    },\n    TransformOutput = new TransformOutput {\n        S3OutputPath = \"s3://outputbucket/TransformJobOutputPath\"\n    },\n    TransformResources = new TransformResources {\n        InstanceCount = 1,\n        InstanceType = InstanceType.Of(InstanceClass.M4, InstanceSize.XLARGE)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTransformJob.Builder.create(this, \"Batch Inference\")\n        .transformJobName(\"MyTransformJob\")\n        .modelName(\"MyModelName\")\n        .modelClientOptions(ModelClientOptions.builder()\n                .invocationsMaxRetries(3) // default is 0\n                .invocationsTimeout(Duration.minutes(5))\n                .build())\n        .transformInput(TransformInput.builder()\n                .transformDataSource(TransformDataSource.builder()\n                        .s3DataSource(TransformS3DataSource.builder()\n                                .s3Uri(\"s3://inputbucket/train\")\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .build())\n                        .build())\n                .build())\n        .transformOutput(TransformOutput.builder()\n                .s3OutputPath(\"s3://outputbucket/TransformJobOutputPath\")\n                .build())\n        .transformResources(TransformResources.builder()\n                .instanceCount(1)\n                .instanceType(InstanceType.of(InstanceClass.M4, InstanceSize.XLARGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTransformJob(this, jsii.String(\"Batch Inference\"), &sageMakerCreateTransformJobProps{\n\ttransformJobName: jsii.String(\"MyTransformJob\"),\n\tmodelName: jsii.String(\"MyModelName\"),\n\tmodelClientOptions: &modelClientOptions{\n\t\tinvocationsMaxRetries: jsii.Number(3),\n\t\t // default is 0\n\t\tinvocationsTimeout: duration.minutes(jsii.Number(5)),\n\t},\n\ttransformInput: &transformInput{\n\t\ttransformDataSource: &transformDataSource{\n\t\t\ts3DataSource: &transformS3DataSource{\n\t\t\t\ts3Uri: jsii.String(\"s3://inputbucket/train\"),\n\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t},\n\t\t},\n\t},\n\ttransformOutput: &transformOutput{\n\t\ts3OutputPath: jsii.String(\"s3://outputbucket/TransformJobOutputPath\"),\n\t},\n\ttransformResources: &transformResources{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M4, ec2.instanceSize_XLARGE),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.TransformDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M4",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.ModelClientOptions",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.TransformDataSource",
        "@aws-cdk/aws-stepfunctions-tasks.TransformInput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformOutput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformResources",
        "@aws-cdk/aws-stepfunctions-tasks.TransformS3DataSource",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 31,
        "104": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 15
      },
      "fqnsFingerprint": "fd299dab2d91364d338c465c76cc2f657ae1e29ff838db159e29f333974ba0fb"
    },
    "d84675d8fee1b3a94ddc56c9200f5250248bef0b51e11b61d496e5f03b53cec6": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTransformJob(self, \"Batch Inference\",\n    transform_job_name=\"MyTransformJob\",\n    model_name=\"MyModelName\",\n    model_client_options=tasks.ModelClientOptions(\n        invocations_max_retries=3,  # default is 0\n        invocations_timeout=Duration.minutes(5)\n    ),\n    transform_input=tasks.TransformInput(\n        transform_data_source=tasks.TransformDataSource(\n            s3_data_source=tasks.TransformS3DataSource(\n                s3_uri=\"s3://inputbucket/train\",\n                s3_data_type=tasks.S3DataType.S3_PREFIX\n            )\n        )\n    ),\n    transform_output=tasks.TransformOutput(\n        s3_output_path=\"s3://outputbucket/TransformJobOutputPath\"\n    ),\n    transform_resources=tasks.TransformResources(\n        instance_count=1,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTransformJob(this, \"Batch Inference\", new SageMakerCreateTransformJobProps {\n    TransformJobName = \"MyTransformJob\",\n    ModelName = \"MyModelName\",\n    ModelClientOptions = new ModelClientOptions {\n        InvocationsMaxRetries = 3,  // default is 0\n        InvocationsTimeout = Duration.Minutes(5)\n    },\n    TransformInput = new TransformInput {\n        TransformDataSource = new TransformDataSource {\n            S3DataSource = new TransformS3DataSource {\n                S3Uri = \"s3://inputbucket/train\",\n                S3DataType = S3DataType.S3_PREFIX\n            }\n        }\n    },\n    TransformOutput = new TransformOutput {\n        S3OutputPath = \"s3://outputbucket/TransformJobOutputPath\"\n    },\n    TransformResources = new TransformResources {\n        InstanceCount = 1,\n        InstanceType = InstanceType.Of(InstanceClass.M4, InstanceSize.XLARGE)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTransformJob.Builder.create(this, \"Batch Inference\")\n        .transformJobName(\"MyTransformJob\")\n        .modelName(\"MyModelName\")\n        .modelClientOptions(ModelClientOptions.builder()\n                .invocationsMaxRetries(3) // default is 0\n                .invocationsTimeout(Duration.minutes(5))\n                .build())\n        .transformInput(TransformInput.builder()\n                .transformDataSource(TransformDataSource.builder()\n                        .s3DataSource(TransformS3DataSource.builder()\n                                .s3Uri(\"s3://inputbucket/train\")\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .build())\n                        .build())\n                .build())\n        .transformOutput(TransformOutput.builder()\n                .s3OutputPath(\"s3://outputbucket/TransformJobOutputPath\")\n                .build())\n        .transformResources(TransformResources.builder()\n                .instanceCount(1)\n                .instanceType(InstanceType.of(InstanceClass.M4, InstanceSize.XLARGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTransformJob(this, jsii.String(\"Batch Inference\"), &sageMakerCreateTransformJobProps{\n\ttransformJobName: jsii.String(\"MyTransformJob\"),\n\tmodelName: jsii.String(\"MyModelName\"),\n\tmodelClientOptions: &modelClientOptions{\n\t\tinvocationsMaxRetries: jsii.Number(3),\n\t\t // default is 0\n\t\tinvocationsTimeout: duration.minutes(jsii.Number(5)),\n\t},\n\ttransformInput: &transformInput{\n\t\ttransformDataSource: &transformDataSource{\n\t\t\ts3DataSource: &transformS3DataSource{\n\t\t\t\ts3Uri: jsii.String(\"s3://inputbucket/train\"),\n\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t},\n\t\t},\n\t},\n\ttransformOutput: &transformOutput{\n\t\ts3OutputPath: jsii.String(\"s3://outputbucket/TransformJobOutputPath\"),\n\t},\n\ttransformResources: &transformResources{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M4, ec2.instanceSize_XLARGE),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.TransformInput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M4",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.ModelClientOptions",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.TransformDataSource",
        "@aws-cdk/aws-stepfunctions-tasks.TransformInput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformOutput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformResources",
        "@aws-cdk/aws-stepfunctions-tasks.TransformS3DataSource",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 31,
        "104": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 15
      },
      "fqnsFingerprint": "fd299dab2d91364d338c465c76cc2f657ae1e29ff838db159e29f333974ba0fb"
    },
    "2c68e6ee63d03b3692ceaf22fe30959e53517668ae1ee8c22c3f96501cbca726": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTransformJob(self, \"Batch Inference\",\n    transform_job_name=\"MyTransformJob\",\n    model_name=\"MyModelName\",\n    model_client_options=tasks.ModelClientOptions(\n        invocations_max_retries=3,  # default is 0\n        invocations_timeout=Duration.minutes(5)\n    ),\n    transform_input=tasks.TransformInput(\n        transform_data_source=tasks.TransformDataSource(\n            s3_data_source=tasks.TransformS3DataSource(\n                s3_uri=\"s3://inputbucket/train\",\n                s3_data_type=tasks.S3DataType.S3_PREFIX\n            )\n        )\n    ),\n    transform_output=tasks.TransformOutput(\n        s3_output_path=\"s3://outputbucket/TransformJobOutputPath\"\n    ),\n    transform_resources=tasks.TransformResources(\n        instance_count=1,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTransformJob(this, \"Batch Inference\", new SageMakerCreateTransformJobProps {\n    TransformJobName = \"MyTransformJob\",\n    ModelName = \"MyModelName\",\n    ModelClientOptions = new ModelClientOptions {\n        InvocationsMaxRetries = 3,  // default is 0\n        InvocationsTimeout = Duration.Minutes(5)\n    },\n    TransformInput = new TransformInput {\n        TransformDataSource = new TransformDataSource {\n            S3DataSource = new TransformS3DataSource {\n                S3Uri = \"s3://inputbucket/train\",\n                S3DataType = S3DataType.S3_PREFIX\n            }\n        }\n    },\n    TransformOutput = new TransformOutput {\n        S3OutputPath = \"s3://outputbucket/TransformJobOutputPath\"\n    },\n    TransformResources = new TransformResources {\n        InstanceCount = 1,\n        InstanceType = InstanceType.Of(InstanceClass.M4, InstanceSize.XLARGE)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTransformJob.Builder.create(this, \"Batch Inference\")\n        .transformJobName(\"MyTransformJob\")\n        .modelName(\"MyModelName\")\n        .modelClientOptions(ModelClientOptions.builder()\n                .invocationsMaxRetries(3) // default is 0\n                .invocationsTimeout(Duration.minutes(5))\n                .build())\n        .transformInput(TransformInput.builder()\n                .transformDataSource(TransformDataSource.builder()\n                        .s3DataSource(TransformS3DataSource.builder()\n                                .s3Uri(\"s3://inputbucket/train\")\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .build())\n                        .build())\n                .build())\n        .transformOutput(TransformOutput.builder()\n                .s3OutputPath(\"s3://outputbucket/TransformJobOutputPath\")\n                .build())\n        .transformResources(TransformResources.builder()\n                .instanceCount(1)\n                .instanceType(InstanceType.of(InstanceClass.M4, InstanceSize.XLARGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTransformJob(this, jsii.String(\"Batch Inference\"), &sageMakerCreateTransformJobProps{\n\ttransformJobName: jsii.String(\"MyTransformJob\"),\n\tmodelName: jsii.String(\"MyModelName\"),\n\tmodelClientOptions: &modelClientOptions{\n\t\tinvocationsMaxRetries: jsii.Number(3),\n\t\t // default is 0\n\t\tinvocationsTimeout: duration.minutes(jsii.Number(5)),\n\t},\n\ttransformInput: &transformInput{\n\t\ttransformDataSource: &transformDataSource{\n\t\t\ts3DataSource: &transformS3DataSource{\n\t\t\t\ts3Uri: jsii.String(\"s3://inputbucket/train\"),\n\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t},\n\t\t},\n\t},\n\ttransformOutput: &transformOutput{\n\t\ts3OutputPath: jsii.String(\"s3://outputbucket/TransformJobOutputPath\"),\n\t},\n\ttransformResources: &transformResources{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M4, ec2.instanceSize_XLARGE),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.TransformOutput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M4",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.ModelClientOptions",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.TransformDataSource",
        "@aws-cdk/aws-stepfunctions-tasks.TransformInput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformOutput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformResources",
        "@aws-cdk/aws-stepfunctions-tasks.TransformS3DataSource",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 31,
        "104": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 15
      },
      "fqnsFingerprint": "fd299dab2d91364d338c465c76cc2f657ae1e29ff838db159e29f333974ba0fb"
    },
    "8e61dbca277f20067fda6e8091aa9b83beca6be4220e566e01b87a5cc3114c27": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTransformJob(self, \"Batch Inference\",\n    transform_job_name=\"MyTransformJob\",\n    model_name=\"MyModelName\",\n    model_client_options=tasks.ModelClientOptions(\n        invocations_max_retries=3,  # default is 0\n        invocations_timeout=Duration.minutes(5)\n    ),\n    transform_input=tasks.TransformInput(\n        transform_data_source=tasks.TransformDataSource(\n            s3_data_source=tasks.TransformS3DataSource(\n                s3_uri=\"s3://inputbucket/train\",\n                s3_data_type=tasks.S3DataType.S3_PREFIX\n            )\n        )\n    ),\n    transform_output=tasks.TransformOutput(\n        s3_output_path=\"s3://outputbucket/TransformJobOutputPath\"\n    ),\n    transform_resources=tasks.TransformResources(\n        instance_count=1,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTransformJob(this, \"Batch Inference\", new SageMakerCreateTransformJobProps {\n    TransformJobName = \"MyTransformJob\",\n    ModelName = \"MyModelName\",\n    ModelClientOptions = new ModelClientOptions {\n        InvocationsMaxRetries = 3,  // default is 0\n        InvocationsTimeout = Duration.Minutes(5)\n    },\n    TransformInput = new TransformInput {\n        TransformDataSource = new TransformDataSource {\n            S3DataSource = new TransformS3DataSource {\n                S3Uri = \"s3://inputbucket/train\",\n                S3DataType = S3DataType.S3_PREFIX\n            }\n        }\n    },\n    TransformOutput = new TransformOutput {\n        S3OutputPath = \"s3://outputbucket/TransformJobOutputPath\"\n    },\n    TransformResources = new TransformResources {\n        InstanceCount = 1,\n        InstanceType = InstanceType.Of(InstanceClass.M4, InstanceSize.XLARGE)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTransformJob.Builder.create(this, \"Batch Inference\")\n        .transformJobName(\"MyTransformJob\")\n        .modelName(\"MyModelName\")\n        .modelClientOptions(ModelClientOptions.builder()\n                .invocationsMaxRetries(3) // default is 0\n                .invocationsTimeout(Duration.minutes(5))\n                .build())\n        .transformInput(TransformInput.builder()\n                .transformDataSource(TransformDataSource.builder()\n                        .s3DataSource(TransformS3DataSource.builder()\n                                .s3Uri(\"s3://inputbucket/train\")\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .build())\n                        .build())\n                .build())\n        .transformOutput(TransformOutput.builder()\n                .s3OutputPath(\"s3://outputbucket/TransformJobOutputPath\")\n                .build())\n        .transformResources(TransformResources.builder()\n                .instanceCount(1)\n                .instanceType(InstanceType.of(InstanceClass.M4, InstanceSize.XLARGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTransformJob(this, jsii.String(\"Batch Inference\"), &sageMakerCreateTransformJobProps{\n\ttransformJobName: jsii.String(\"MyTransformJob\"),\n\tmodelName: jsii.String(\"MyModelName\"),\n\tmodelClientOptions: &modelClientOptions{\n\t\tinvocationsMaxRetries: jsii.Number(3),\n\t\t // default is 0\n\t\tinvocationsTimeout: duration.minutes(jsii.Number(5)),\n\t},\n\ttransformInput: &transformInput{\n\t\ttransformDataSource: &transformDataSource{\n\t\t\ts3DataSource: &transformS3DataSource{\n\t\t\t\ts3Uri: jsii.String(\"s3://inputbucket/train\"),\n\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t},\n\t\t},\n\t},\n\ttransformOutput: &transformOutput{\n\t\ts3OutputPath: jsii.String(\"s3://outputbucket/TransformJobOutputPath\"),\n\t},\n\ttransformResources: &transformResources{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M4, ec2.instanceSize_XLARGE),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.TransformResources"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M4",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.ModelClientOptions",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.TransformDataSource",
        "@aws-cdk/aws-stepfunctions-tasks.TransformInput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformOutput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformResources",
        "@aws-cdk/aws-stepfunctions-tasks.TransformS3DataSource",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 31,
        "104": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 15
      },
      "fqnsFingerprint": "fd299dab2d91364d338c465c76cc2f657ae1e29ff838db159e29f333974ba0fb"
    },
    "59b861b52359f947cbcf16bc034a01920e6e6a1c2f5e7602719eb8d0ef0bae5f": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTransformJob(self, \"Batch Inference\",\n    transform_job_name=\"MyTransformJob\",\n    model_name=\"MyModelName\",\n    model_client_options=tasks.ModelClientOptions(\n        invocations_max_retries=3,  # default is 0\n        invocations_timeout=Duration.minutes(5)\n    ),\n    transform_input=tasks.TransformInput(\n        transform_data_source=tasks.TransformDataSource(\n            s3_data_source=tasks.TransformS3DataSource(\n                s3_uri=\"s3://inputbucket/train\",\n                s3_data_type=tasks.S3DataType.S3_PREFIX\n            )\n        )\n    ),\n    transform_output=tasks.TransformOutput(\n        s3_output_path=\"s3://outputbucket/TransformJobOutputPath\"\n    ),\n    transform_resources=tasks.TransformResources(\n        instance_count=1,\n        instance_type=ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new SageMakerCreateTransformJob(this, \"Batch Inference\", new SageMakerCreateTransformJobProps {\n    TransformJobName = \"MyTransformJob\",\n    ModelName = \"MyModelName\",\n    ModelClientOptions = new ModelClientOptions {\n        InvocationsMaxRetries = 3,  // default is 0\n        InvocationsTimeout = Duration.Minutes(5)\n    },\n    TransformInput = new TransformInput {\n        TransformDataSource = new TransformDataSource {\n            S3DataSource = new TransformS3DataSource {\n                S3Uri = \"s3://inputbucket/train\",\n                S3DataType = S3DataType.S3_PREFIX\n            }\n        }\n    },\n    TransformOutput = new TransformOutput {\n        S3OutputPath = \"s3://outputbucket/TransformJobOutputPath\"\n    },\n    TransformResources = new TransformResources {\n        InstanceCount = 1,\n        InstanceType = InstanceType.Of(InstanceClass.M4, InstanceSize.XLARGE)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTransformJob.Builder.create(this, \"Batch Inference\")\n        .transformJobName(\"MyTransformJob\")\n        .modelName(\"MyModelName\")\n        .modelClientOptions(ModelClientOptions.builder()\n                .invocationsMaxRetries(3) // default is 0\n                .invocationsTimeout(Duration.minutes(5))\n                .build())\n        .transformInput(TransformInput.builder()\n                .transformDataSource(TransformDataSource.builder()\n                        .s3DataSource(TransformS3DataSource.builder()\n                                .s3Uri(\"s3://inputbucket/train\")\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .build())\n                        .build())\n                .build())\n        .transformOutput(TransformOutput.builder()\n                .s3OutputPath(\"s3://outputbucket/TransformJobOutputPath\")\n                .build())\n        .transformResources(TransformResources.builder()\n                .instanceCount(1)\n                .instanceType(InstanceType.of(InstanceClass.M4, InstanceSize.XLARGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewSageMakerCreateTransformJob(this, jsii.String(\"Batch Inference\"), &sageMakerCreateTransformJobProps{\n\ttransformJobName: jsii.String(\"MyTransformJob\"),\n\tmodelName: jsii.String(\"MyModelName\"),\n\tmodelClientOptions: &modelClientOptions{\n\t\tinvocationsMaxRetries: jsii.Number(3),\n\t\t // default is 0\n\t\tinvocationsTimeout: duration.minutes(jsii.Number(5)),\n\t},\n\ttransformInput: &transformInput{\n\t\ttransformDataSource: &transformDataSource{\n\t\t\ts3DataSource: &transformS3DataSource{\n\t\t\t\ts3Uri: jsii.String(\"s3://inputbucket/train\"),\n\t\t\t\ts3DataType: tasks.s3DataType_S3_PREFIX,\n\t\t\t},\n\t\t},\n\t},\n\ttransformOutput: &transformOutput{\n\t\ts3OutputPath: jsii.String(\"s3://outputbucket/TransformJobOutputPath\"),\n\t},\n\ttransformResources: &transformResources{\n\t\tinstanceCount: jsii.Number(1),\n\t\tinstanceType: ec2.instanceType.of(ec2.instanceClass_M4, ec2.instanceSize_XLARGE),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.TransformS3DataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M4",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#XLARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-stepfunctions-tasks.ModelClientOptions",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTransformJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.TransformDataSource",
        "@aws-cdk/aws-stepfunctions-tasks.TransformInput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformOutput",
        "@aws-cdk/aws-stepfunctions-tasks.TransformResources",
        "@aws-cdk/aws-stepfunctions-tasks.TransformS3DataSource",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTransformJob(this, 'Batch Inference', {\n  transformJobName: 'MyTransformJob',\n  modelName: 'MyModelName',\n  modelClientOptions: {\n    invocationsMaxRetries: 3,  // default is 0\n    invocationsTimeout: Duration.minutes(5),  // default is 60 seconds\n  },\n  transformInput: {\n    transformDataSource: {\n      s3DataSource: {\n        s3Uri: 's3://inputbucket/train',\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n      }\n    }\n  },\n  transformOutput: {\n    s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n  },\n  transformResources: {\n    instanceCount: 1,\n    instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 31,
        "104": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 15
      },
      "fqnsFingerprint": "fd299dab2d91364d338c465c76cc2f657ae1e29ff838db159e29f333974ba0fb"
    },
    "8295ea984d2575c3b49e9e31c7c76e1c98ccb62c768e053124d101a7db403b62": {
      "translations": {
        "python": {
          "source": "tasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_name=\"EMR-Containers-Job\",\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        )\n    ),\n    application_config=[tasks.ApplicationConfiguration(\n        classification=tasks.Classification.SPARK_DEFAULTS,\n        properties={\n            \"spark.executor.instances\": \"1\",\n            \"spark.executor.memory\": \"512M\"\n        }\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobName = \"EMR-Containers-Job\",\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        }\n    },\n    ApplicationConfig = new [] { new ApplicationConfiguration {\n        Classification = Classification.SPARK_DEFAULTS,\n        Properties = new Dictionary<string, string> {\n            { \"spark.executor.instances\", \"1\" },\n            { \"spark.executor.memory\", \"512M\" }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "EmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobName(\"EMR-Containers-Job\")\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .build())\n                .build())\n        .applicationConfig(List.of(ApplicationConfiguration.builder()\n                .classification(Classification.SPARK_DEFAULTS)\n                .properties(Map.of(\n                        \"spark.executor.instances\", \"1\",\n                        \"spark.executor.memory\", \"512M\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "tasks.NewEmrContainersStartJobRun(this, jsii.String(\"EMR Containers Start Job Run\"), &emrContainersStartJobRunProps{\n\tvirtualCluster: tasks.virtualClusterInput.fromVirtualClusterId(jsii.String(\"de92jdei2910fwedz\")),\n\treleaseLabel: tasks.releaseLabel_EMR_6_2_0(),\n\tjobName: jsii.String(\"EMR-Containers-Job\"),\n\tjobDriver: &jobDriver{\n\t\tsparkSubmitJobDriver: &sparkSubmitJobDriver{\n\t\t\tentryPoint: sfn.taskInput.fromText(jsii.String(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")),\n\t\t},\n\t},\n\tapplicationConfig: []applicationConfiguration{\n\t\t&applicationConfiguration{\n\t\t\tclassification: tasks.classification_SPARK_DEFAULTS(),\n\t\t\tproperties: map[string]*string{\n\t\t\t\t\"spark.executor.instances\": jsii.String(\"1\"),\n\t\t\t\t\"spark.executor.memory\": jsii.String(\"512M\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.Classification",
        "@aws-cdk/aws-stepfunctions-tasks.Classification#SPARK_DEFAULTS",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobName: 'EMR-Containers-Job',\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n    },\n  },\n  applicationConfig: [{\n    classification: tasks.Classification.SPARK_DEFAULTS,\n    properties: {\n      'spark.executor.instances': '1',\n      'spark.executor.memory': '512M',\n    },\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 23,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 11
      },
      "fqnsFingerprint": "f326c63003a23b7bc92021d0409fcc199f142e6192e2f115710fd3ed22301c96"
    },
    "6c3f94017b83551632dbf9b3dfc7317255e07bd05362e53f850fcb8813a1b02b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_stepfunctions_tasks as stepfunctions_tasks\n\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\nvpc_config = stepfunctions_tasks.VpcConfig(\n    vpc=vpc,\n\n    # the properties below are optional\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nVpcConfig vpcConfig = new VpcConfig {\n    Vpc = vpc,\n\n    // the properties below are optional\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nVpcConfig vpcConfig = VpcConfig.builder()\n        .vpc(vpc)\n\n        // the properties below are optional\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import stepfunctions_tasks \"github.com/aws-samples/dummy/awscdkawsstepfunctionstasks\"\n\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar vpc vpc\nvpcConfig := &vpcConfig{\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tsubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst vpcConfig: stepfunctions_tasks.VpcConfig = {\n  vpc: vpc,\n\n  // the properties below are optional\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions-tasks.VpcConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-stepfunctions-tasks.VpcConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as stepfunctions_tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vpcConfig: stepfunctions_tasks.VpcConfig = {\n  vpc: vpc,\n\n  // the properties below are optional\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 29,
        "91": 1,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 3,
        "193": 2,
        "194": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "5bee56841d7318e4440a894c39e069b45367dff4b18a714074d28e3bae45df7c"
    }
  }
}
