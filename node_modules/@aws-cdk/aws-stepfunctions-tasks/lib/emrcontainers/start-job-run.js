"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualClusterInput = exports.ReleaseLabel = exports.Classification = exports.EmrContainersStartJobRun = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("path");
const iam = require("@aws-cdk/aws-iam");
const lambda = require("@aws-cdk/aws-lambda");
const logs = require("@aws-cdk/aws-logs");
const s3 = require("@aws-cdk/aws-s3");
const sfn = require("@aws-cdk/aws-stepfunctions");
const cdk = require("@aws-cdk/core");
const cr = require("@aws-cdk/custom-resources");
const awscli = require("@aws-cdk/lambda-layer-awscli");
const task_utils_1 = require("../private/task-utils");
/**
 * Starts a job run.
 *
 * A job is a unit of work that you submit to Amazon EMR on EKS for execution.
 * The work performed by the job can be defined by a Spark jar, PySpark script, or SparkSQL query.
 * A job run is an execution of the job on the virtual cluster.
 *
 * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-emr-eks.html
 */
class EmrContainersStartJobRun extends sfn.TaskStateBase {
    constructor(scope, id, props) {
        var _e, _f;
        super(scope, id, props);
        this.props = props;
        /**
         * Render the EMR Containers ConfigurationProperty as JSON
         */
        this.applicationConfigPropertyToJson = (property) => {
            return {
                Classification: cdk.stringToCloudFormation(property.classification.classificationStatement),
                Properties: property.properties ? cdk.objectToCloudFormation(property.properties) : undefined,
                Configurations: property.nestedConfig ? cdk.listMapper(this.applicationConfigPropertyToJson)(property.nestedConfig) : undefined,
            };
        };
        this.assignLogGroup = () => {
            var _e, _f, _g;
            if ((_e = this.props.monitoring) === null || _e === void 0 ? void 0 : _e.logGroup) {
                return ((_f = this.props.monitoring) === null || _f === void 0 ? void 0 : _f.logGroup);
            }
            else {
                return (((_g = this.props.monitoring) === null || _g === void 0 ? void 0 : _g.logging) ? new logs.LogGroup(this, 'Monitoring Log Group') : undefined);
            }
        };
        this.assignLogBucket = () => {
            var _e, _f, _g;
            if ((_e = this.props.monitoring) === null || _e === void 0 ? void 0 : _e.logBucket) {
                return ((_f = this.props.monitoring) === null || _f === void 0 ? void 0 : _f.logBucket);
            }
            else {
                return (((_g = this.props.monitoring) === null || _g === void 0 ? void 0 : _g.logging) ? new s3.Bucket(this, 'Monitoring Bucket') : undefined);
            }
        };
        jsiiDeprecationWarnings._aws_cdk_aws_stepfunctions_tasks_EmrContainersStartJobRunProps(props);
        this.integrationPattern = (_e = props.integrationPattern) !== null && _e !== void 0 ? _e : sfn.IntegrationPattern.RUN_JOB;
        task_utils_1.validatePatternSupported(this.integrationPattern, EmrContainersStartJobRun.SUPPORTED_INTEGRATION_PATTERNS);
        if (this.props.applicationConfig) {
            this.validateAppConfig(this.props.applicationConfig);
        }
        if (this.props.jobDriver.sparkSubmitJobDriver) {
            this.validateSparkSubmitJobDriver(props.jobDriver.sparkSubmitJobDriver);
        }
        if (this.props.executionRole === undefined
            && sfn.JsonPath.isEncodedJsonPath(props.virtualCluster.id)) {
            throw new Error('Execution role cannot be undefined when the virtual cluster ID is not a concrete value. Provide an execution role with the correct trust policy');
        }
        this.logGroup = this.assignLogGroup();
        this.logBucket = this.assignLogBucket();
        this.role = (_f = this.props.executionRole) !== null && _f !== void 0 ? _f : this.createJobExecutionRole();
        this.grantPrincipal = this.role;
        this.grantMonitoringPolicies();
        this.taskPolicies = this.createPolicyStatements();
    }
    /**
     * @internal
     */
    _renderTask() {
        var _e, _f, _g, _h, _j;
        return {
            Resource: task_utils_1.integrationResourceArn('emr-containers', 'startJobRun', this.integrationPattern),
            Parameters: sfn.FieldUtils.renderObject({
                VirtualClusterId: this.props.virtualCluster.id,
                Name: this.props.jobName,
                ExecutionRoleArn: this.role.roleArn,
                ReleaseLabel: this.props.releaseLabel.label,
                JobDriver: {
                    SparkSubmitJobDriver: {
                        EntryPoint: (_e = this.props.jobDriver.sparkSubmitJobDriver) === null || _e === void 0 ? void 0 : _e.entryPoint.value,
                        EntryPointArguments: (_g = (_f = this.props.jobDriver.sparkSubmitJobDriver) === null || _f === void 0 ? void 0 : _f.entryPointArguments) === null || _g === void 0 ? void 0 : _g.value,
                        SparkSubmitParameters: (_h = this.props.jobDriver.sparkSubmitJobDriver) === null || _h === void 0 ? void 0 : _h.sparkSubmitParameters,
                    },
                },
                ConfigurationOverrides: {
                    ApplicationConfiguration: cdk.listMapper(this.applicationConfigPropertyToJson)(this.props.applicationConfig),
                    MonitoringConfiguration: {
                        CloudWatchMonitoringConfiguration: this.logGroup ? {
                            LogGroupName: this.logGroup.logGroupName,
                            LogStreamNamePrefix: this.props.monitoring.logStreamNamePrefix,
                        } : undefined,
                        PersistentAppUI: (((_j = this.props.monitoring) === null || _j === void 0 ? void 0 : _j.persistentAppUI) === false)
                            ? 'DISABLED'
                            : 'ENABLED',
                        S3MonitoringConfiguration: this.logBucket ? {
                            LogUri: this.logBucket.s3UrlForObject(),
                        } : undefined,
                    },
                },
                Tags: this.props.tags,
            }),
        };
    }
    validateAppConfigPropertiesLength(appConfig) {
        if ((appConfig === null || appConfig === void 0 ? void 0 : appConfig.properties) === undefined) {
            return;
        }
        else if (Object.keys(appConfig.properties).length > 100) {
            throw new Error(`Application configuration properties must have 100 or fewer entries. Received ${Object.keys(appConfig.properties).length}`);
        }
    }
    validatePropertiesNestedAppConfigBothNotUndefined(appConfig) {
        if ((appConfig === null || appConfig === void 0 ? void 0 : appConfig.properties) === undefined && (appConfig === null || appConfig === void 0 ? void 0 : appConfig.nestedConfig) === undefined) {
            throw new Error('Application configuration must have either properties or nested app configurations defined.');
        }
    }
    validateAppConfig(config) {
        if (config === undefined) {
            return;
        }
        else if (config.length > 100) {
            throw new Error(`Application configuration array must have 100 or fewer entries. Received ${config.length}`);
        }
        else {
            config.forEach(element => this.validateAppConfig(element.nestedConfig));
            config.forEach(element => this.validateAppConfigPropertiesLength(element));
            config.forEach(element => this.validatePropertiesNestedAppConfigBothNotUndefined(element));
        }
    }
    isArrayOfStrings(value) {
        return Array.isArray(value) && value.every(item => typeof item === 'string');
    }
    validateEntryPointArguments(entryPointArguments) {
        if (typeof entryPointArguments.value === 'string' && !sfn.JsonPath.isEncodedJsonPath(entryPointArguments.value)) {
            throw new Error(`Entry point arguments must be a string array or encoded JSON path, but received a non JSON path string');
      .`);
        }
        if (!this.isArrayOfStrings(entryPointArguments.value)) {
            throw new Error(`Entry point arguments must be a string array or encoded JSON path but received ${typeof entryPointArguments.value}.`);
        }
    }
    validateEntryPointArgumentsLength(entryPointArguments) {
        if (this.isArrayOfStrings(entryPointArguments.value)
            && (entryPointArguments.value.length > 10280 || entryPointArguments.value.length < 1)) {
            throw new Error(`Entry point arguments must be a string array between 1 and 10280 in length. Received ${entryPointArguments.value.length}.`);
        }
    }
    validateSparkSubmitParametersLength(sparkSubmitParameters) {
        if (sparkSubmitParameters.length > 102400 || sparkSubmitParameters.length < 1) {
            throw new Error(`Spark submit parameters must be between 1 and 102400 characters in length. Received ${sparkSubmitParameters.length}.`);
        }
    }
    validateEntryPoint(entryPoint) {
        if (!sfn.JsonPath.isEncodedJsonPath(entryPoint.value) && (entryPoint.value.length > 256 || entryPoint.value.length < 1)) {
            throw new Error(`Entry point must be between 1 and 256 characters in length. Received ${entryPoint.value.length}.`);
        }
    }
    validateSparkSubmitJobDriver(driver) {
        this.validateEntryPoint(driver.entryPoint);
        if (driver.entryPointArguments) {
            this.validateEntryPointArguments(driver.entryPointArguments);
            this.validateEntryPointArgumentsLength(driver.entryPointArguments);
        }
        if (driver.sparkSubmitParameters) {
            this.validateSparkSubmitParametersLength(driver.sparkSubmitParameters);
        }
    }
    // https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/creating-job-execution-role.html
    createJobExecutionRole() {
        var _e, _f, _g;
        const jobExecutionRole = new iam.Role(this, 'Job-Execution-Role', {
            assumedBy: new iam.CompositePrincipal(new iam.ServicePrincipal('emr-containers.amazonaws.com'), new iam.ServicePrincipal('states.amazonaws.com')),
        });
        (_e = this.logBucket) === null || _e === void 0 ? void 0 : _e.grantReadWrite(jobExecutionRole);
        (_f = this.logGroup) === null || _f === void 0 ? void 0 : _f.grantWrite(jobExecutionRole);
        (_g = this.logGroup) === null || _g === void 0 ? void 0 : _g.grant(jobExecutionRole, 'logs:DescribeLogStreams');
        jobExecutionRole.addToPrincipalPolicy(new iam.PolicyStatement({
            resources: [
                'arn:aws:logs:*:*:*',
            ],
            actions: [
                'logs:DescribeLogGroups',
            ],
        }));
        this.updateRoleTrustPolicy(jobExecutionRole);
        return jobExecutionRole;
    }
    grantMonitoringPolicies() {
        var _e, _f, _g;
        (_e = this.logBucket) === null || _e === void 0 ? void 0 : _e.grantReadWrite(this.role);
        (_f = this.logGroup) === null || _f === void 0 ? void 0 : _f.grantWrite(this.role);
        (_g = this.logGroup) === null || _g === void 0 ? void 0 : _g.grant(this.role, 'logs:DescribeLogStreams');
        this.role.addToPrincipalPolicy(new iam.PolicyStatement({
            resources: [
                'arn:aws:logs:*:*:*',
            ],
            actions: [
                'logs:DescribeLogGroups',
            ],
        }));
    }
    /**
     * If an execution role is not provided by user, the automatically generated job execution role must create a trust relationship
     * between itself and the identity of the EMR managed service account in order to run jobs on the Kubernetes namespace.
     *
     * This cannot occur if the user provided virtualClusterId is within an encoded JSON path.
     *
     * The trust relationship can be created by updating the trust policy of the job execution role.
     *
     * @param role the automatically generated job execution role
     */
    updateRoleTrustPolicy(role) {
        const eksClusterInfo = new cr.AwsCustomResource(this, 'GetEksClusterInfo', {
            onCreate: {
                service: 'EMRcontainers',
                action: 'describeVirtualCluster',
                parameters: {
                    id: this.props.virtualCluster.id,
                },
                outputPaths: ['virtualCluster.containerProvider.info.eksInfo.namespace', 'virtualCluster.containerProvider.id'],
                physicalResourceId: cr.PhysicalResourceId.of('id'),
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({
                resources: cr.AwsCustomResourcePolicy.ANY_RESOURCE,
            }),
        });
        /* We make use of custom resources to call update-roll-trust-policy as this command is only available through
         * aws cli because this is only used during the initial setup and is not available through the sdk.
         * https://awscli.amazonaws.com/v2/documentation/api/latest/reference/emr-containers/update-role-trust-policy.html
         * Commands available through SDK: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EMRcontainers.html
         * Commands available through CLI: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/emr-containers/index.html
        */
        const cliLayer = new awscli.AwsCliLayer(this, 'awsclilayer');
        const shellCliLambda = new lambda.SingletonFunction(this, 'Call Update-Role-Trust-Policy', {
            uuid: '8693BB64-9689-44B6-9AAF-B0CC9EB8757C',
            runtime: lambda.Runtime.PYTHON_3_6,
            handler: 'index.handler',
            code: lambda.Code.fromAsset(path.join(__dirname, 'utils/role-policy')),
            timeout: cdk.Duration.seconds(30),
            memorySize: 256,
            layers: [cliLayer],
        });
        shellCliLambda.addToRolePolicy(new iam.PolicyStatement({
            resources: [
                cdk.Stack.of(this).formatArn({
                    service: 'eks',
                    resource: 'cluster',
                    resourceName: eksClusterInfo.getResponseField('virtualCluster.containerProvider.id'),
                }),
            ],
            actions: [
                'eks:DescribeCluster',
            ],
        }));
        shellCliLambda.addToRolePolicy(new iam.PolicyStatement({
            resources: [role.roleArn],
            actions: [
                'iam:GetRole',
                'iam:UpdateAssumeRolePolicy',
            ],
        }));
        const provider = new cr.Provider(this, 'CustomResourceProvider', {
            onEventHandler: shellCliLambda,
        });
        new cdk.CustomResource(this, 'Custom Resource', {
            properties: {
                eksNamespace: eksClusterInfo.getResponseField('virtualCluster.containerProvider.info.eksInfo.namespace'),
                eksClusterId: eksClusterInfo.getResponseField('virtualCluster.containerProvider.id'),
                roleName: role.roleName,
            },
            serviceToken: provider.serviceToken,
        });
    }
    createPolicyStatements() {
        const policyStatements = [
            new iam.PolicyStatement({
                resources: [
                    cdk.Stack.of(this).formatArn({
                        arnFormat: cdk.ArnFormat.SLASH_RESOURCE_SLASH_RESOURCE_NAME,
                        service: 'emr-containers',
                        resource: 'virtualclusters',
                        resourceName: sfn.JsonPath.isEncodedJsonPath(this.props.virtualCluster.id) ? '*' : this.props.virtualCluster.id,
                    }),
                ],
                actions: ['emr-containers:StartJobRun'],
                conditions: {
                    StringEquals: {
                        'emr-containers:ExecutionRoleArn': this.role.roleArn,
                    },
                },
            }),
        ];
        if (this.integrationPattern === sfn.IntegrationPattern.RUN_JOB) {
            policyStatements.push(new iam.PolicyStatement({
                resources: [
                    cdk.Stack.of(this).formatArn({
                        arnFormat: cdk.ArnFormat.SLASH_RESOURCE_SLASH_RESOURCE_NAME,
                        service: 'emr-containers',
                        resource: 'virtualclusters',
                        resourceName: sfn.JsonPath.isEncodedJsonPath(this.props.virtualCluster.id) ? '*' : `${this.props.virtualCluster.id}/jobruns/*`,
                    }),
                ],
                actions: [
                    'emr-containers:DescribeJobRun',
                    'emr-containers:CancelJobRun',
                ],
            }));
        }
        return policyStatements;
    }
}
exports.EmrContainersStartJobRun = EmrContainersStartJobRun;
_a = JSII_RTTI_SYMBOL_1;
EmrContainersStartJobRun[_a] = { fqn: "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun", version: "1.152.0" };
EmrContainersStartJobRun.SUPPORTED_INTEGRATION_PATTERNS = [
    sfn.IntegrationPattern.REQUEST_RESPONSE,
    sfn.IntegrationPattern.RUN_JOB,
];
/**
 * The classification within a EMR Containers application configuration.
 * Class can be extended to add other classifications.
 * For example, new Classification('xxx-yyy');
 */
class Classification {
    /**
     * Creates a new Classification
     *
     * @param classificationStatement A literal string in case a new EMR classification is released, if not already defined.
     */
    constructor(classificationStatement) {
        this.classificationStatement = classificationStatement;
    }
}
exports.Classification = Classification;
_b = JSII_RTTI_SYMBOL_1;
Classification[_b] = { fqn: "@aws-cdk/aws-stepfunctions-tasks.Classification", version: "1.152.0" };
/**
 * Sets the maximizeResourceAllocation property to true or false.
 * When true, Amazon EMR automatically configures spark-defaults properties based on cluster hardware configuration.
 *
 * For more info:
 * @see https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-spark-configure.html#emr-spark-maximizeresourceallocation
 */
Classification.SPARK = new Classification('spark');
/**
 * Sets values in the spark-defaults.conf file.
 *
 * For more info:
 * @see https://spark.apache.org/docs/latest/configuration.html
 */
Classification.SPARK_DEFAULTS = new Classification('spark-defaults');
/**
 * Sets values in the spark-env.sh file.
 *
 * For more info:
 * @see https://spark.apache.org/docs/latest/configuration.html#environment-variables
 */
Classification.SPARK_ENV = new Classification('spark-env');
/**
 * Sets values in the hive-site.xml for Spark.
 */
Classification.SPARK_HIVE_SITE = new Classification('spark-hive-site');
/**
 * Sets values in the log4j.properties file.
 *
 * For more settings and info:
 * @see https://github.com/apache/spark/blob/master/conf/log4j.properties.template
 */
Classification.SPARK_LOG4J = new Classification('spark-log4j');
/**
 * Sets values in the metrics.properties file.
 *
 * For more settings and info:
 * @see https://github.com/apache/spark/blob/master/conf/metrics.properties.template
 */
Classification.SPARK_METRICS = new Classification('spark-metrics');
/**
 * The Amazon EMR release version to use for the job run.
 *
 * Can be extended to include new EMR releases
 *
 * For example, `new ReleaseLabel('emr-x.xx.x-latest');`
 */
class ReleaseLabel {
    /**
     * Initializes the label string.
     *
     * @param label A literal string that contains the release-version ex. 'emr-x.x.x-latest'
     */
    constructor(label) {
        this.label = label;
    }
}
exports.ReleaseLabel = ReleaseLabel;
_c = JSII_RTTI_SYMBOL_1;
ReleaseLabel[_c] = { fqn: "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel", version: "1.152.0" };
/**
 * EMR Release version 5.32.0
 */
ReleaseLabel.EMR_5_32_0 = new ReleaseLabel('emr-5.32.0-latest');
/**
 * EMR Release version 5.33.0
 */
ReleaseLabel.EMR_5_33_0 = new ReleaseLabel('emr-5.33.0-latest');
/**
 * EMR Release version 6.2.0
 */
ReleaseLabel.EMR_6_2_0 = new ReleaseLabel('emr-6.2.0-latest');
/**
 * EMR Release version 6.3.0
 */
ReleaseLabel.EMR_6_3_0 = new ReleaseLabel('emr-6.3.0-latest');
/**
 * Class that returns a virtual cluster's id depending on input type
 */
class VirtualClusterInput {
    /**
     * Initializes the virtual cluster ID.
     *
     * @param id The VirtualCluster Id
     */
    constructor(id) {
        this.id = id;
    }
    /**
     * Input for a virtualClusterId from a Task Input
     */
    static fromTaskInput(taskInput) {
        return new VirtualClusterInput(taskInput.value);
    }
    /**
     * Input for virtualClusterId from a literal string
     */
    static fromVirtualClusterId(virtualClusterId) {
        return new VirtualClusterInput(virtualClusterId);
    }
}
exports.VirtualClusterInput = VirtualClusterInput;
_d = JSII_RTTI_SYMBOL_1;
VirtualClusterInput[_d] = { fqn: "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput", version: "1.152.0" };
//# sourceMappingURL=data:application/json;base64,