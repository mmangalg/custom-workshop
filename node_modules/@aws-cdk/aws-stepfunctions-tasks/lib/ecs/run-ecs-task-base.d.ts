import * as ec2 from '@aws-cdk/aws-ec2';
import * as ecs from '@aws-cdk/aws-ecs';
import * as sfn from '@aws-cdk/aws-stepfunctions';
import { ContainerOverride } from './run-ecs-task-base-types';
/**
 * Basic properties for ECS Tasks
 */
export interface CommonEcsRunTaskProps {
    /**
     * The topic to run the task on
     */
    readonly cluster: ecs.ICluster;
    /**
     * Task Definition used for running tasks in the service.
     *
     * Note: this must be TaskDefinition, and not ITaskDefinition,
     * as it requires properties that are not known for imported task definitions
     */
    readonly taskDefinition: ecs.TaskDefinition;
    /**
     * Container setting overrides
     *
     * Key is the name of the container to override, value is the
     * values you want to override.
     *
     * @default - No overrides
     */
    readonly containerOverrides?: ContainerOverride[];
    /**
     * The service integration pattern indicates different ways to call RunTask in ECS.
     *
     * The valid value for Lambda is FIRE_AND_FORGET, SYNC and WAIT_FOR_TASK_TOKEN.
     *
     * @default FIRE_AND_FORGET
     */
    readonly integrationPattern?: sfn.ServiceIntegrationPattern;
}
/**
 * Construction properties for the BaseRunTaskProps
 * @deprecated No replacement
 */
export interface EcsRunTaskBaseProps extends CommonEcsRunTaskProps {
    /**
     * Additional parameters to pass to the base task
     *
     * @default - No additional parameters passed
     */
    readonly parameters?: {
        [key: string]: any;
    };
}
/**
 * A StepFunctions Task to run a Task on ECS or Fargate
 * @deprecated No replacement
 */
export declare class EcsRunTaskBase implements ec2.IConnectable, sfn.IStepFunctionsTask {
    private readonly props;
    /**
     * Manage allowed network traffic for this service
     */
    readonly connections: ec2.Connections;
    private securityGroup?;
    private networkConfiguration?;
    private readonly integrationPattern;
    constructor(props: EcsRunTaskBaseProps);
    bind(task: sfn.Task): sfn.StepFunctionsTaskConfig;
    protected configureAwsVpcNetworking(vpc: ec2.IVpc, assignPublicIp?: boolean, subnetSelection?: ec2.SubnetSelection, securityGroup?: ec2.ISecurityGroup): void;
    private makePolicyStatements;
    private taskExecutionRoles;
}
