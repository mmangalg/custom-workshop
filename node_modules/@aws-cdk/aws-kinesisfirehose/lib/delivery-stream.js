"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeliveryStream = exports.StreamEncryption = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const ec2 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const kms = require("@aws-cdk/aws-kms");
const cdk = require("@aws-cdk/core");
const region_info_1 = require("@aws-cdk/region-info");
const constructs_1 = require("constructs");
const kinesisfirehose_canned_metrics_generated_1 = require("./kinesisfirehose-canned-metrics.generated");
const kinesisfirehose_generated_1 = require("./kinesisfirehose.generated");
const PUT_RECORD_ACTIONS = [
    'firehose:PutRecord',
    'firehose:PutRecordBatch',
];
/**
 * Base class for new and imported Kinesis Data Firehose delivery streams.
 */
class DeliveryStreamBase extends cdk.Resource {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.connections = setConnections(this);
    }
    grant(grantee, ...actions) {
        return iam.Grant.addToPrincipal({
            resourceArns: [this.deliveryStreamArn],
            grantee: grantee,
            actions: actions,
        });
    }
    grantPutRecords(grantee) {
        return this.grant(grantee, ...PUT_RECORD_ACTIONS);
    }
    metric(metricName, props) {
        return new cloudwatch.Metric({
            namespace: 'AWS/Firehose',
            metricName: metricName,
            dimensionsMap: {
                DeliveryStreamName: this.deliveryStreamName,
            },
            ...props,
        }).attachTo(this);
    }
    metricIncomingBytes(props) {
        return this.cannedMetric(kinesisfirehose_canned_metrics_generated_1.FirehoseMetrics.incomingBytesSum, props);
    }
    metricIncomingRecords(props) {
        return this.cannedMetric(kinesisfirehose_canned_metrics_generated_1.FirehoseMetrics.incomingRecordsSum, props);
    }
    metricBackupToS3Bytes(props) {
        return this.cannedMetric(kinesisfirehose_canned_metrics_generated_1.FirehoseMetrics.backupToS3BytesSum, props);
    }
    metricBackupToS3DataFreshness(props) {
        return this.cannedMetric(kinesisfirehose_canned_metrics_generated_1.FirehoseMetrics.backupToS3DataFreshnessAverage, props);
    }
    metricBackupToS3Records(props) {
        return this.cannedMetric(kinesisfirehose_canned_metrics_generated_1.FirehoseMetrics.backupToS3RecordsSum, props);
    }
    cannedMetric(fn, props) {
        return new cloudwatch.Metric({
            ...fn({ DeliveryStreamName: this.deliveryStreamName }),
            ...props,
        }).attachTo(this);
    }
}
/**
 * Options for server-side encryption of a delivery stream.
 */
var StreamEncryption;
(function (StreamEncryption) {
    /**
     * Data in the stream is stored unencrypted.
     */
    StreamEncryption[StreamEncryption["UNENCRYPTED"] = 0] = "UNENCRYPTED";
    /**
     * Data in the stream is stored encrypted by a KMS key managed by the customer.
     */
    StreamEncryption[StreamEncryption["CUSTOMER_MANAGED"] = 1] = "CUSTOMER_MANAGED";
    /**
     * Data in the stream is stored encrypted by a KMS key owned by AWS and managed for use in multiple AWS accounts.
     */
    StreamEncryption[StreamEncryption["AWS_OWNED"] = 2] = "AWS_OWNED";
})(StreamEncryption = exports.StreamEncryption || (exports.StreamEncryption = {}));
/**
 * Create a Kinesis Data Firehose delivery stream
 *
 * @resource AWS::KinesisFirehose::DeliveryStream
 */
class DeliveryStream extends DeliveryStreamBase {
    constructor(scope, id, props) {
        var _b, _c, _d, _e;
        super(scope, id, {
            physicalName: props.deliveryStreamName,
        });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_kinesisfirehose_DeliveryStreamProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.constructor);
            }
            throw error;
        }
        if (props.destinations.length !== 1) {
            throw new Error(`Only one destination is allowed per delivery stream, given ${props.destinations.length}`);
        }
        const role = (_b = props.role) !== null && _b !== void 0 ? _b : new iam.Role(this, 'Service Role', {
            assumedBy: new iam.ServicePrincipal('firehose.amazonaws.com'),
        });
        this.grantPrincipal = role;
        if (props.sourceStream &&
            (props.encryption === StreamEncryption.AWS_OWNED || props.encryption === StreamEncryption.CUSTOMER_MANAGED || props.encryptionKey)) {
            throw new Error('Requested server-side encryption but delivery stream source is a Kinesis data stream. Specify server-side encryption on the data stream instead.');
        }
        if ((props.encryption === StreamEncryption.AWS_OWNED || props.encryption === StreamEncryption.UNENCRYPTED) && props.encryptionKey) {
            throw new Error(`Specified stream encryption as ${StreamEncryption[props.encryption]} but provided a customer-managed key`);
        }
        const encryptionKey = (_c = props.encryptionKey) !== null && _c !== void 0 ? _c : (props.encryption === StreamEncryption.CUSTOMER_MANAGED ? new kms.Key(this, 'Key') : undefined);
        const encryptionConfig = (encryptionKey || (props.encryption === StreamEncryption.AWS_OWNED)) ? {
            keyArn: encryptionKey === null || encryptionKey === void 0 ? void 0 : encryptionKey.keyArn,
            keyType: encryptionKey ? 'CUSTOMER_MANAGED_CMK' : 'AWS_OWNED_CMK',
        } : undefined;
        /*
         * In order for the service role to have access to the encryption key before the delivery stream is created, the
         * CfnDeliveryStream below should have a dependency on the grant returned by the function call below:
         * > `keyGrant?.applyBefore(resource)`
         * However, an error during synthesis is thrown if this is added:
         * > ${Token[PolicyDocument.###]} does not implement DependableTrait
         * Data will not be lost if the permissions are not granted to the service role immediately; Firehose has a 24 hour
         * period where data will be buffered and retried if access is denied to the encryption key. For that reason, it is
         * acceptable to omit the dependency for now. See: https://github.com/aws/aws-cdk/issues/15790
         */
        encryptionKey === null || encryptionKey === void 0 ? void 0 : encryptionKey.grantEncryptDecrypt(role);
        const sourceStreamConfig = props.sourceStream ? {
            kinesisStreamArn: props.sourceStream.streamArn,
            roleArn: role.roleArn,
        } : undefined;
        const readStreamGrant = (_d = props.sourceStream) === null || _d === void 0 ? void 0 : _d.grantRead(role);
        const destinationConfig = props.destinations[0].bind(this, {});
        const resource = new kinesisfirehose_generated_1.CfnDeliveryStream(this, 'Resource', {
            deliveryStreamEncryptionConfigurationInput: encryptionConfig,
            deliveryStreamName: props.deliveryStreamName,
            deliveryStreamType: props.sourceStream ? 'KinesisStreamAsSource' : 'DirectPut',
            kinesisStreamSourceConfiguration: sourceStreamConfig,
            ...destinationConfig,
        });
        (_e = destinationConfig.dependables) === null || _e === void 0 ? void 0 : _e.forEach(dependable => resource.node.addDependency(dependable));
        if (readStreamGrant) {
            resource.node.addDependency(readStreamGrant);
        }
        this.deliveryStreamArn = this.getResourceArnAttribute(resource.attrArn, {
            service: 'kinesis',
            resource: 'deliverystream',
            resourceName: this.physicalName,
        });
        this.deliveryStreamName = this.getResourceNameAttribute(resource.ref);
    }
    /**
     * Import an existing delivery stream from its name.
     */
    static fromDeliveryStreamName(scope, id, deliveryStreamName) {
        return this.fromDeliveryStreamAttributes(scope, id, { deliveryStreamName });
    }
    /**
     * Import an existing delivery stream from its ARN.
     */
    static fromDeliveryStreamArn(scope, id, deliveryStreamArn) {
        return this.fromDeliveryStreamAttributes(scope, id, { deliveryStreamArn });
    }
    /**
     * Import an existing delivery stream from its attributes.
     */
    static fromDeliveryStreamAttributes(scope, id, attrs) {
        var _b, _c;
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_kinesisfirehose_DeliveryStreamAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromDeliveryStreamAttributes);
            }
            throw error;
        }
        if (!attrs.deliveryStreamName && !attrs.deliveryStreamArn) {
            throw new Error('Either deliveryStreamName or deliveryStreamArn must be provided in DeliveryStreamAttributes');
        }
        const deliveryStreamName = (_b = attrs.deliveryStreamName) !== null && _b !== void 0 ? _b : cdk.Stack.of(scope).splitArn(attrs.deliveryStreamArn, cdk.ArnFormat.SLASH_RESOURCE_NAME).resourceName;
        if (!deliveryStreamName) {
            throw new Error(`No delivery stream name found in ARN: '${attrs.deliveryStreamArn}'`);
        }
        const deliveryStreamArn = (_c = attrs.deliveryStreamArn) !== null && _c !== void 0 ? _c : cdk.Stack.of(scope).formatArn({
            service: 'firehose',
            resource: 'deliverystream',
            resourceName: attrs.deliveryStreamName,
            arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
        });
        class Import extends DeliveryStreamBase {
            constructor() {
                var _b;
                super(...arguments);
                this.deliveryStreamName = deliveryStreamName;
                this.deliveryStreamArn = deliveryStreamArn;
                this.grantPrincipal = (_b = attrs.role) !== null && _b !== void 0 ? _b : new iam.UnknownPrincipal({ resource: this });
            }
        }
        return new Import(scope, id);
    }
}
exports.DeliveryStream = DeliveryStream;
_a = JSII_RTTI_SYMBOL_1;
DeliveryStream[_a] = { fqn: "@aws-cdk/aws-kinesisfirehose.DeliveryStream", version: "1.153.1" };
function setConnections(scope) {
    const stack = cdk.Stack.of(scope);
    const mappingId = '@aws-cdk/aws-kinesisfirehose.CidrBlocks';
    let cfnMapping = constructs_1.Node.of(stack).tryFindChild(mappingId);
    if (!cfnMapping) {
        const mapping = {};
        region_info_1.RegionInfo.regions.forEach((regionInfo) => {
            if (regionInfo.firehoseCidrBlock) {
                mapping[regionInfo.name] = {
                    FirehoseCidrBlock: regionInfo.firehoseCidrBlock,
                };
            }
        });
        cfnMapping = new cdk.CfnMapping(stack, mappingId, {
            mapping,
            lazy: true,
        });
    }
    const cidrBlock = cfnMapping.findInMap(stack.region, 'FirehoseCidrBlock');
    return new ec2.Connections({
        peer: ec2.Peer.ipv4(cidrBlock),
    });
}
//# sourceMappingURL=data:application/json;base64,