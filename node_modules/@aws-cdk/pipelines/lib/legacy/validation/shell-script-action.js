"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShellScriptAction = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const codebuild = require("@aws-cdk/aws-codebuild");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const codepipeline_actions = require("@aws-cdk/aws-codepipeline-actions");
/**
 * Validate a revision using shell commands
 *
 * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead
 */
class ShellScriptAction {
    constructor(props) {
        var _b, _c;
        this.props = props;
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.ShellScriptAction", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
            jsiiDeprecationWarnings._aws_cdk_pipelines_ShellScriptActionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.constructor);
            }
            throw error;
        }
        // A number of actionProperties get read before bind() is even called (so before we
        // have made the Project and can construct the actual CodeBuildAction)
        //
        // - actionName
        // - resource
        // - region
        // - category
        // - role
        // - owner
        this._actionProperties = {
            actionName: props.actionName,
            category: codepipeline.ActionCategory.BUILD,
            provider: 'CodeBuild',
            artifactBounds: { minInputs: 0, maxInputs: 5, minOutputs: 0, maxOutputs: 5 },
            inputs: [],
            outputs: [],
        };
        if (Object.keys((_b = props.useOutputs) !== null && _b !== void 0 ? _b : {}).length + ((_c = props.additionalArtifacts) !== null && _c !== void 0 ? _c : []).length === 0) {
            throw new Error('You must supply either \'useOutputs\' or \'additionalArtifacts\', since a CodeBuild Action must always have at least one input artifact.');
        }
    }
    /**
     * The CodeBuild Project's principal
     */
    get grantPrincipal() {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.ShellScriptAction#grantPrincipal", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, jsiiDeprecationWarnings.getPropertyDescriptor(this, "grantPrincipal").get);
            }
            throw error;
        }
        return this.project.grantPrincipal;
    }
    /**
     * Exists to implement IAction
     */
    get actionProperties() {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.ShellScriptAction#actionProperties", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, jsiiDeprecationWarnings.getPropertyDescriptor(this, "actionProperties").get);
            }
            throw error;
        }
        return this._actionProperties;
    }
    /**
     * Exists to implement IAction
     */
    bind(scope, stage, options) {
        var _b, _c, _d, _e, _f;
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.ShellScriptAction#bind", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bind);
            }
            throw error;
        }
        const inputs = new Array();
        inputs.push(...(_b = this.props.additionalArtifacts) !== null && _b !== void 0 ? _b : []);
        const envVarCommands = new Array();
        const bashOptions = (_c = this.props.bashOptions) !== null && _c !== void 0 ? _c : '-eu';
        if (bashOptions) {
            envVarCommands.push(`set ${bashOptions}`);
        }
        for (const [varName, output] of Object.entries((_d = this.props.useOutputs) !== null && _d !== void 0 ? _d : {})) {
            const outputArtifact = output.artifactFile;
            // Add the artifact to the list of inputs, if it's not in there already. Determine
            // the location where CodeBuild is going to stick it based on whether it's the first (primary)
            // input or an 'extra input', then parse.
            let artifactIndex = inputs.findIndex(a => a.artifactName === outputArtifact.artifact.artifactName);
            if (artifactIndex === -1) {
                artifactIndex = inputs.push(outputArtifact.artifact) - 1;
            }
            const dirEnv = artifactIndex === 0 ? 'CODEBUILD_SRC_DIR' : `CODEBUILD_SRC_DIR_${outputArtifact.artifact.artifactName}`;
            envVarCommands.push(`export ${varName}="$(node -pe 'require(process.env.${dirEnv} + "/${outputArtifact.fileName}")["${output.outputName}"]')"`);
        }
        this._project = new codebuild.PipelineProject(scope, 'Project', {
            environment: this.props.environment || { buildImage: codebuild.LinuxBuildImage.STANDARD_5_0 },
            vpc: this.props.vpc,
            securityGroups: this.props.securityGroups,
            subnetSelection: this.props.subnetSelection,
            buildSpec: codebuild.BuildSpec.fromObject({
                version: '0.2',
                phases: {
                    build: {
                        commands: [
                            ...envVarCommands,
                            ...this.props.commands,
                        ],
                    },
                },
            }),
        });
        for (const statement of (_e = this.props.rolePolicyStatements) !== null && _e !== void 0 ? _e : []) {
            this._project.addToRolePolicy(statement);
        }
        this._action = new codepipeline_actions.CodeBuildAction({
            actionName: this.props.actionName,
            input: inputs[0],
            extraInputs: inputs.slice(1),
            runOrder: (_f = this.props.runOrder) !== null && _f !== void 0 ? _f : 100,
            project: this._project,
            environmentVariables: this.props.environmentVariables,
        });
        // Replace the placeholder actionProperties at the last minute
        this._actionProperties = this._action.actionProperties;
        return this._action.bind(scope, stage, options);
    }
    /**
     * Project generated to run the shell script in
     */
    get project() {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.ShellScriptAction#project", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, jsiiDeprecationWarnings.getPropertyDescriptor(this, "project").get);
            }
            throw error;
        }
        if (!this._project) {
            throw new Error('Project becomes available after ShellScriptAction has been bound to a stage');
        }
        return this._project;
    }
    /**
     * Exists to implement IAction
     */
    onStateChange(name, target, options) {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.ShellScriptAction#onStateChange", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.onStateChange);
            }
            throw error;
        }
        if (!this._action) {
            throw new Error('Need bind() first');
        }
        return this._action.onStateChange(name, target, options);
    }
}
exports.ShellScriptAction = ShellScriptAction;
_a = JSII_RTTI_SYMBOL_1;
ShellScriptAction[_a] = { fqn: "@aws-cdk/pipelines.ShellScriptAction", version: "1.153.1" };
//# sourceMappingURL=data:application/json;base64,