"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleSynthAction = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const crypto = require("crypto");
const path = require("path");
const codebuild = require("@aws-cdk/aws-codebuild");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const codepipeline_actions = require("@aws-cdk/aws-codepipeline-actions");
const ec2 = require("@aws-cdk/aws-ec2");
const core_1 = require("@aws-cdk/core");
const docker_credentials_1 = require("../../docker-credentials");
const fs_1 = require("../../private/fs");
const _util_1 = require("./_util");
const DEFAULT_OUTPUT_DIR = 'cdk.out';
/**
 * A standard synth with a generated buildspec
 *
 * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead
 */
class SimpleSynthAction {
    constructor(props) {
        var _b, _c, _d;
        this.props = props;
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.SimpleSynthAction", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
            jsiiDeprecationWarnings._aws_cdk_pipelines_SimpleSynthActionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.constructor);
            }
            throw error;
        }
        // A number of actionProperties get read before bind() is even called (so before we
        // have made the Project and can construct the actual CodeBuildAction)
        //
        // - actionName
        // - resource
        // - region
        // - category
        // - role
        // - owner
        this._actionProperties = {
            actionName: (_b = props.actionName) !== null && _b !== void 0 ? _b : 'Synth',
            category: codepipeline.ActionCategory.BUILD,
            provider: 'CodeBuild',
            artifactBounds: { minInputs: 0, maxInputs: 5, minOutputs: 0, maxOutputs: 5 },
            inputs: [props.sourceArtifact],
            outputs: [props.cloudAssemblyArtifact, ...((_c = props.additionalArtifacts) !== null && _c !== void 0 ? _c : []).map(a => a.artifact)],
        };
        if (this.props.installCommand && this.props.installCommands) {
            throw new Error('Pass either \'installCommand\' or \'installCommands\', but not both');
        }
        if (this.props.buildCommand && this.props.buildCommands) {
            throw new Error('Pass either \'buildCommand\' or \'buildCommands\', but not both');
        }
        const addls = (_d = props.additionalArtifacts) !== null && _d !== void 0 ? _d : [];
        if (Object.keys(addls).length > 0) {
            if (!props.cloudAssemblyArtifact.artifactName) {
                throw new Error('You must give all output artifacts, including the \'cloudAssemblyArtifact\', names when using \'additionalArtifacts\'');
            }
            for (const addl of addls) {
                if (!addl.artifact.artifactName) {
                    throw new Error('You must give all output artifacts passed to SimpleSynthAction names when using \'additionalArtifacts\'');
                }
            }
        }
    }
    /**
     * Create a standard NPM synth action
     *
     * Uses `npm ci` to install dependencies and `npx cdk synth` to synthesize.
     *
     * If you need a build step, add `buildCommand: 'npm run build'`.
     */
    static standardNpmSynth(options) {
        var _b, _c, _d;
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.SimpleSynthAction#standardNpmSynth", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
            jsiiDeprecationWarnings._aws_cdk_pipelines_StandardNpmSynthOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.standardNpmSynth);
            }
            throw error;
        }
        return new SimpleSynthAction({
            ...options,
            installCommand: (_b = options.installCommand) !== null && _b !== void 0 ? _b : 'npm ci',
            synthCommand: (_c = options.synthCommand) !== null && _c !== void 0 ? _c : 'npx cdk synth',
            vpc: options.vpc,
            subnetSelection: options.subnetSelection,
            environment: {
                ...options.environment,
                environmentVariables: {
                    // Need this in case the CDK CLI is not in the 'package.json' of the project,
                    // and 'npx' is going to download it; without this setting, 'npx' will not properly
                    // install the package into the root user's home directory
                    NPM_CONFIG_UNSAFE_PERM: { value: 'true' },
                    ...(_d = options.environment) === null || _d === void 0 ? void 0 : _d.environmentVariables,
                },
            },
        });
    }
    /**
     * Create a standard Yarn synth action
     *
     * Uses `yarn install --frozen-lockfile` to install dependencies and `npx cdk synth` to synthesize.
     *
     * If you need a build step, add `buildCommand: 'yarn build'`.
     */
    static standardYarnSynth(options) {
        var _b, _c, _d;
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.SimpleSynthAction#standardYarnSynth", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
            jsiiDeprecationWarnings._aws_cdk_pipelines_StandardYarnSynthOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.standardYarnSynth);
            }
            throw error;
        }
        return new SimpleSynthAction({
            ...options,
            installCommand: (_b = options.installCommand) !== null && _b !== void 0 ? _b : 'yarn install --frozen-lockfile',
            synthCommand: (_c = options.synthCommand) !== null && _c !== void 0 ? _c : 'npx cdk synth',
            vpc: options.vpc,
            subnetSelection: options.subnetSelection,
            environment: {
                ...options.environment,
                environmentVariables: {
                    // Need this in case the CDK CLI is not in the 'package.json' of the project,
                    // and 'npx' is going to download it; without this setting, 'npx' will not properly
                    // install the package into the root user's home directory
                    NPM_CONFIG_UNSAFE_PERM: { value: 'true' },
                    ...(_d = options.environment) === null || _d === void 0 ? void 0 : _d.environmentVariables,
                },
            },
        });
    }
    /**
     * Exists to implement IAction
     */
    get actionProperties() {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.SimpleSynthAction#actionProperties", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, jsiiDeprecationWarnings.getPropertyDescriptor(this, "actionProperties").get);
            }
            throw error;
        }
        return this._actionProperties;
    }
    /**
     * Project generated to run the synth command
     */
    get project() {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.SimpleSynthAction#project", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, jsiiDeprecationWarnings.getPropertyDescriptor(this, "project").get);
            }
            throw error;
        }
        if (!this._project) {
            throw new Error('Project becomes available after SimpleSynthAction has been bound to a stage');
        }
        return this._project;
    }
    /**
     * Exists to implement IAction
     */
    bind(scope, stage, options) {
        var _b, _c, _d, _e, _f;
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.SimpleSynthAction#bind", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bind);
            }
            throw error;
        }
        const buildCommands = (_b = this.props.buildCommands) !== null && _b !== void 0 ? _b : [this.props.buildCommand];
        const installCommands = (_c = this.props.installCommands) !== null && _c !== void 0 ? _c : [this.props.installCommand];
        const testCommands = (_d = this.props.testCommands) !== null && _d !== void 0 ? _d : [];
        const synthCommand = this.props.synthCommand;
        const environment = { buildImage: codebuild.LinuxBuildImage.STANDARD_5_0, ...this.props.environment };
        const osType = (environment.buildImage instanceof codebuild.WindowsBuildImage)
            ? ec2.OperatingSystemType.WINDOWS
            : ec2.OperatingSystemType.LINUX;
        const buildSpec = codebuild.BuildSpec.fromObject({
            version: '0.2',
            phases: {
                pre_build: {
                    commands: _util_1.filterEmpty([
                        this.props.subdirectory ? `cd ${this.props.subdirectory}` : '',
                        ...installCommands,
                        ...docker_credentials_1.dockerCredentialsInstallCommands(docker_credentials_1.DockerCredentialUsage.SYNTH, this._dockerCredentials, osType),
                    ]),
                },
                build: {
                    commands: _util_1.filterEmpty([
                        ...buildCommands,
                        ...testCommands,
                        synthCommand,
                    ]),
                },
            },
            artifacts: renderArtifacts(this),
        });
        const environmentVariables = {
            ..._util_1.copyEnvironmentVariables(...this.props.copyEnvironmentVariables || []),
        };
        const mergedBuildSpec = this.props.buildSpec ? codebuild.mergeBuildSpecs(this.props.buildSpec, buildSpec) : buildSpec;
        // A hash over the values that make the CodeBuild Project unique (and necessary
        // to restart the pipeline if one of them changes). projectName is not necessary to include
        // here because the pipeline will definitely restart if projectName changes.
        // (Resolve tokens)
        const projectConfigHash = hash(core_1.Stack.of(scope).resolve({
            environment: serializeBuildEnvironment(environment),
            buildSpecString: mergedBuildSpec.toBuildSpec(),
            environmentVariables,
        }));
        const project = new codebuild.PipelineProject(scope, 'CdkBuildProject', {
            projectName: this.props.projectName,
            environment,
            vpc: this.props.vpc,
            subnetSelection: this.props.subnetSelection,
            buildSpec: mergedBuildSpec,
            environmentVariables,
        });
        if (this.props.rolePolicyStatements !== undefined) {
            this.props.rolePolicyStatements.forEach(policyStatement => {
                project.addToRolePolicy(policyStatement);
            });
        }
        this._project = project;
        (_e = this._dockerCredentials) === null || _e === void 0 ? void 0 : _e.forEach(reg => reg.grantRead(project.grantPrincipal, docker_credentials_1.DockerCredentialUsage.SYNTH));
        this._action = new codepipeline_actions.CodeBuildAction({
            actionName: this.actionProperties.actionName,
            input: this.props.sourceArtifact,
            outputs: [this.props.cloudAssemblyArtifact, ...((_f = this.props.additionalArtifacts) !== null && _f !== void 0 ? _f : []).map(a => a.artifact)],
            // Inclusion of the hash here will lead to the pipeline structure for any changes
            // made the config of the underlying CodeBuild Project.
            // Hence, the pipeline will be restarted. This is necessary if the users
            // adds (for example) build or test commands to the buildspec.
            environmentVariables: {
                ...this.props.environmentVariables,
                _PROJECT_CONFIG_HASH: { value: projectConfigHash },
            },
            project,
        });
        this._actionProperties = this._action.actionProperties;
        return this._action.bind(scope, stage, options);
        function renderArtifacts(self) {
            // save the generated files in the output artifact
            // This part of the buildspec has to look completely different depending on whether we're
            // using secondary artifacts or not.
            var _b;
            const cloudAsmArtifactSpec = {
                'base-directory': fs_1.toPosixPath(path.join((_b = self.props.subdirectory) !== null && _b !== void 0 ? _b : '.', DEFAULT_OUTPUT_DIR)),
                'files': '**/*',
            };
            if (self.props.additionalArtifacts) {
                const secondary = {};
                if (!self.props.cloudAssemblyArtifact.artifactName) {
                    throw new Error('When using additional output artifacts, you must also name the CloudAssembly artifact');
                }
                secondary[self.props.cloudAssemblyArtifact.artifactName] = cloudAsmArtifactSpec;
                self.props.additionalArtifacts.forEach((art) => {
                    var _b;
                    if (!art.artifact.artifactName) {
                        throw new Error('You must give the output artifact a name');
                    }
                    secondary[art.artifact.artifactName] = {
                        'base-directory': fs_1.toPosixPath(path.join((_b = self.props.subdirectory) !== null && _b !== void 0 ? _b : '.', art.directory)),
                        'files': '**/*',
                    };
                });
                return { 'secondary-artifacts': secondary };
            }
            return cloudAsmArtifactSpec;
        }
    }
    /**
     * The CodeBuild Project's principal
     */
    get grantPrincipal() {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.SimpleSynthAction#grantPrincipal", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, jsiiDeprecationWarnings.getPropertyDescriptor(this, "grantPrincipal").get);
            }
            throw error;
        }
        return this.project.grantPrincipal;
    }
    /**
     * Exists to implement IAction
     */
    onStateChange(name, target, options) {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/pipelines.SimpleSynthAction#onStateChange", "This class is part of the old API. Use the API based on the `CodePipeline` class instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.onStateChange);
            }
            throw error;
        }
        if (!this._action) {
            throw new Error('Need bind() first');
        }
        return this._action.onStateChange(name, target, options);
    }
    /**
     * Associate one or more Docker registries and associated credentials with the synth action.
     * This will be used to inject installation commands to set up `cdk-assets`,
     * and grant read access to the credentials.
     * @internal
     */
    _addDockerCredentials(dockerCredentials) {
        this._dockerCredentials = dockerCredentials;
    }
}
exports.SimpleSynthAction = SimpleSynthAction;
_a = JSII_RTTI_SYMBOL_1;
SimpleSynthAction[_a] = { fqn: "@aws-cdk/pipelines.SimpleSynthAction", version: "1.153.1" };
function hash(obj) {
    const d = crypto.createHash('sha256');
    d.update(JSON.stringify(obj));
    return d.digest('hex');
}
/**
 * Serialize a build environment to data (get rid of constructs & objects), so we can JSON.stringify it
 */
function serializeBuildEnvironment(env) {
    var _b, _c, _d, _e, _f;
    return {
        privileged: env.privileged,
        environmentVariables: env.environmentVariables,
        type: (_b = env.buildImage) === null || _b === void 0 ? void 0 : _b.type,
        imageId: (_c = env.buildImage) === null || _c === void 0 ? void 0 : _c.imageId,
        computeType: env.computeType,
        imagePullPrincipalType: (_d = env.buildImage) === null || _d === void 0 ? void 0 : _d.imagePullPrincipalType,
        secretsManagerArn: (_f = (_e = env.buildImage) === null || _e === void 0 ? void 0 : _e.secretsManagerCredentials) === null || _f === void 0 ? void 0 : _f.secretArn,
    };
}
//# sourceMappingURL=data:application/json;base64,