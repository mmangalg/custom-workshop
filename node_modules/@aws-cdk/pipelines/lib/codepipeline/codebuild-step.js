"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeBuildStep = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const codebuild = require("@aws-cdk/aws-codebuild");
const blueprint_1 = require("../blueprint");
const buildspecs_1 = require("./private/buildspecs");
const outputs_1 = require("./private/outputs");
/**
 * Run a script as a CodeBuild Project
 *
 * The BuildSpec must be available inline--it cannot reference a file
 * on disk. If your current build instructions are in a file like
 * `buildspec.yml` in your repository, extract them to a script
 * (say, `build.sh`) and invoke that script as part of the build:
 *
 * ```ts
 * new pipelines.CodeBuildStep('Synth', {
 *   commands: ['./build.sh'],
 * });
 * ```
 */
class CodeBuildStep extends blueprint_1.ShellStep {
    constructor(id, props) {
        super(id, props);
        this.exportedVariables = new Set();
        this.exportedVarsRendered = false;
        try {
            jsiiDeprecationWarnings._aws_cdk_pipelines_CodeBuildStepProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.constructor);
            }
            throw error;
        }
        this.projectName = props.projectName;
        this.buildEnvironment = props.buildEnvironment;
        this._partialBuildSpec = props.partialBuildSpec;
        this.vpc = props.vpc;
        this.subnetSelection = props.subnetSelection;
        this.role = props.role;
        this.rolePolicyStatements = props.rolePolicyStatements;
        this.securityGroups = props.securityGroups;
        this.timeout = props.timeout;
    }
    /**
     * CodeBuild Project generated for the pipeline
     *
     * Will only be available after the pipeline has been built.
     */
    get project() {
        if (!this._project) {
            throw new Error('Call pipeline.buildPipeline() before reading this property');
        }
        return this._project;
    }
    /**
     * The CodeBuild Project's principal
     */
    get grantPrincipal() {
        return this.project.grantPrincipal;
    }
    /**
     * Additional configuration that can only be configured via BuildSpec
     *
     * Contains exported variables
     *
     * @default - Contains the exported variables
     */
    get partialBuildSpec() {
        this.exportedVarsRendered = true;
        const varsBuildSpec = this.exportedVariables.size > 0 ? codebuild.BuildSpec.fromObject({
            version: '0.2',
            env: {
                'exported-variables': Array.from(this.exportedVariables),
            },
        }) : undefined;
        return buildspecs_1.mergeBuildSpecs(varsBuildSpec, this._partialBuildSpec);
    }
    /**
     * Reference a CodePipeline variable defined by the CodeBuildStep.
     *
     * The variable must be set in the shell of the CodeBuild step when
     * it finishes its `post_build` phase.
     *
     * @param variableName the name of the variable for reference.
     * @example
     * // Access the output of one CodeBuildStep in another CodeBuildStep
     * declare const pipeline: pipelines.CodePipeline;
     *
     * const step1 = new pipelines.CodeBuildStep('Step1', {
     *   commands: ['export MY_VAR=hello'],
     * });
     *
     * const step2 = new pipelines.CodeBuildStep('Step2', {
     *   env: {
     *     IMPORTED_VAR: step1.exportedVariable('MY_VAR'),
     *   },
     *   commands: ['echo $IMPORTED_VAR'],
     * });
     */
    exportedVariable(variableName) {
        if (this.exportedVarsRendered && !this.exportedVariables.has(variableName)) {
            throw new Error('exportVariable(): Pipeline has already been produced, cannot call this function anymore');
        }
        this.exportedVariables.add(variableName);
        return outputs_1.makeCodePipelineOutput(this, variableName);
    }
    /**
     * Set the internal project value
     *
     * @internal
     */
    _setProject(project) {
        this._project = project;
    }
}
exports.CodeBuildStep = CodeBuildStep;
_a = JSII_RTTI_SYMBOL_1;
CodeBuildStep[_a] = { fqn: "@aws-cdk/pipelines.CodeBuildStep", version: "1.153.1" };
//# sourceMappingURL=data:application/json;base64,