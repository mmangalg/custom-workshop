"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodePipelineFileSet = exports.ArtifactMap = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const crypto = require("crypto");
const cp = require("@aws-cdk/aws-codepipeline");
const blueprint_1 = require("../blueprint");
const helpers_internal_1 = require("../helpers-internal");
/**
 * Translate FileSets to CodePipeline Artifacts
 */
class ArtifactMap {
    constructor() {
        this.artifacts = new Map();
        this.usedNames = new Set();
    }
    /**
     * Return the matching CodePipeline artifact for a FileSet
     */
    toCodePipeline(x) {
        try {
            jsiiDeprecationWarnings._aws_cdk_pipelines_FileSet(x);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.toCodePipeline);
            }
            throw error;
        }
        if (x instanceof CodePipelineFileSet) {
            return x._artifact;
        }
        let ret = this.artifacts.get(x);
        if (!ret) {
            // They all need a name
            const artifactName = this.makeUniqueName(`${x.producer.id}.${x.id}`);
            this.usedNames.add(artifactName);
            this.artifacts.set(x, ret = new cp.Artifact(artifactName));
        }
        return ret;
    }
    makeUniqueName(baseName) {
        let i = 1;
        baseName = sanitizeArtifactName(baseName);
        let name = baseName;
        while (this.usedNames.has(name)) {
            name = `${baseName}${++i}`;
        }
        return name;
    }
}
exports.ArtifactMap = ArtifactMap;
_a = JSII_RTTI_SYMBOL_1;
ArtifactMap[_a] = { fqn: "@aws-cdk/pipelines.ArtifactMap", version: "1.153.1" };
/**
 * Sanitize a string to be a valid artifact name
 *
 * This must comport to both the rules of artifacts in CodePipeline, as well
 * as the names of Source Identifiers in CodeBuild.
 *
 * Artifact Name limits aren't documented.
 *
 * Source Identifier limits are documented here:
 * https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ProjectSource.html#CodeBuild-Type-ProjectSource-sourceIdentifier
 */
function sanitizeArtifactName(x) {
    let sani = x.replace(/[^A-Za-z0-9_]/g, '_'); // Charset requirement is imposed by CodeBuild
    const maxLength = 100; // Max length of 100 is imposed by CodePipeline library
    if (sani.length > maxLength) {
        const fingerprint = crypto.createHash('sha256').update(sani).digest('hex').slice(0, 8);
        sani = sani.slice(0, maxLength - fingerprint.length) + fingerprint;
    }
    return sani;
}
/**
 * A FileSet created from a CodePipeline artifact
 *
 * You only need to use this if you want to add CDK Pipeline stages
 * add the end of an existing CodePipeline, which should be very rare.
 */
class CodePipelineFileSet extends blueprint_1.FileSet {
    constructor(artifact) {
        var _c;
        super((_c = artifact.artifactName) !== null && _c !== void 0 ? _c : 'Imported', helpers_internal_1.PipelineGraph.NO_STEP);
        this._artifact = artifact;
    }
    /**
     * Turn a CodePipeline Artifact into a FileSet
     */
    static fromArtifact(artifact) {
        return new CodePipelineFileSet(artifact);
    }
}
exports.CodePipelineFileSet = CodePipelineFileSet;
_b = JSII_RTTI_SYMBOL_1;
CodePipelineFileSet[_b] = { fqn: "@aws-cdk/pipelines.CodePipelineFileSet", version: "1.153.1" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aWZhY3QtbWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXJ0aWZhY3QtbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGlDQUFpQztBQUNqQyxnREFBZ0Q7QUFDaEQsNENBQXVDO0FBQ3ZDLDBEQUFvRDtBQUVwRDs7R0FFRztBQUNILE1BQWEsV0FBVztJQUF4QjtRQUNVLGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBd0IsQ0FBQztRQUM1QyxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztLQTZCdkM7SUEzQkM7O09BRUc7SUFDSSxjQUFjLENBQUMsQ0FBVTs7Ozs7Ozs7OztRQUM5QixJQUFJLENBQUMsWUFBWSxtQkFBbUIsRUFBRTtZQUNwQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7U0FDcEI7UUFFRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsdUJBQXVCO1lBQ3ZCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNyRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsT0FBTyxHQUFHLENBQUM7S0FDWjtJQUVPLGNBQWMsQ0FBQyxRQUFnQjtRQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixRQUFRLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0IsSUFBSSxHQUFHLEdBQUcsUUFBUSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDNUI7UUFDRCxPQUFPLElBQUksQ0FBQztLQUNiOztBQTlCSCxrQ0ErQkM7OztBQUVEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxTQUFTLG9CQUFvQixDQUFDLENBQVM7SUFDckMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLDhDQUE4QztJQUMzRixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsQ0FBQyx1REFBdUQ7SUFFOUUsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsRUFBRTtRQUMzQixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLENBQUM7S0FDcEU7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQWEsbUJBQW9CLFNBQVEsbUJBQU87SUFlOUMsWUFBb0IsUUFBcUI7O1FBQ3ZDLEtBQUssT0FBQyxRQUFRLENBQUMsWUFBWSxtQ0FBSSxVQUFVLEVBQUUsZ0NBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztLQUMzQjtJQWpCRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBcUI7UUFDOUMsT0FBTyxJQUFJLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzFDOztBQU5ILGtEQW1CQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0ICogYXMgY3AgZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZSc7XG5pbXBvcnQgeyBGaWxlU2V0IH0gZnJvbSAnLi4vYmx1ZXByaW50JztcbmltcG9ydCB7IFBpcGVsaW5lR3JhcGggfSBmcm9tICcuLi9oZWxwZXJzLWludGVybmFsJztcblxuLyoqXG4gKiBUcmFuc2xhdGUgRmlsZVNldHMgdG8gQ29kZVBpcGVsaW5lIEFydGlmYWN0c1xuICovXG5leHBvcnQgY2xhc3MgQXJ0aWZhY3RNYXAge1xuICBwcml2YXRlIGFydGlmYWN0cyA9IG5ldyBNYXA8RmlsZVNldCwgY3AuQXJ0aWZhY3Q+KCk7XG4gIHByaXZhdGUgdXNlZE5hbWVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbWF0Y2hpbmcgQ29kZVBpcGVsaW5lIGFydGlmYWN0IGZvciBhIEZpbGVTZXRcbiAgICovXG4gIHB1YmxpYyB0b0NvZGVQaXBlbGluZSh4OiBGaWxlU2V0KTogY3AuQXJ0aWZhY3Qge1xuICAgIGlmICh4IGluc3RhbmNlb2YgQ29kZVBpcGVsaW5lRmlsZVNldCkge1xuICAgICAgcmV0dXJuIHguX2FydGlmYWN0O1xuICAgIH1cblxuICAgIGxldCByZXQgPSB0aGlzLmFydGlmYWN0cy5nZXQoeCk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIC8vIFRoZXkgYWxsIG5lZWQgYSBuYW1lXG4gICAgICBjb25zdCBhcnRpZmFjdE5hbWUgPSB0aGlzLm1ha2VVbmlxdWVOYW1lKGAke3gucHJvZHVjZXIuaWR9LiR7eC5pZH1gKTtcbiAgICAgIHRoaXMudXNlZE5hbWVzLmFkZChhcnRpZmFjdE5hbWUpO1xuICAgICAgdGhpcy5hcnRpZmFjdHMuc2V0KHgsIHJldCA9IG5ldyBjcC5BcnRpZmFjdChhcnRpZmFjdE5hbWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHByaXZhdGUgbWFrZVVuaXF1ZU5hbWUoYmFzZU5hbWU6IHN0cmluZykge1xuICAgIGxldCBpID0gMTtcbiAgICBiYXNlTmFtZSA9IHNhbml0aXplQXJ0aWZhY3ROYW1lKGJhc2VOYW1lKTtcbiAgICBsZXQgbmFtZSA9IGJhc2VOYW1lO1xuICAgIHdoaWxlICh0aGlzLnVzZWROYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgIG5hbWUgPSBgJHtiYXNlTmFtZX0keysraX1gO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbiAgfVxufVxuXG4vKipcbiAqIFNhbml0aXplIGEgc3RyaW5nIHRvIGJlIGEgdmFsaWQgYXJ0aWZhY3QgbmFtZVxuICpcbiAqIFRoaXMgbXVzdCBjb21wb3J0IHRvIGJvdGggdGhlIHJ1bGVzIG9mIGFydGlmYWN0cyBpbiBDb2RlUGlwZWxpbmUsIGFzIHdlbGxcbiAqIGFzIHRoZSBuYW1lcyBvZiBTb3VyY2UgSWRlbnRpZmllcnMgaW4gQ29kZUJ1aWxkLlxuICpcbiAqIEFydGlmYWN0IE5hbWUgbGltaXRzIGFyZW4ndCBkb2N1bWVudGVkLlxuICpcbiAqIFNvdXJjZSBJZGVudGlmaWVyIGxpbWl0cyBhcmUgZG9jdW1lbnRlZCBoZXJlOlxuICogaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NvZGVidWlsZC9sYXRlc3QvQVBJUmVmZXJlbmNlL0FQSV9Qcm9qZWN0U291cmNlLmh0bWwjQ29kZUJ1aWxkLVR5cGUtUHJvamVjdFNvdXJjZS1zb3VyY2VJZGVudGlmaWVyXG4gKi9cbmZ1bmN0aW9uIHNhbml0aXplQXJ0aWZhY3ROYW1lKHg6IHN0cmluZyk6IHN0cmluZyB7XG4gIGxldCBzYW5pID0geC5yZXBsYWNlKC9bXkEtWmEtejAtOV9dL2csICdfJyk7IC8vIENoYXJzZXQgcmVxdWlyZW1lbnQgaXMgaW1wb3NlZCBieSBDb2RlQnVpbGRcbiAgY29uc3QgbWF4TGVuZ3RoID0gMTAwOyAvLyBNYXggbGVuZ3RoIG9mIDEwMCBpcyBpbXBvc2VkIGJ5IENvZGVQaXBlbGluZSBsaWJyYXJ5XG5cbiAgaWYgKHNhbmkubGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgY29uc3QgZmluZ2VycHJpbnQgPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHNhbmkpLmRpZ2VzdCgnaGV4Jykuc2xpY2UoMCwgOCk7XG4gICAgc2FuaSA9IHNhbmkuc2xpY2UoMCwgbWF4TGVuZ3RoIC0gZmluZ2VycHJpbnQubGVuZ3RoKSArIGZpbmdlcnByaW50O1xuICB9XG5cbiAgcmV0dXJuIHNhbmk7XG59XG5cbi8qKlxuICogQSBGaWxlU2V0IGNyZWF0ZWQgZnJvbSBhIENvZGVQaXBlbGluZSBhcnRpZmFjdFxuICpcbiAqIFlvdSBvbmx5IG5lZWQgdG8gdXNlIHRoaXMgaWYgeW91IHdhbnQgdG8gYWRkIENESyBQaXBlbGluZSBzdGFnZXNcbiAqIGFkZCB0aGUgZW5kIG9mIGFuIGV4aXN0aW5nIENvZGVQaXBlbGluZSwgd2hpY2ggc2hvdWxkIGJlIHZlcnkgcmFyZS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvZGVQaXBlbGluZUZpbGVTZXQgZXh0ZW5kcyBGaWxlU2V0IHtcbiAgLyoqXG4gICAqIFR1cm4gYSBDb2RlUGlwZWxpbmUgQXJ0aWZhY3QgaW50byBhIEZpbGVTZXRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUFydGlmYWN0KGFydGlmYWN0OiBjcC5BcnRpZmFjdCkge1xuICAgIHJldHVybiBuZXcgQ29kZVBpcGVsaW5lRmlsZVNldChhcnRpZmFjdCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGFydGlmYWN0IHRoaXMgY2xhc3MgaXMgd3JhcHBpbmdcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgX2FydGlmYWN0OiBjcC5BcnRpZmFjdDtcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKGFydGlmYWN0OiBjcC5BcnRpZmFjdCkge1xuICAgIHN1cGVyKGFydGlmYWN0LmFydGlmYWN0TmFtZSA/PyAnSW1wb3J0ZWQnLCBQaXBlbGluZUdyYXBoLk5PX1NURVApO1xuICAgIHRoaXMuX2FydGlmYWN0ID0gYXJ0aWZhY3Q7XG4gIH1cbn0iXX0=