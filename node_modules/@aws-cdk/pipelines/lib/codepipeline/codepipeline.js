"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodePipeline = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("path");
const cb = require("@aws-cdk/aws-codebuild");
const cp = require("@aws-cdk/aws-codepipeline");
const cpa = require("@aws-cdk/aws-codepipeline-actions");
const iam = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const cxapi = require("@aws-cdk/cx-api");
const constructs_1 = require("constructs");
const blueprint_1 = require("../blueprint");
const docker_credentials_1 = require("../docker-credentials");
const helpers_internal_1 = require("../helpers-internal");
const main_1 = require("../main");
const asset_singleton_role_1 = require("../private/asset-singleton-role");
const cli_version_1 = require("../private/cli-version");
const construct_internals_1 = require("../private/construct-internals");
const fs_1 = require("../private/fs");
const identifiers_1 = require("../private/identifiers");
const javascript_1 = require("../private/javascript");
const template_configuration_1 = require("../private/template-configuration");
const artifact_map_1 = require("./artifact-map");
const codebuild_step_1 = require("./codebuild-step");
const codebuild_factory_1 = require("./private/codebuild-factory");
const outputs_1 = require("./private/outputs");
/**
 * A CDK Pipeline that uses CodePipeline to deploy CDK apps
 *
 * This is a `Pipeline` with its `engine` property set to
 * `CodePipelineEngine`, and exists for nicer ergonomics for
 * users that don't need to switch out engines.
 */
class CodePipeline extends main_1.PipelineBase {
    constructor(scope, id, props) {
        var _b, _c, _d, _e;
        super(scope, id, props);
        this.props = props;
        this.artifacts = new artifact_map_1.ArtifactMap();
        /**
         * Asset roles shared for publishing
         */
        this.assetCodeBuildRoles = {};
        /**
         * Per asset type, the target role ARNs that need to be assumed
         */
        this.assetPublishingRoles = {};
        try {
            jsiiDeprecationWarnings._aws_cdk_pipelines_CodePipelineProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.constructor);
            }
            throw error;
        }
        this.selfMutation = (_b = props.selfMutation) !== null && _b !== void 0 ? _b : true;
        this.dockerCredentials = (_c = props.dockerCredentials) !== null && _c !== void 0 ? _c : [];
        this.singlePublisherPerAssetType = !((_d = props.publishAssetsInParallel) !== null && _d !== void 0 ? _d : true);
        this.cliVersion = (_e = props.cliVersion) !== null && _e !== void 0 ? _e : cli_version_1.preferredCliVersion();
    }
    /**
     * The CodeBuild project that performs the Synth
     *
     * Only available after the pipeline has been built.
     */
    get synthProject() {
        if (!this._synthProject) {
            throw new Error('Call pipeline.buildPipeline() before reading this property');
        }
        return this._synthProject;
    }
    /**
     * The CodePipeline pipeline that deploys the CDK app
     *
     * Only available after the pipeline has been built.
     */
    get pipeline() {
        if (!this._pipeline) {
            throw new Error('Pipeline not created yet');
        }
        return this._pipeline;
    }
    doBuildPipeline() {
        var _b;
        if (this._pipeline) {
            throw new Error('Pipeline already created');
        }
        this._myCxAsmRoot = path.resolve(construct_internals_1.assemblyBuilderOf(construct_internals_1.appOf(this)).outdir);
        if (this.props.codePipeline) {
            if (this.props.pipelineName) {
                throw new Error('Cannot set \'pipelineName\' if an existing CodePipeline is given using \'codePipeline\'');
            }
            if (this.props.crossAccountKeys !== undefined) {
                throw new Error('Cannot set \'crossAccountKeys\' if an existing CodePipeline is given using \'codePipeline\'');
            }
            this._pipeline = this.props.codePipeline;
        }
        else {
            this._pipeline = new cp.Pipeline(this, 'Pipeline', {
                pipelineName: this.props.pipelineName,
                crossAccountKeys: (_b = this.props.crossAccountKeys) !== null && _b !== void 0 ? _b : false,
                reuseCrossRegionSupportStacks: this.props.reuseCrossRegionSupportStacks,
                // This is necessary to make self-mutation work (deployments are guaranteed
                // to happen only after the builds of the latest pipeline definition).
                restartExecutionOnUpdate: true,
            });
        }
        const graphFromBp = new helpers_internal_1.PipelineGraph(this, {
            selfMutation: this.selfMutation,
            singlePublisherPerAssetType: this.singlePublisherPerAssetType,
        });
        this._cloudAssemblyFileSet = graphFromBp.cloudAssemblyFileSet;
        this.pipelineStagesAndActionsFromGraph(graphFromBp);
    }
    get myCxAsmRoot() {
        if (!this._myCxAsmRoot) {
            throw new Error('Can\'t read \'myCxAsmRoot\' if build deployment not called yet');
        }
        return this._myCxAsmRoot;
    }
    /**
     * Scope for Assets-related resources.
     *
     * Purely exists for construct tree backwards compatibility with legacy pipelines
     */
    get assetsScope() {
        return construct_internals_1.obtainScope(this, 'Assets');
    }
    pipelineStagesAndActionsFromGraph(structure) {
        var _b, _c;
        // Translate graph into Pipeline Stages and Actions
        let beforeSelfMutation = this.selfMutation;
        for (const stageNode of javascript_1.flatten(structure.graph.sortedChildren())) {
            if (!helpers_internal_1.isGraph(stageNode)) {
                throw new Error(`Top-level children must be graphs, got '${stageNode}'`);
            }
            // Group our ordered tranches into blocks of 50.
            // We can map these onto stages without exceeding the capacity of a Stage.
            const chunks = chunkTranches(50, stageNode.sortedLeaves());
            const actionsOverflowStage = chunks.length > 1;
            for (const [i, tranches] of javascript_1.enumerate(chunks)) {
                const stageName = actionsOverflowStage ? `${stageNode.id}.${i + 1}` : stageNode.id;
                const pipelineStage = this.pipeline.addStage({ stageName });
                const sharedParent = new helpers_internal_1.GraphNodeCollection(javascript_1.flatten(tranches)).commonAncestor();
                let runOrder = 1;
                for (const tranche of tranches) {
                    const runOrdersConsumed = [0];
                    for (const node of tranche) {
                        const factory = this.actionFromNode(node);
                        const nodeType = this.nodeTypeFromNode(node);
                        const name = identifiers_1.actionName(node, sharedParent);
                        const variablesNamespace = ((_b = node.data) === null || _b === void 0 ? void 0 : _b.type) === 'step'
                            ? outputs_1.namespaceStepOutputs(node.data.step, pipelineStage, name)
                            : undefined;
                        const result = factory.produceAction(pipelineStage, {
                            actionName: name,
                            runOrder,
                            artifacts: this.artifacts,
                            scope: construct_internals_1.obtainScope(this.pipeline, stageName),
                            fallbackArtifact: this._fallbackArtifact,
                            pipeline: this,
                            // If this step happens to produce a CodeBuild job, set the default options
                            codeBuildDefaults: nodeType ? this.codeBuildDefaultsFor(nodeType) : undefined,
                            beforeSelfMutation,
                            variablesNamespace,
                        });
                        if (((_c = node.data) === null || _c === void 0 ? void 0 : _c.type) === 'self-update') {
                            beforeSelfMutation = false;
                        }
                        this.postProcessNode(node, result);
                        runOrdersConsumed.push(result.runOrdersConsumed);
                    }
                    runOrder += Math.max(...runOrdersConsumed);
                }
            }
        }
    }
    /**
     * Do additional things after the action got added to the pipeline
     *
     * Some minor state manipulation of CodeBuild projects and pipeline
     * artifacts.
     */
    postProcessNode(node, result) {
        var _b, _c, _d;
        const nodeType = this.nodeTypeFromNode(node);
        if (result.project) {
            const dockerUsage = dockerUsageFromCodeBuild(nodeType !== null && nodeType !== void 0 ? nodeType : CodeBuildProjectType.STEP);
            if (dockerUsage) {
                for (const c of this.dockerCredentials) {
                    c.grantRead(result.project, dockerUsage);
                }
            }
            if (nodeType === CodeBuildProjectType.SYNTH) {
                this._synthProject = result.project;
            }
        }
        if (((_b = node.data) === null || _b === void 0 ? void 0 : _b.type) === 'step' && ((_c = node.data.step.primaryOutput) === null || _c === void 0 ? void 0 : _c.primaryOutput) && !this._fallbackArtifact) {
            this._fallbackArtifact = this.artifacts.toCodePipeline((_d = node.data.step.primaryOutput) === null || _d === void 0 ? void 0 : _d.primaryOutput);
        }
    }
    /**
     * Make an action from the given node and/or step
     */
    actionFromNode(node) {
        var _b, _c;
        switch ((_b = node.data) === null || _b === void 0 ? void 0 : _b.type) {
            // Nothing for these, they are groupings (shouldn't even have popped up here)
            case 'group':
            case 'stack-group':
            case undefined:
                throw new Error(`actionFromNode: did not expect to get group nodes: ${(_c = node.data) === null || _c === void 0 ? void 0 : _c.type}`);
            case 'self-update':
                return this.selfMutateAction();
            case 'publish-assets':
                return this.publishAssetsAction(node, node.data.assets);
            case 'prepare':
                return this.createChangeSetAction(node.data.stack);
            case 'execute':
                return this.executeChangeSetAction(node.data.stack, node.data.captureOutputs);
            case 'step':
                return this.actionFromStep(node, node.data.step);
        }
    }
    /**
     * Take a Step and turn it into a CodePipeline Action
     *
     * There are only 3 types of Steps we need to support:
     *
     * - Shell (generic)
     * - ManualApproval (generic)
     * - CodePipelineActionFactory (CodePipeline-specific)
     *
     * The rest is expressed in terms of these 3, or in terms of graph nodes
     * which are handled elsewhere.
     */
    actionFromStep(node, step) {
        const nodeType = this.nodeTypeFromNode(node);
        // CodePipeline-specific steps first -- this includes Sources
        if (isCodePipelineActionFactory(step)) {
            return step;
        }
        // Now built-in steps
        if (step instanceof blueprint_1.ShellStep || step instanceof codebuild_step_1.CodeBuildStep) {
            // The 'CdkBuildProject' will be the construct ID of the CodeBuild project, necessary for backwards compat
            let constructId = nodeType === CodeBuildProjectType.SYNTH
                ? 'CdkBuildProject'
                : step.id;
            return step instanceof codebuild_step_1.CodeBuildStep
                ? codebuild_factory_1.CodeBuildFactory.fromCodeBuildStep(constructId, step)
                : codebuild_factory_1.CodeBuildFactory.fromShellStep(constructId, step);
        }
        if (step instanceof blueprint_1.ManualApprovalStep) {
            return {
                produceAction: (stage, options) => {
                    stage.addAction(new cpa.ManualApprovalAction({
                        actionName: options.actionName,
                        runOrder: options.runOrder,
                        additionalInformation: step.comment,
                    }));
                    return { runOrdersConsumed: 1 };
                },
            };
        }
        throw new Error(`Deployment step '${step}' is not supported for CodePipeline-backed pipelines`);
    }
    createChangeSetAction(stack) {
        const changeSetName = 'PipelineChange';
        const templateArtifact = this.artifacts.toCodePipeline(this._cloudAssemblyFileSet);
        const templateConfigurationPath = this.writeTemplateConfiguration(stack);
        const region = stack.region !== core_1.Stack.of(this).region ? stack.region : undefined;
        const account = stack.account !== core_1.Stack.of(this).account ? stack.account : undefined;
        const relativeTemplatePath = path.relative(this.myCxAsmRoot, stack.absoluteTemplatePath);
        return {
            produceAction: (stage, options) => {
                stage.addAction(new cpa.CloudFormationCreateReplaceChangeSetAction({
                    actionName: options.actionName,
                    runOrder: options.runOrder,
                    changeSetName,
                    stackName: stack.stackName,
                    templatePath: templateArtifact.atPath(fs_1.toPosixPath(relativeTemplatePath)),
                    adminPermissions: true,
                    role: this.roleFromPlaceholderArn(this.pipeline, region, account, stack.assumeRoleArn),
                    deploymentRole: this.roleFromPlaceholderArn(this.pipeline, region, account, stack.executionRoleArn),
                    region: region,
                    templateConfiguration: templateConfigurationPath
                        ? templateArtifact.atPath(fs_1.toPosixPath(templateConfigurationPath))
                        : undefined,
                    cfnCapabilities: [core_1.CfnCapabilities.NAMED_IAM, core_1.CfnCapabilities.AUTO_EXPAND],
                }));
                return { runOrdersConsumed: 1 };
            },
        };
    }
    executeChangeSetAction(stack, captureOutputs) {
        const changeSetName = 'PipelineChange';
        const region = stack.region !== core_1.Stack.of(this).region ? stack.region : undefined;
        const account = stack.account !== core_1.Stack.of(this).account ? stack.account : undefined;
        return {
            produceAction: (stage, options) => {
                stage.addAction(new cpa.CloudFormationExecuteChangeSetAction({
                    actionName: options.actionName,
                    runOrder: options.runOrder,
                    changeSetName,
                    stackName: stack.stackName,
                    role: this.roleFromPlaceholderArn(this.pipeline, region, account, stack.assumeRoleArn),
                    region: region,
                    variablesNamespace: captureOutputs ? identifiers_1.stackVariableNamespace(stack) : undefined,
                }));
                return { runOrdersConsumed: 1 };
            },
        };
    }
    selfMutateAction() {
        var _b;
        const installSuffix = this.cliVersion ? `@${this.cliVersion}` : '';
        const pipelineStack = core_1.Stack.of(this.pipeline);
        const pipelineStackIdentifier = (_b = pipelineStack.node.path) !== null && _b !== void 0 ? _b : pipelineStack.stackName;
        const step = new codebuild_step_1.CodeBuildStep('SelfMutate', {
            projectName: javascript_1.maybeSuffix(this.props.pipelineName, '-selfupdate'),
            input: this._cloudAssemblyFileSet,
            installCommands: [
                `npm install -g aws-cdk${installSuffix}`,
            ],
            commands: [
                `cdk -a ${fs_1.toPosixPath(construct_internals_1.embeddedAsmPath(this.pipeline))} deploy ${pipelineStackIdentifier} --require-approval=never --verbose`,
            ],
            rolePolicyStatements: [
                // allow the self-mutating project permissions to assume the bootstrap Action role
                new iam.PolicyStatement({
                    actions: ['sts:AssumeRole'],
                    resources: [`arn:*:iam::${core_1.Stack.of(this.pipeline).account}:role/*`],
                    conditions: {
                        'ForAnyValue:StringEquals': {
                            'iam:ResourceTag/aws-cdk:bootstrap-role': ['image-publishing', 'file-publishing', 'deploy'],
                        },
                    },
                }),
                new iam.PolicyStatement({
                    actions: ['cloudformation:DescribeStacks'],
                    resources: ['*'],
                }),
                // S3 checks for the presence of the ListBucket permission
                new iam.PolicyStatement({
                    actions: ['s3:ListBucket'],
                    resources: ['*'],
                }),
            ],
        });
        // Different on purpose -- id needed for backwards compatible LogicalID
        return codebuild_factory_1.CodeBuildFactory.fromCodeBuildStep('SelfMutation', step, {
            additionalConstructLevel: false,
            scope: construct_internals_1.obtainScope(this, 'UpdatePipeline'),
        });
    }
    publishAssetsAction(node, assets) {
        var _b;
        const installSuffix = this.cliVersion ? `@${this.cliVersion}` : '';
        const commands = assets.map(asset => {
            const relativeAssetManifestPath = path.relative(this.myCxAsmRoot, asset.assetManifestPath);
            return `cdk-assets --path "${fs_1.toPosixPath(relativeAssetManifestPath)}" --verbose publish "${asset.assetSelector}"`;
        });
        const assetType = assets[0].assetType;
        if (assets.some(a => a.assetType !== assetType)) {
            throw new Error('All assets in a single publishing step must be of the same type');
        }
        const publishingRoles = this.assetPublishingRoles[assetType] = ((_b = this.assetPublishingRoles[assetType]) !== null && _b !== void 0 ? _b : new Set());
        for (const asset of assets) {
            if (asset.assetPublishingRoleArn) {
                publishingRoles.add(asset.assetPublishingRoleArn);
            }
        }
        const role = this.obtainAssetCodeBuildRole(assets[0].assetType);
        // The base commands that need to be run
        const script = new codebuild_step_1.CodeBuildStep(node.id, {
            commands,
            installCommands: [
                `npm install -g cdk-assets${installSuffix}`,
            ],
            input: this._cloudAssemblyFileSet,
            buildEnvironment: {
                privileged: assets.some(asset => asset.assetType === blueprint_1.AssetType.DOCKER_IMAGE),
            },
            role,
        });
        // Customizations that are not accessible to regular users
        return codebuild_factory_1.CodeBuildFactory.fromCodeBuildStep(node.id, script, {
            additionalConstructLevel: false,
            // If we use a single publisher, pass buildspec via file otherwise it'll
            // grow too big.
            passBuildSpecViaCloudAssembly: this.singlePublisherPerAssetType,
            scope: this.assetsScope,
        });
    }
    nodeTypeFromNode(node) {
        var _b, _c, _d, _e;
        if (((_b = node.data) === null || _b === void 0 ? void 0 : _b.type) === 'step') {
            return !!((_c = node.data) === null || _c === void 0 ? void 0 : _c.isBuildStep) ? CodeBuildProjectType.SYNTH : CodeBuildProjectType.STEP;
        }
        if (((_d = node.data) === null || _d === void 0 ? void 0 : _d.type) === 'publish-assets') {
            return CodeBuildProjectType.ASSETS;
        }
        if (((_e = node.data) === null || _e === void 0 ? void 0 : _e.type) === 'self-update') {
            return CodeBuildProjectType.SELF_MUTATE;
        }
        return undefined;
    }
    codeBuildDefaultsFor(nodeType) {
        const defaultOptions = {
            buildEnvironment: {
                buildImage: cb.LinuxBuildImage.STANDARD_5_0,
                computeType: cb.ComputeType.SMALL,
            },
        };
        const typeBasedCustomizations = {
            [CodeBuildProjectType.SYNTH]: this.props.dockerEnabledForSynth
                ? codebuild_factory_1.mergeCodeBuildOptions(this.props.synthCodeBuildDefaults, { buildEnvironment: { privileged: true } })
                : this.props.synthCodeBuildDefaults,
            [CodeBuildProjectType.ASSETS]: this.props.assetPublishingCodeBuildDefaults,
            [CodeBuildProjectType.SELF_MUTATE]: this.props.dockerEnabledForSelfMutation
                ? codebuild_factory_1.mergeCodeBuildOptions(this.props.selfMutationCodeBuildDefaults, { buildEnvironment: { privileged: true } })
                : this.props.selfMutationCodeBuildDefaults,
            [CodeBuildProjectType.STEP]: {},
        };
        const dockerUsage = dockerUsageFromCodeBuild(nodeType);
        const dockerCommands = dockerUsage !== undefined
            ? docker_credentials_1.dockerCredentialsInstallCommands(dockerUsage, this.dockerCredentials, 'both')
            : [];
        const typeBasedDockerCommands = dockerCommands.length > 0 ? {
            partialBuildSpec: cb.BuildSpec.fromObject({
                version: '0.2',
                phases: {
                    pre_build: {
                        commands: dockerCommands,
                    },
                },
            }),
        } : {};
        return codebuild_factory_1.mergeCodeBuildOptions(defaultOptions, this.props.codeBuildDefaults, typeBasedCustomizations[nodeType], typeBasedDockerCommands);
    }
    roleFromPlaceholderArn(scope, region, account, arn) {
        if (!arn) {
            return undefined;
        }
        // Use placeholder arn as construct ID.
        const id = arn;
        // https://github.com/aws/aws-cdk/issues/7255
        let existingRole = constructs_1.Node.of(scope).tryFindChild(`ImmutableRole${id}`);
        if (existingRole) {
            return existingRole;
        }
        // For when #7255 is fixed.
        existingRole = constructs_1.Node.of(scope).tryFindChild(id);
        if (existingRole) {
            return existingRole;
        }
        const arnToImport = cxapi.EnvironmentPlaceholders.replace(arn, {
            region: region !== null && region !== void 0 ? region : core_1.Aws.REGION,
            accountId: account !== null && account !== void 0 ? account : core_1.Aws.ACCOUNT_ID,
            partition: core_1.Aws.PARTITION,
        });
        return iam.Role.fromRoleArn(scope, id, arnToImport, { mutable: false, addGrantsToResources: true });
    }
    /**
     * Non-template config files for CodePipeline actions
     *
     * Currently only supports tags.
     */
    writeTemplateConfiguration(stack) {
        if (Object.keys(stack.tags).length === 0) {
            return undefined;
        }
        const absConfigPath = `${stack.absoluteTemplatePath}.config.json`;
        const relativeConfigPath = path.relative(this.myCxAsmRoot, absConfigPath);
        // Write the template configuration file (for parameters into CreateChangeSet call that
        // cannot be configured any other way). They must come from a file, and there's unfortunately
        // no better hook to write this file (`construct.onSynthesize()` would have been the prime candidate
        // but that is being deprecated--and DeployCdkStackAction isn't even a construct).
        template_configuration_1.writeTemplateConfiguration(absConfigPath, {
            Tags: javascript_1.noUndefined(stack.tags),
        });
        return relativeConfigPath;
    }
    /**
     * This role is used by both the CodePipeline build action and related CodeBuild project. Consolidating these two
     * roles into one, and re-using across all assets, saves significant size of the final synthesized output.
     * Modeled after the CodePipeline role and 'CodePipelineActionRole' roles.
     * Generates one role per asset type to separate file and Docker/image-based permissions.
     */
    obtainAssetCodeBuildRole(assetType) {
        if (this.assetCodeBuildRoles[assetType]) {
            return this.assetCodeBuildRoles[assetType];
        }
        const stack = core_1.Stack.of(this);
        const rolePrefix = assetType === blueprint_1.AssetType.DOCKER_IMAGE ? 'Docker' : 'File';
        const assetRole = new asset_singleton_role_1.AssetSingletonRole(this.assetsScope, `${rolePrefix}Role`, {
            roleName: core_1.PhysicalName.GENERATE_IF_NEEDED,
            assumedBy: new iam.CompositePrincipal(new iam.ServicePrincipal('codebuild.amazonaws.com'), new iam.AccountPrincipal(stack.account)),
        });
        // Publishing role access
        // The ARNs include raw AWS pseudo parameters (e.g., ${AWS::Partition}), which need to be substituted.
        // Lazy-evaluated so all asset publishing roles are included.
        assetRole.addToPolicy(new iam.PolicyStatement({
            actions: ['sts:AssumeRole'],
            resources: core_1.Lazy.list({ produce: () => { var _b; return Array.from((_b = this.assetPublishingRoles[assetType]) !== null && _b !== void 0 ? _b : []).map(arn => core_1.Fn.sub(arn)); } }),
        }));
        // Grant pull access for any ECR registries and secrets that exist
        if (assetType === blueprint_1.AssetType.DOCKER_IMAGE) {
            this.dockerCredentials.forEach(reg => reg.grantRead(assetRole, docker_credentials_1.DockerCredentialUsage.ASSET_PUBLISHING));
        }
        this.assetCodeBuildRoles[assetType] = assetRole;
        return assetRole;
    }
}
exports.CodePipeline = CodePipeline;
_a = JSII_RTTI_SYMBOL_1;
CodePipeline[_a] = { fqn: "@aws-cdk/pipelines.CodePipeline", version: "1.153.1" };
function dockerUsageFromCodeBuild(cbt) {
    switch (cbt) {
        case CodeBuildProjectType.ASSETS: return docker_credentials_1.DockerCredentialUsage.ASSET_PUBLISHING;
        case CodeBuildProjectType.SELF_MUTATE: return docker_credentials_1.DockerCredentialUsage.SELF_UPDATE;
        case CodeBuildProjectType.SYNTH: return docker_credentials_1.DockerCredentialUsage.SYNTH;
        case CodeBuildProjectType.STEP: return undefined;
    }
}
var CodeBuildProjectType;
(function (CodeBuildProjectType) {
    CodeBuildProjectType["SYNTH"] = "SYNTH";
    CodeBuildProjectType["ASSETS"] = "ASSETS";
    CodeBuildProjectType["SELF_MUTATE"] = "SELF_MUTATE";
    CodeBuildProjectType["STEP"] = "STEP";
})(CodeBuildProjectType || (CodeBuildProjectType = {}));
/**
 * Take a set of tranches and split them up into groups so
 * that no set of tranches has more than n items total
 */
function chunkTranches(n, xss) {
    const ret = [];
    while (xss.length > 0) {
        const tranches = [];
        let count = 0;
        while (xss.length > 0) {
            const xs = xss[0];
            const spaceRemaining = n - count;
            if (xs.length <= spaceRemaining) {
                tranches.push(xs);
                count += xs.length;
                xss.shift();
            }
            else {
                tranches.push(xs.splice(0, spaceRemaining));
                count = n;
                break;
            }
        }
        ret.push(tranches);
    }
    return ret;
}
function isCodePipelineActionFactory(x) {
    return !!x.produceAction;
}
//# sourceMappingURL=data:application/json;base64,