{
  "version": "2",
  "toolVersion": "1.55.1",
  "snippets": {
    "e449651a6e9445951475f4c8e9ac676868ae681c4bf203c35e5adc1eca4d425c": {
      "translations": {
        "python": {
          "source": "# provisiong a cluster\ncluster = eks.Cluster(self, \"hello-eks\",\n    version=eks.KubernetesVersion.V1_22\n)\n\n# apply a kubernetes manifest to the cluster\ncluster.add_manifest(\"mypod\", {\n    \"api_version\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\"name\": \"mypod\"},\n    \"spec\": {\n        \"containers\": [{\n            \"name\": \"hello\",\n            \"image\": \"paulbouwer/hello-kubernetes:1.5\",\n            \"ports\": [{\"container_port\": 8080}]\n        }\n        ]\n    }\n})",
          "version": "2"
        },
        "csharp": {
          "source": "// provisiong a cluster\nCluster cluster = new Cluster(this, \"hello-eks\", new ClusterProps {\n    Version = KubernetesVersion.V1_22\n});\n\n// apply a kubernetes manifest to the cluster\ncluster.AddManifest(\"mypod\", new Dictionary<string, object> {\n    { \"apiVersion\", \"v1\" },\n    { \"kind\", \"Pod\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"mypod\" } } },\n    { \"spec\", new Dictionary<string, IDictionary<string, object>[]> {\n        { \"containers\", new [] { new Struct {\n            Name = \"hello\",\n            Image = \"paulbouwer/hello-kubernetes:1.5\",\n            Ports = new [] { new Struct { ContainerPort = 8080 } }\n        } } }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// provisiong a cluster\nCluster cluster = Cluster.Builder.create(this, \"hello-eks\")\n        .version(KubernetesVersion.V1_22)\n        .build();\n\n// apply a kubernetes manifest to the cluster\ncluster.addManifest(\"mypod\", Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"Pod\",\n        \"metadata\", Map.of(\"name\", \"mypod\"),\n        \"spec\", Map.of(\n                \"containers\", List.of(Map.of(\n                        \"name\", \"hello\",\n                        \"image\", \"paulbouwer/hello-kubernetes:1.5\",\n                        \"ports\", List.of(Map.of(\"containerPort\", 8080)))))));",
          "version": "1"
        },
        "go": {
          "source": "// provisiong a cluster\ncluster := eks.NewCluster(this, jsii.String(\"hello-eks\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n})\n\n// apply a kubernetes manifest to the cluster\ncluster.addManifest(jsii.String(\"mypod\"), map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"v1\"),\n\t\"kind\": jsii.String(\"Pod\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"mypod\"),\n\t},\n\t\"spec\": map[string][]map[string]interface{}{\n\t\t\"containers\": []map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"name\": jsii.String(\"hello\"),\n\t\t\t\t\"image\": jsii.String(\"paulbouwer/hello-kubernetes:1.5\"),\n\t\t\t\t\"ports\": []map[string]*f64{\n\t\t\t\t\tmap[string]*f64{\n\t\t\t\t\t\t\"containerPort\": jsii.Number(8080),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// provisiong a cluster\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_22,\n});\n\n// apply a kubernetes manifest to the cluster\ncluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 50
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// provisiong a cluster\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_22,\n});\n\n// apply a kubernetes manifest to the cluster\ncluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 19,
        "104": 1,
        "192": 2,
        "193": 6,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 11
      },
      "fqnsFingerprint": "fec0bf9e9ca523dfe65df53d74a109d5cde0b91a33ff3bf498c98237b7f57784"
    },
    "7610ee08118c7f2e72452126ade4306bf0b26aef3118449bd269ce3771800a25": {
      "translations": {
        "python": {
          "source": "eks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "eks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n})",
          "version": "1"
        },
        "$": {
          "source": "new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 144
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "fec0bf9e9ca523dfe65df53d74a109d5cde0b91a33ff3bf498c98237b7f57784"
    },
    "478a26b7b330cd3013d80d95ccb7a449f8c90dca2af97e3da6d0ed568a9e5bcc": {
      "translations": {
        "python": {
          "source": "eks.FargateCluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new FargateCluster(this, \"HelloEKS\", new FargateClusterProps {\n    Version = KubernetesVersion.V1_22\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateCluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "eks.NewFargateCluster(this, jsii.String(\"HelloEKS\"), &fargateClusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n})",
          "version": "1"
        },
        "$": {
          "source": "new eks.FargateCluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 152
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.FargateCluster",
        "@aws-cdk/aws-eks.FargateClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew eks.FargateCluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "90d6918dfe2ed9b305abeace189184e99fab285228dc7cb7defb48a7141afdc4"
    },
    "813be40a447cee2374318a080a2c63967f66dcfb83b33ccbb3a595002a1b1978": {
      "translations": {
        "python": {
          "source": "eks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    default_capacity=5,\n    default_capacity_instance=ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.SMALL)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    DefaultCapacity = 5,\n    DefaultCapacityInstance = InstanceType.Of(InstanceClass.M5, InstanceSize.SMALL)\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .defaultCapacity(5)\n        .defaultCapacityInstance(InstanceType.of(InstanceClass.M5, InstanceSize.SMALL))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "eks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tdefaultCapacity: jsii.Number(5),\n\tdefaultCapacityInstance: ec2.instanceType.of(ec2.instanceClass_M5, ec2.instanceSize_SMALL),\n})",
          "version": "1"
        },
        "$": {
          "source": "new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacity: 5,\n  defaultCapacityInstance: ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.SMALL),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 176
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#M5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#SMALL",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacity: 5,\n  defaultCapacityInstance: ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.SMALL),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 17,
        "104": 1,
        "193": 1,
        "194": 9,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "a1087bae09bb67d9d54fb2f79738f8d420790e3107a88db5fe9cf2d218ae0751"
    },
    "07af0265ba2780b2ce2d74f47363e06efa396bab42670df3c3e4d3a1b46b5c67": {
      "translations": {
        "python": {
          "source": "cluster = eks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    default_capacity=0\n)\n\ncluster.add_nodegroup_capacity(\"custom-node-group\",\n    instance_types=[ec2.InstanceType(\"m5.large\")],\n    min_size=4,\n    disk_size=100,\n    ami_type=eks.NodegroupAmiType.AL2_X86_64_GPU\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster = new Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    DefaultCapacity = 0\n});\n\ncluster.AddNodegroupCapacity(\"custom-node-group\", new NodegroupOptions {\n    InstanceTypes = new [] { new InstanceType(\"m5.large\") },\n    MinSize = 4,\n    DiskSize = 100,\n    AmiType = NodegroupAmiType.AL2_X86_64_GPU\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster = Cluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .defaultCapacity(0)\n        .build();\n\ncluster.addNodegroupCapacity(\"custom-node-group\", NodegroupOptions.builder()\n        .instanceTypes(List.of(new InstanceType(\"m5.large\")))\n        .minSize(4)\n        .diskSize(100)\n        .amiType(NodegroupAmiType.AL2_X86_64_GPU)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tdefaultCapacity: jsii.Number(0),\n})\n\ncluster.addNodegroupCapacity(jsii.String(\"custom-node-group\"), &nodegroupOptions{\n\tinstanceTypes: []instanceType{\n\t\tec2.NewInstanceType(jsii.String(\"m5.large\")),\n\t},\n\tminSize: jsii.Number(4),\n\tdiskSize: jsii.Number(100),\n\tamiType: eks.nodegroupAmiType_AL2_X86_64_GPU,\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacity: 0,\n});\n\ncluster.addNodegroupCapacity('custom-node-group', {\n  instanceTypes: [new ec2.InstanceType('m5.large')],\n  minSize: 4,\n  diskSize: 100,\n  amiType: eks.NodegroupAmiType.AL2_X86_64_GPU,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 188
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "@aws-cdk/aws-eks.NodegroupAmiType",
        "@aws-cdk/aws-eks.NodegroupAmiType#AL2_X86_64_GPU",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacity: 0,\n});\n\ncluster.addNodegroupCapacity('custom-node-group', {\n  instanceTypes: [new ec2.InstanceType('m5.large')],\n  minSize: 4,\n  diskSize: 100,\n  amiType: eks.NodegroupAmiType.AL2_X86_64_GPU,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 19,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "f90a18cbdd3d7c1cb0e95c529dd9e9b7cb69104ab066a542b2f17a884338347a"
    },
    "2a691fa43c4c5ca6db6ea84af5b995916b181854bcb4bcd13b1a5f2594d39a67": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_nodegroup_capacity(\"custom-node-group\",\n    instance_types=[ec2.InstanceType(\"m5.large\")],\n    taints=[eks.TaintSpec(\n        effect=eks.TaintEffect.NO_SCHEDULE,\n        key=\"foo\",\n        value=\"bar\"\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddNodegroupCapacity(\"custom-node-group\", new NodegroupOptions {\n    InstanceTypes = new [] { new InstanceType(\"m5.large\") },\n    Taints = new [] { new TaintSpec {\n        Effect = TaintEffect.NO_SCHEDULE,\n        Key = \"foo\",\n        Value = \"bar\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addNodegroupCapacity(\"custom-node-group\", NodegroupOptions.builder()\n        .instanceTypes(List.of(new InstanceType(\"m5.large\")))\n        .taints(List.of(TaintSpec.builder()\n                .effect(TaintEffect.NO_SCHEDULE)\n                .key(\"foo\")\n                .value(\"bar\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addNodegroupCapacity(jsii.String(\"custom-node-group\"), &nodegroupOptions{\n\tinstanceTypes: []instanceType{\n\t\tec2.NewInstanceType(jsii.String(\"m5.large\")),\n\t},\n\ttaints: []taintSpec{\n\t\t&taintSpec{\n\t\t\teffect: eks.taintEffect_NO_SCHEDULE,\n\t\t\tkey: jsii.String(\"foo\"),\n\t\t\tvalue: jsii.String(\"bar\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addNodegroupCapacity('custom-node-group', {\n  instanceTypes: [new ec2.InstanceType('m5.large')],\n  taints: [\n    {\n      effect: eks.TaintEffect.NO_SCHEDULE,\n      key: 'foo',\n      value: 'bar',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 204
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "@aws-cdk/aws-eks.TaintEffect",
        "@aws-cdk/aws-eks.TaintEffect#NO_SCHEDULE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addNodegroupCapacity('custom-node-group', {\n  instanceTypes: [new ec2.InstanceType('m5.large')],\n  taints: [\n    {\n      effect: eks.TaintEffect.NO_SCHEDULE,\n      key: 'foo',\n      value: 'bar',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2595712479728eaad0bede16f2542ac5e3e16889d632645f5df0743f6d7429a5"
    },
    "f0fbc84b3bc6255309ac61457a78d0673f5c77e7a1f3f3acf4b0715715fdceac": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_nodegroup_capacity(\"extra-ng-spot\",\n    instance_types=[\n        ec2.InstanceType(\"c5.large\"),\n        ec2.InstanceType(\"c5a.large\"),\n        ec2.InstanceType(\"c5d.large\")\n    ],\n    min_size=3,\n    capacity_type=eks.CapacityType.SPOT\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddNodegroupCapacity(\"extra-ng-spot\", new NodegroupOptions {\n    InstanceTypes = new [] {\n        new InstanceType(\"c5.large\"),\n        new InstanceType(\"c5a.large\"),\n        new InstanceType(\"c5d.large\") },\n    MinSize = 3,\n    CapacityType = CapacityType.SPOT\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addNodegroupCapacity(\"extra-ng-spot\", NodegroupOptions.builder()\n        .instanceTypes(List.of(\n            new InstanceType(\"c5.large\"),\n            new InstanceType(\"c5a.large\"),\n            new InstanceType(\"c5d.large\")))\n        .minSize(3)\n        .capacityType(CapacityType.SPOT)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addNodegroupCapacity(jsii.String(\"extra-ng-spot\"), &nodegroupOptions{\n\tinstanceTypes: []instanceType{\n\t\tec2.NewInstanceType(jsii.String(\"c5.large\")),\n\t\tec2.NewInstanceType(jsii.String(\"c5a.large\")),\n\t\tec2.NewInstanceType(jsii.String(\"c5d.large\")),\n\t},\n\tminSize: jsii.Number(3),\n\tcapacityType: eks.capacityType_SPOT,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addNodegroupCapacity('extra-ng-spot', {\n  instanceTypes: [\n    new ec2.InstanceType('c5.large'),\n    new ec2.InstanceType('c5a.large'),\n    new ec2.InstanceType('c5d.large'),\n  ],\n  minSize: 3,\n  capacityType: eks.CapacityType.SPOT,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 226
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.CapacityType",
        "@aws-cdk/aws-eks.CapacityType#SPOT",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.NodegroupOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addNodegroupCapacity('extra-ng-spot', {\n  instanceTypes: [\n    new ec2.InstanceType('c5.large'),\n    new ec2.InstanceType('c5a.large'),\n    new ec2.InstanceType('c5d.large'),\n  ],\n  minSize: 3,\n  capacityType: eks.CapacityType.SPOT,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 17,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "646a397bc5ab26e96b337300eb4e0440604579eaf89a1d50129ee6801483d6a4"
    },
    "de4d37dee5405b78132da1a2b3b287a65267d2fedc797e6c5e0f27070dafbdea": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n\nuser_data = \"\"\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n\"\"\"\nlt = ec2.CfnLaunchTemplate(self, \"LaunchTemplate\",\n    launch_template_data=ec2.CfnLaunchTemplate.LaunchTemplateDataProperty(\n        instance_type=\"t3.small\",\n        user_data=Fn.base64(user_data)\n    )\n)\n\ncluster.add_nodegroup_capacity(\"extra-ng\",\n    launch_template_spec=eks.LaunchTemplateSpec(\n        id=lt.ref,\n        version=lt.attr_latest_version_number\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\nstring userData = @\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"\"==MYBOUNDARY==\"\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"\"us-ascii\"\"\n\n#!/bin/bash\necho \"\"Running custom user data script\"\"\n\n--==MYBOUNDARY==--\\\n\";\nCfnLaunchTemplate lt = new CfnLaunchTemplate(this, \"LaunchTemplate\", new CfnLaunchTemplateProps {\n    LaunchTemplateData = new LaunchTemplateDataProperty {\n        InstanceType = \"t3.small\",\n        UserData = Fn.Base64(userData)\n    }\n});\n\ncluster.AddNodegroupCapacity(\"extra-ng\", new NodegroupOptions {\n    LaunchTemplateSpec = new LaunchTemplateSpec {\n        Id = lt.Ref,\n        Version = lt.AttrLatestVersionNumber\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\nString userData = \"MIME-Version: 1.0\\nContent-Type: multipart/mixed; boundary=\\\"==MYBOUNDARY==\\\"\\n\\n--==MYBOUNDARY==\\nContent-Type: text/x-shellscript; charset=\\\"us-ascii\\\"\\n\\n#!/bin/bash\\necho \\\"Running custom user data script\\\"\\n\\n--==MYBOUNDARY==--\\\\\\n\";\nCfnLaunchTemplate lt = CfnLaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .launchTemplateData(LaunchTemplateDataProperty.builder()\n                .instanceType(\"t3.small\")\n                .userData(Fn.base64(userData))\n                .build())\n        .build();\n\ncluster.addNodegroupCapacity(\"extra-ng\", NodegroupOptions.builder()\n        .launchTemplateSpec(LaunchTemplateSpec.builder()\n                .id(lt.getRef())\n                .version(lt.getAttrLatestVersionNumber())\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\nuserData := \"MIME-Version: 1.0\\nContent-Type: multipart/mixed; boundary=\\\"==MYBOUNDARY==\\\"\\n\\n--==MYBOUNDARY==\\nContent-Type: text/x-shellscript; charset=\\\"us-ascii\\\"\\n\\n#!/bin/bash\\necho \\\"Running custom user data script\\\"\\n\\n--==MYBOUNDARY==--\\\\\\n\"\nlt := ec2.NewCfnLaunchTemplate(this, jsii.String(\"LaunchTemplate\"), &cfnLaunchTemplateProps{\n\tlaunchTemplateData: &launchTemplateDataProperty{\n\t\tinstanceType: jsii.String(\"t3.small\"),\n\t\tuserData: fn.base64(userData),\n\t},\n})\n\ncluster.addNodegroupCapacity(jsii.String(\"extra-ng\"), &nodegroupOptions{\n\tlaunchTemplateSpec: &launchTemplateSpec{\n\t\tid: lt.ref,\n\t\tversion: lt.attrLatestVersionNumber,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 248
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate",
        "@aws-cdk/aws-ec2.CfnLaunchTemplate#attrLatestVersionNumber",
        "@aws-cdk/aws-ec2.CfnLaunchTemplateProps",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.LaunchTemplateSpec",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Fn#base64"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "14": 1,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "5e2c19df484280fa19166be98c4ac8d6f1f588e07a0f36bacee08116daa72c27"
    },
    "209ea3730841c55a74f1e16ba56a25fe0ff06e8bcc2d8eae14b2721865de685e": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\nuser_data = ec2.UserData.for_linux()\nuser_data.add_commands(\"set -o xtrace\", f\"/etc/eks/bootstrap.sh {cluster.clusterName}\")\nlt = ec2.CfnLaunchTemplate(self, \"LaunchTemplate\",\n    launch_template_data=ec2.CfnLaunchTemplate.LaunchTemplateDataProperty(\n        image_id=\"some-ami-id\",  # custom AMI\n        instance_type=\"t3.small\",\n        user_data=Fn.base64(user_data.render())\n    )\n)\ncluster.add_nodegroup_capacity(\"extra-ng\",\n    launch_template_spec=eks.LaunchTemplateSpec(\n        id=lt.ref,\n        version=lt.attr_latest_version_number\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nUserData userData = UserData.ForLinux();\nuserData.AddCommands(\"set -o xtrace\", $\"/etc/eks/bootstrap.sh {cluster.clusterName}\");\nCfnLaunchTemplate lt = new CfnLaunchTemplate(this, \"LaunchTemplate\", new CfnLaunchTemplateProps {\n    LaunchTemplateData = new LaunchTemplateDataProperty {\n        ImageId = \"some-ami-id\",  // custom AMI\n        InstanceType = \"t3.small\",\n        UserData = Fn.Base64(userData.Render())\n    }\n});\ncluster.AddNodegroupCapacity(\"extra-ng\", new NodegroupOptions {\n    LaunchTemplateSpec = new LaunchTemplateSpec {\n        Id = lt.Ref,\n        Version = lt.AttrLatestVersionNumber\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nUserData userData = UserData.forLinux();\nuserData.addCommands(\"set -o xtrace\", String.format(\"/etc/eks/bootstrap.sh %s\", cluster.getClusterName()));\nCfnLaunchTemplate lt = CfnLaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .launchTemplateData(LaunchTemplateDataProperty.builder()\n                .imageId(\"some-ami-id\") // custom AMI\n                .instanceType(\"t3.small\")\n                .userData(Fn.base64(userData.render()))\n                .build())\n        .build();\ncluster.addNodegroupCapacity(\"extra-ng\", NodegroupOptions.builder()\n        .launchTemplateSpec(LaunchTemplateSpec.builder()\n                .id(lt.getRef())\n                .version(lt.getAttrLatestVersionNumber())\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nuserData := ec2.userData.forLinux()\nuserData.addCommands(jsii.String(\"set -o xtrace\"),\nfmt.Sprintf(\"/etc/eks/bootstrap.sh %v\", cluster.clusterName))\nlt := ec2.NewCfnLaunchTemplate(this, jsii.String(\"LaunchTemplate\"), &cfnLaunchTemplateProps{\n\tlaunchTemplateData: &launchTemplateDataProperty{\n\t\timageId: jsii.String(\"some-ami-id\"),\n\t\t // custom AMI\n\t\tinstanceType: jsii.String(\"t3.small\"),\n\t\tuserData: fn.base64(userData.render()),\n\t},\n})\ncluster.addNodegroupCapacity(jsii.String(\"extra-ng\"), &nodegroupOptions{\n\tlaunchTemplateSpec: &launchTemplateSpec{\n\t\tid: lt.ref,\n\t\tversion: lt.attrLatestVersionNumber,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst userData = ec2.UserData.forLinux();\nuserData.addCommands(\n  'set -o xtrace',\n  `/etc/eks/bootstrap.sh ${cluster.clusterName}`,\n);\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    imageId: 'some-ami-id', // custom AMI\n    instanceType: 't3.small',\n    userData: Fn.base64(userData.render()),\n  },\n});\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 281
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate",
        "@aws-cdk/aws-ec2.CfnLaunchTemplate#attrLatestVersionNumber",
        "@aws-cdk/aws-ec2.CfnLaunchTemplateProps",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux",
        "@aws-cdk/aws-ec2.UserData#render",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.LaunchTemplateSpec",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Fn#base64"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst userData = ec2.UserData.forLinux();\nuserData.addCommands(\n  'set -o xtrace',\n  `/etc/eks/bootstrap.sh ${cluster.clusterName}`,\n);\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    imageId: 'some-ami-id', // custom AMI\n    instanceType: 't3.small',\n    userData: Fn.base64(userData.render()),\n  },\n});\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "15": 1,
        "17": 1,
        "75": 31,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 10,
        "196": 5,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "1059a04a1722796695299ee508f37915f85fcc7b14f57d5b573726f8a00f7c86"
    },
    "50f8af04f8af154539acdb9cfcd2127fd38ce7f01fabbe140b5daad186e15e04": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_fargate_profile(\"MyProfile\",\n    selectors=[eks.Selector(namespace=\"default\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddFargateProfile(\"MyProfile\", new FargateProfileOptions {\n    Selectors = new [] { new Selector { Namespace = \"default\" } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addFargateProfile(\"MyProfile\", FargateProfileOptions.builder()\n        .selectors(List.of(Selector.builder().namespace(\"default\").build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addFargateProfile(jsii.String(\"MyProfile\"), &fargateProfileOptions{\n\tselectors: []selector{\n\t\t&selector{\n\t\t\tnamespace: jsii.String(\"default\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addFargateProfile('MyProfile', {\n  selectors: [ { namespace: 'default' } ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 326
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster#addFargateProfile",
        "@aws-cdk/aws-eks.FargateProfileOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addFargateProfile('MyProfile', {\n  selectors: [ { namespace: 'default' } ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "045b274a688c59179e89ec77bd19a600e392ac88ed0fb8c8e94a14cba5d71ba6"
    },
    "5a8a563e0c4dfb76d2513f4f1621293fb0eb6233250b6abc09e74ce37e4e2463": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\neks.FargateProfile(self, \"MyProfile\",\n    cluster=cluster,\n    selectors=[eks.Selector(namespace=\"default\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nnew FargateProfile(this, \"MyProfile\", new FargateProfileProps {\n    Cluster = cluster,\n    Selectors = new [] { new Selector { Namespace = \"default\" } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nFargateProfile.Builder.create(this, \"MyProfile\")\n        .cluster(cluster)\n        .selectors(List.of(Selector.builder().namespace(\"default\").build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\neks.NewFargateProfile(this, jsii.String(\"MyProfile\"), &fargateProfileProps{\n\tcluster: cluster,\n\tselectors: []selector{\n\t\t&selector{\n\t\t\tnamespace: jsii.String(\"default\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nnew eks.FargateProfile(this, 'MyProfile', {\n  cluster,\n  selectors: [ { namespace: 'default' } ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 335
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.FargateProfile",
        "@aws-cdk/aws-eks.FargateProfileProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew eks.FargateProfile(this, 'MyProfile', {\n  cluster,\n  selectors: [ { namespace: 'default' } ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "85dea1664cb49c1686d4813b48e05340ee74cb8695c3d6e7f8cb9d6ab5c5336f"
    },
    "402de3e2bd934bacd8649e8617e4c536257fad322ed8995229ccf09da65be690": {
      "translations": {
        "python": {
          "source": "cluster = eks.FargateCluster(self, \"MyCluster\",\n    version=eks.KubernetesVersion.V1_22\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FargateCluster cluster = new FargateCluster(this, \"MyCluster\", new FargateClusterProps {\n    Version = KubernetesVersion.V1_22\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateCluster cluster = FargateCluster.Builder.create(this, \"MyCluster\")\n        .version(KubernetesVersion.V1_22)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewFargateCluster(this, jsii.String(\"MyCluster\"), &fargateClusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.FargateCluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_22,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 346
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.FargateCluster",
        "@aws-cdk/aws-eks.FargateClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.FargateCluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_22,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "90d6918dfe2ed9b305abeace189184e99fab285228dc7cb7defb48a7141afdc4"
    },
    "b23cecc952de3bc6eaee1bf30fc4ab8e4feb61d021f6a15b8393f1a01ba8b159": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_auto_scaling_group_capacity(\"frontend-nodes\",\n    instance_type=ec2.InstanceType(\"t2.medium\"),\n    min_capacity=3,\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddAutoScalingGroupCapacity(\"frontend-nodes\", new AutoScalingGroupCapacityOptions {\n    InstanceType = new InstanceType(\"t2.medium\"),\n    MinCapacity = 3,\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addAutoScalingGroupCapacity(\"frontend-nodes\", AutoScalingGroupCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.medium\"))\n        .minCapacity(3)\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addAutoScalingGroupCapacity(jsii.String(\"frontend-nodes\"), &autoScalingGroupCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.medium\")),\n\tminCapacity: jsii.Number(3),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addAutoScalingGroupCapacity('frontend-nodes', {\n  instanceType: new ec2.InstanceType('t2.medium'),\n  minCapacity: 3,\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 369
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-eks.AutoScalingGroupCapacityOptions",
        "@aws-cdk/aws-eks.Cluster#addAutoScalingGroupCapacity"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addAutoScalingGroupCapacity('frontend-nodes', {\n  instanceType: new ec2.InstanceType('t2.medium'),\n  minCapacity: 3,\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "4c33d6f86530890edb3be7c5b76caa64a03d36ec24a2458b150132236dfb31b9"
    },
    "4a00134e77ac66a3b2d47e79737bab342b5f0ff875b4954032298ff3cbfb3c06": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n# asg: autoscaling.AutoScalingGroup\n\ncluster.connect_auto_scaling_group_capacity(asg)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nAutoScalingGroup asg;\n\ncluster.ConnectAutoScalingGroupCapacity(asg, new AutoScalingGroupOptions { });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nAutoScalingGroup asg;\n\ncluster.connectAutoScalingGroupCapacity(asg, AutoScalingGroupOptions.builder().build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar asg autoScalingGroup\ncluster.connectAutoScalingGroupCapacity(asg, &autoScalingGroupOptions{\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ndeclare const asg: autoscaling.AutoScalingGroup;\ncluster.connectAutoScalingGroupCapacity(asg, {});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 380
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-eks.AutoScalingGroupOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\ndeclare const asg: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.connectAutoScalingGroupCapacity(asg, {});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "b758d619026d87f8bc3403ae30edd9eda1cb8cd636f518c5f4999bc5cbfa6a62"
    },
    "dcb63def0ab4ecfa45939ebcb57bb09c5c238cd3dd5a24fb7a12ab302b1d6cb7": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n# asg: autoscaling.AutoScalingGroup\n\nimported_cluster = eks.Cluster.from_cluster_attributes(self, \"ImportedCluster\",\n    cluster_name=cluster.cluster_name,\n    cluster_security_group_id=cluster.cluster_security_group_id\n)\n\nimported_cluster.connect_auto_scaling_group_capacity(asg)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nAutoScalingGroup asg;\n\nICluster importedCluster = Cluster.FromClusterAttributes(this, \"ImportedCluster\", new ClusterAttributes {\n    ClusterName = cluster.ClusterName,\n    ClusterSecurityGroupId = cluster.ClusterSecurityGroupId\n});\n\nimportedCluster.ConnectAutoScalingGroupCapacity(asg, new AutoScalingGroupOptions { });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nAutoScalingGroup asg;\n\nICluster importedCluster = Cluster.fromClusterAttributes(this, \"ImportedCluster\", ClusterAttributes.builder()\n        .clusterName(cluster.getClusterName())\n        .clusterSecurityGroupId(cluster.getClusterSecurityGroupId())\n        .build());\n\nimportedCluster.connectAutoScalingGroupCapacity(asg, AutoScalingGroupOptions.builder().build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar asg autoScalingGroup\nimportedCluster := eks.cluster.fromClusterAttributes(this, jsii.String(\"ImportedCluster\"), &clusterAttributes{\n\tclusterName: cluster.clusterName,\n\tclusterSecurityGroupId: cluster.clusterSecurityGroupId,\n})\n\nimportedCluster.connectAutoScalingGroupCapacity(asg, &autoScalingGroupOptions{\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ndeclare const asg: autoscaling.AutoScalingGroup;\nconst importedCluster = eks.Cluster.fromClusterAttributes(this, 'ImportedCluster', {\n  clusterName: cluster.clusterName,\n  clusterSecurityGroupId: cluster.clusterSecurityGroupId,\n});\n\nimportedCluster.connectAutoScalingGroupCapacity(asg, {});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 388
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-eks.AutoScalingGroupOptions",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#clusterName",
        "@aws-cdk/aws-eks.Cluster#clusterSecurityGroupId",
        "@aws-cdk/aws-eks.Cluster#fromClusterAttributes",
        "@aws-cdk/aws-eks.ClusterAttributes",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.ICluster#connectAutoScalingGroupCapacity",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\ndeclare const asg: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst importedCluster = eks.Cluster.fromClusterAttributes(this, 'ImportedCluster', {\n  clusterName: cluster.clusterName,\n  clusterSecurityGroupId: cluster.clusterSecurityGroupId,\n});\n\nimportedCluster.connectAutoScalingGroupCapacity(asg, {});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c581cb29348baeb1f562abb56beca470b432e95d26cb81c9d48addd424c4f2ff"
    },
    "f4cda2225b2787c88b10b505430bfb5a2f4e50dee7ed0d2ef6330224de7f4e16": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_auto_scaling_group_capacity(\"spot\",\n    instance_type=ec2.InstanceType(\"t3.large\"),\n    min_capacity=2,\n    bootstrap_options=eks.BootstrapOptions(\n        kubelet_extra_args=\"--node-labels foo=bar,goo=far\",\n        aws_api_retry_attempts=5\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddAutoScalingGroupCapacity(\"spot\", new AutoScalingGroupCapacityOptions {\n    InstanceType = new InstanceType(\"t3.large\"),\n    MinCapacity = 2,\n    BootstrapOptions = new BootstrapOptions {\n        KubeletExtraArgs = \"--node-labels foo=bar,goo=far\",\n        AwsApiRetryAttempts = 5\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addAutoScalingGroupCapacity(\"spot\", AutoScalingGroupCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t3.large\"))\n        .minCapacity(2)\n        .bootstrapOptions(BootstrapOptions.builder()\n                .kubeletExtraArgs(\"--node-labels foo=bar,goo=far\")\n                .awsApiRetryAttempts(5)\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addAutoScalingGroupCapacity(jsii.String(\"spot\"), &autoScalingGroupCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.large\")),\n\tminCapacity: jsii.Number(2),\n\tbootstrapOptions: &bootstrapOptions{\n\t\tkubeletExtraArgs: jsii.String(\"--node-labels foo=bar,goo=far\"),\n\t\tawsApiRetryAttempts: jsii.Number(5),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addAutoScalingGroupCapacity('spot', {\n  instanceType: new ec2.InstanceType('t3.large'),\n  minCapacity: 2,\n  bootstrapOptions: {\n    kubeletExtraArgs: '--node-labels foo=bar,goo=far',\n    awsApiRetryAttempts: 5,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 408
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.AutoScalingGroupCapacityOptions",
        "@aws-cdk/aws-eks.BootstrapOptions",
        "@aws-cdk/aws-eks.Cluster#addAutoScalingGroupCapacity"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addAutoScalingGroupCapacity('spot', {\n  instanceType: new ec2.InstanceType('t3.large'),\n  minCapacity: 2,\n  bootstrapOptions: {\n    kubeletExtraArgs: '--node-labels foo=bar,goo=far',\n    awsApiRetryAttempts: 5,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "45c3d617336a415a25c0f96731ab38bbca15877ba58e970707acbcfe657aae8f"
    },
    "cd04b24e7de1f730e26ef1abe6fe48bfadf2421ba217e415bf59cc430832591b": {
      "translations": {
        "python": {
          "source": "cluster = eks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    default_capacity_type=eks.DefaultCapacityType.EC2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster = new Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    DefaultCapacityType = DefaultCapacityType.EC2\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster = Cluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .defaultCapacityType(DefaultCapacityType.EC2)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tdefaultCapacityType: eks.defaultCapacityType_EC2,\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacityType: eks.DefaultCapacityType.EC2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 423
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.DefaultCapacityType",
        "@aws-cdk/aws-eks.DefaultCapacityType#EC2",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacityType: eks.DefaultCapacityType.EC2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "1436e7d7e3bdc21e19bc93e04326f5be1da529b11e30056302fb16dde20ac54a"
    },
    "876c239dcbeed33ad180f04de5511850b68c305b25f230e00dcfd06511da1cda": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_auto_scaling_group_capacity(\"spot\",\n    spot_price=\"0.1094\",\n    instance_type=ec2.InstanceType(\"t3.large\"),\n    max_capacity=10\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddAutoScalingGroupCapacity(\"spot\", new AutoScalingGroupCapacityOptions {\n    SpotPrice = \"0.1094\",\n    InstanceType = new InstanceType(\"t3.large\"),\n    MaxCapacity = 10\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addAutoScalingGroupCapacity(\"spot\", AutoScalingGroupCapacityOptions.builder()\n        .spotPrice(\"0.1094\")\n        .instanceType(new InstanceType(\"t3.large\"))\n        .maxCapacity(10)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addAutoScalingGroupCapacity(jsii.String(\"spot\"), &autoScalingGroupCapacityOptions{\n\tspotPrice: jsii.String(\"0.1094\"),\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.large\")),\n\tmaxCapacity: jsii.Number(10),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addAutoScalingGroupCapacity('spot', {\n  spotPrice: '0.1094',\n  instanceType: new ec2.InstanceType('t3.large'),\n  maxCapacity: 10,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 447
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.AutoScalingGroupCapacityOptions",
        "@aws-cdk/aws-eks.Cluster#addAutoScalingGroupCapacity"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addAutoScalingGroupCapacity('spot', {\n  spotPrice: '0.1094',\n  instanceType: new ec2.InstanceType('t3.large'),\n  maxCapacity: 10,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a9a4c0f1cbfd374bfc35c8ca78e7a45574b63390e3e64df415267fc645e88ca6"
    },
    "bf2b3183dcbab93c81078a60122620cd2737279364f2d0c6ef86f9464dc10900": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_nodegroup_capacity(\"BottlerocketNG\",\n    ami_type=eks.NodegroupAmiType.BOTTLEROCKET_X86_64\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddNodegroupCapacity(\"BottlerocketNG\", new NodegroupOptions {\n    AmiType = NodegroupAmiType.BOTTLEROCKET_X86_64\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addNodegroupCapacity(\"BottlerocketNG\", NodegroupOptions.builder()\n        .amiType(NodegroupAmiType.BOTTLEROCKET_X86_64)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addNodegroupCapacity(jsii.String(\"BottlerocketNG\"), &nodegroupOptions{\n\tamiType: eks.nodegroupAmiType_BOTTLEROCKET_X86_64,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addNodegroupCapacity('BottlerocketNG', {\n  amiType: eks.NodegroupAmiType.BOTTLEROCKET_X86_64,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 479
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.NodegroupAmiType",
        "@aws-cdk/aws-eks.NodegroupAmiType#BOTTLEROCKET_X86_64",
        "@aws-cdk/aws-eks.NodegroupOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addNodegroupCapacity('BottlerocketNG', {\n  amiType: eks.NodegroupAmiType.BOTTLEROCKET_X86_64,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4f885f5e3a5c789e28f04f3aaa2373088dad34650bc25578f3735810279bf4fb"
    },
    "bbb53f1eeb1baf052ac205a642cd044a8984a6847ee30547f7d9f8b276192506": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_auto_scaling_group_capacity(\"BottlerocketNodes\",\n    instance_type=ec2.InstanceType(\"t3.small\"),\n    min_capacity=2,\n    machine_image_type=eks.MachineImageType.BOTTLEROCKET\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddAutoScalingGroupCapacity(\"BottlerocketNodes\", new AutoScalingGroupCapacityOptions {\n    InstanceType = new InstanceType(\"t3.small\"),\n    MinCapacity = 2,\n    MachineImageType = MachineImageType.BOTTLEROCKET\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addAutoScalingGroupCapacity(\"BottlerocketNodes\", AutoScalingGroupCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t3.small\"))\n        .minCapacity(2)\n        .machineImageType(MachineImageType.BOTTLEROCKET)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addAutoScalingGroupCapacity(jsii.String(\"BottlerocketNodes\"), &autoScalingGroupCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.small\")),\n\tminCapacity: jsii.Number(2),\n\tmachineImageType: eks.machineImageType_BOTTLEROCKET,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addAutoScalingGroupCapacity('BottlerocketNodes', {\n  instanceType: new ec2.InstanceType('t3.small'),\n  minCapacity:  2,\n  machineImageType: eks.MachineImageType.BOTTLEROCKET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 488
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.AutoScalingGroupCapacityOptions",
        "@aws-cdk/aws-eks.Cluster#addAutoScalingGroupCapacity",
        "@aws-cdk/aws-eks.MachineImageType",
        "@aws-cdk/aws-eks.MachineImageType#BOTTLEROCKET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addAutoScalingGroupCapacity('BottlerocketNodes', {\n  instanceType: new ec2.InstanceType('t3.small'),\n  minCapacity:  2,\n  machineImageType: eks.MachineImageType.BOTTLEROCKET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4b82854d6574fffddcc9e3e453f5d5cdf7fa68d17295288dbd102dfb26579f61"
    },
    "07edc49d37abc458cfd4f982df5dd25b9bb93fdd143f3449f08639ccb92d44d7": {
      "translations": {
        "python": {
          "source": "cluster = eks.Cluster(self, \"hello-eks\",\n    version=eks.KubernetesVersion.V1_22,\n    endpoint_access=eks.EndpointAccess.PRIVATE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster = new Cluster(this, \"hello-eks\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    EndpointAccess = EndpointAccess.PRIVATE\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster = Cluster.Builder.create(this, \"hello-eks\")\n        .version(KubernetesVersion.V1_22)\n        .endpointAccess(EndpointAccess.PRIVATE)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewCluster(this, jsii.String(\"hello-eks\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tendpointAccess: eks.endpointAccess_PRIVATE(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_22,\n  endpointAccess: eks.EndpointAccess.PRIVATE, // No access outside of your VPC.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 516
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.EndpointAccess",
        "@aws-cdk/aws-eks.EndpointAccess#PRIVATE",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_22,\n  endpointAccess: eks.EndpointAccess.PRIVATE, // No access outside of your VPC.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "87dd5002bd3e959d7482bd9e103423def40578932de99e22eec6af0b3bbc8600"
    },
    "08b0676405d342900ac1cc6558fb0de4d009461d9e63823b4124ec9f505bca17": {
      "translations": {
        "python": {
          "source": "eks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    alb_controller=eks.AlbControllerOptions(\n        version=eks.AlbControllerVersion.V2_4_1\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    AlbController = new AlbControllerOptions {\n        Version = AlbControllerVersion.V2_4_1\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .albController(AlbControllerOptions.builder()\n                .version(AlbControllerVersion.V2_4_1)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "eks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\talbController: &albControllerOptions{\n\t\tversion: eks.albControllerVersion_V2_4_1(),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  albController: {\n    version: eks.AlbControllerVersion.V2_4_1,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 538
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.AlbControllerOptions",
        "@aws-cdk/aws-eks.AlbControllerVersion",
        "@aws-cdk/aws-eks.AlbControllerVersion#V2_4_1",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  albController: {\n    version: eks.AlbControllerVersion.V2_4_1,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "44f8cbe8d81ace0d2b92ff92e4e4cd980db34ab13008b31be7c6ed924800c34f"
    },
    "6e6b64cfd5689b9275e0d85f7f866f5e9f87cedadc9017d1c4ae01ad0209fa97": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\nmanifest = cluster.add_manifest(\"manifest\", {})\nif cluster.alb_controller:\n    manifest.node.add_dependency(cluster.alb_controller)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nKubernetesManifest manifest = cluster.AddManifest(\"manifest\", new Dictionary<string, object> { });\nif (cluster.AlbController)\n{\n    manifest.Node.AddDependency(cluster.AlbController);\n}",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nKubernetesManifest manifest = cluster.addManifest(\"manifest\", Map.of());\nif (cluster.getAlbController()) {\n    manifest.node.addDependency(cluster.getAlbController());\n}",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nmanifest := cluster.addManifest(jsii.String(\"manifest\"), map[string]interface{}{\n})\nif cluster.albController {\n\tmanifest.node.addDependency(cluster.albController)\n}",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst manifest = cluster.addManifest('manifest', {/* ... */});\nif (cluster.albController) {\n  manifest.node.addDependency(cluster.albController);\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 564
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster#albController",
        "@aws-cdk/aws-eks.KubernetesManifest",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst manifest = cluster.addManifest('manifest', {/* ... */});\nif (cluster.albController) {\n  manifest.node.addDependency(cluster.albController);\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "223": 1,
        "225": 2,
        "226": 1,
        "227": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "68656c83a26dc04494895f11a480c7c62c2bc11a52a9555952df10ebc986d4a4"
    },
    "fbb32dc1e82843fa0f1f1878a4a24cada5e35aa6470766ac337ba797866ace13": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\neks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    vpc=vpc,\n    vpc_subnets=[ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    Vpc = vpc,\n    VpcSubnets = new [] { new SubnetSelection { SubnetType = SubnetType.PRIVATE } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .vpc(vpc)\n        .vpcSubnets(List.of(SubnetSelection.builder().subnetType(SubnetType.PRIVATE).build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\neks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tvpc: vpc,\n\tvpcSubnets: []subnetSelection{\n\t\t&subnetSelection{\n\t\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  vpc,\n  vpcSubnets: [{ subnetType: ec2.SubnetType.PRIVATE }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 576
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  vpc,\n  vpcSubnets: [{ subnetType: ec2.SubnetType.PRIVATE }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "40540957c50341d14d51d2ea487874bd226cd103c97d991f1468ad9a98ec6621"
    },
    "a9461ceb9e5bad3c88e9c229f8e904b18f586929f3076431045d099034a8d6e3": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# cluster: eks.Cluster\n\ncluster.add_auto_scaling_group_capacity(\"nodes\",\n    vpc_subnets=ec2.SubnetSelection(subnets=vpc.private_subnets),\n    instance_type=ec2.InstanceType(\"t2.medium\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nCluster cluster;\n\ncluster.AddAutoScalingGroupCapacity(\"nodes\", new AutoScalingGroupCapacityOptions {\n    VpcSubnets = new SubnetSelection { Subnets = vpc.PrivateSubnets },\n    InstanceType = new InstanceType(\"t2.medium\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nCluster cluster;\n\ncluster.addAutoScalingGroupCapacity(\"nodes\", AutoScalingGroupCapacityOptions.builder()\n        .vpcSubnets(SubnetSelection.builder().subnets(vpc.getPrivateSubnets()).build())\n        .instanceType(new InstanceType(\"t2.medium\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar cluster cluster\ncluster.addAutoScalingGroupCapacity(jsii.String(\"nodes\"), &autoScalingGroupCapacityOptions{\n\tvpcSubnets: &subnetSelection{\n\t\tsubnets: vpc.privateSubnets,\n\t},\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.medium\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const cluster: eks.Cluster;\ncluster.addAutoScalingGroupCapacity('nodes', {\n  vpcSubnets: { subnets: vpc.privateSubnets },\n  instanceType: new ec2.InstanceType('t2.medium'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 595
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.Vpc#privateSubnets",
        "@aws-cdk/aws-eks.AutoScalingGroupCapacityOptions",
        "@aws-cdk/aws-eks.Cluster#addAutoScalingGroupCapacity"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addAutoScalingGroupCapacity('nodes', {\n  vpcSubnets: { subnets: vpc.privateSubnets },\n  instanceType: new ec2.InstanceType('t2.medium'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "af90f10166c9579a18acfca722e7e1a498cfeb36668e45cf8f6feff5e909acee"
    },
    "04c7585d3461f2887306f57d6679612ad91dea11f4658ab0c15c7ecf9a2f9862": {
      "translations": {
        "python": {
          "source": "# proxy_instance_security_group: ec2.SecurityGroup\n\ncluster = eks.Cluster(self, \"hello-eks\",\n    version=eks.KubernetesVersion.V1_22,\n    cluster_handler_environment={\n        \"https_proxy\": \"http://proxy.myproxy.com\"\n    },\n    #\n    # If the proxy is not open publicly, you can pass a security group to the\n    # Cluster Handler Lambdas so that it can reach the proxy.\n    #\n    cluster_handler_security_group=proxy_instance_security_group\n)",
          "version": "2"
        },
        "csharp": {
          "source": "SecurityGroup proxyInstanceSecurityGroup;\n\nCluster cluster = new Cluster(this, \"hello-eks\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    ClusterHandlerEnvironment = new Dictionary<string, string> {\n        { \"https_proxy\", \"http://proxy.myproxy.com\" }\n    },\n    /**\n       * If the proxy is not open publicly, you can pass a security group to the\n       * Cluster Handler Lambdas so that it can reach the proxy.\n       */\n    ClusterHandlerSecurityGroup = proxyInstanceSecurityGroup\n});",
          "version": "1"
        },
        "java": {
          "source": "SecurityGroup proxyInstanceSecurityGroup;\n\nCluster cluster = Cluster.Builder.create(this, \"hello-eks\")\n        .version(KubernetesVersion.V1_22)\n        .clusterHandlerEnvironment(Map.of(\n                \"https_proxy\", \"http://proxy.myproxy.com\"))\n        /**\n           * If the proxy is not open publicly, you can pass a security group to the\n           * Cluster Handler Lambdas so that it can reach the proxy.\n           */\n        .clusterHandlerSecurityGroup(proxyInstanceSecurityGroup)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var proxyInstanceSecurityGroup securityGroup\ncluster := eks.NewCluster(this, jsii.String(\"hello-eks\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tclusterHandlerEnvironment: map[string]*string{\n\t\t\"https_proxy\": jsii.String(\"http://proxy.myproxy.com\"),\n\t},\n\t/**\n\t   * If the proxy is not open publicly, you can pass a security group to the\n\t   * Cluster Handler Lambdas so that it can reach the proxy.\n\t   */\n\tclusterHandlerSecurityGroup: proxyInstanceSecurityGroup,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const proxyInstanceSecurityGroup: ec2.SecurityGroup;\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_22,\n  clusterHandlerEnvironment: {\n    https_proxy: 'http://proxy.myproxy.com',\n  },\n  /**\n   * If the proxy is not open publicly, you can pass a security group to the\n   * Cluster Handler Lambdas so that it can reach the proxy.\n   */\n  clusterHandlerSecurityGroup: proxyInstanceSecurityGroup,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 624
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const proxyInstanceSecurityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_22,\n  clusterHandlerEnvironment: {\n    https_proxy: 'http://proxy.myproxy.com',\n  },\n  /**\n   * If the proxy is not open publicly, you can pass a security group to the\n   * Cluster Handler Lambdas so that it can reach the proxy.\n   */\n  clusterHandlerSecurityGroup: proxyInstanceSecurityGroup,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "42a6e7ae75cb078d46c229e5efe839a88c5c663ed798b8636961b5fe81b4d1c2"
    },
    "c7f8a1dd5530229896d78666a8b77f789704c58c0762974b3b03c77d9a455de3": {
      "translations": {
        "python": {
          "source": "handler_role = iam.Role.from_role_arn(self, \"HandlerRole\", \"arn:aws:iam::123456789012:role/lambda-role\")\nkubectl_provider = eks.KubectlProvider.from_kubectl_provider_attributes(self, \"KubectlProvider\",\n    function_arn=\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\",\n    kubectl_role_arn=\"arn:aws:iam::123456789012:role/kubectl-role\",\n    handler_role=handler_role\n)\n\ncluster = eks.Cluster.from_cluster_attributes(self, \"Cluster\",\n    cluster_name=\"cluster\",\n    kubectl_provider=kubectl_provider\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IRole handlerRole = Role.FromRoleArn(this, \"HandlerRole\", \"arn:aws:iam::123456789012:role/lambda-role\");\nIKubectlProvider kubectlProvider = KubectlProvider.FromKubectlProviderAttributes(this, \"KubectlProvider\", new KubectlProviderAttributes {\n    FunctionArn = \"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\",\n    KubectlRoleArn = \"arn:aws:iam::123456789012:role/kubectl-role\",\n    HandlerRole = handlerRole\n});\n\nICluster cluster = Cluster.FromClusterAttributes(this, \"Cluster\", new ClusterAttributes {\n    ClusterName = \"cluster\",\n    KubectlProvider = kubectlProvider\n});",
          "version": "1"
        },
        "java": {
          "source": "IRole handlerRole = Role.fromRoleArn(this, \"HandlerRole\", \"arn:aws:iam::123456789012:role/lambda-role\");\nIKubectlProvider kubectlProvider = KubectlProvider.fromKubectlProviderAttributes(this, \"KubectlProvider\", KubectlProviderAttributes.builder()\n        .functionArn(\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\")\n        .kubectlRoleArn(\"arn:aws:iam::123456789012:role/kubectl-role\")\n        .handlerRole(handlerRole)\n        .build());\n\nICluster cluster = Cluster.fromClusterAttributes(this, \"Cluster\", ClusterAttributes.builder()\n        .clusterName(\"cluster\")\n        .kubectlProvider(kubectlProvider)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "handlerRole := iam.role.fromRoleArn(this, jsii.String(\"HandlerRole\"), jsii.String(\"arn:aws:iam::123456789012:role/lambda-role\"))\nkubectlProvider := eks.kubectlProvider.fromKubectlProviderAttributes(this, jsii.String(\"KubectlProvider\"), &kubectlProviderAttributes{\n\tfunctionArn: jsii.String(\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\"),\n\tkubectlRoleArn: jsii.String(\"arn:aws:iam::123456789012:role/kubectl-role\"),\n\thandlerRole: handlerRole,\n})\n\ncluster := eks.cluster.fromClusterAttributes(this, jsii.String(\"Cluster\"), &clusterAttributes{\n\tclusterName: jsii.String(\"cluster\"),\n\tkubectlProvider: kubectlProvider,\n})",
          "version": "1"
        },
        "$": {
          "source": "const handlerRole = iam.Role.fromRoleArn(this, 'HandlerRole', 'arn:aws:iam::123456789012:role/lambda-role');\nconst kubectlProvider = eks.KubectlProvider.fromKubectlProviderAttributes(this, 'KubectlProvider', {\n  functionArn: 'arn:aws:lambda:us-east-2:123456789012:function:my-function:1',\n  kubectlRoleArn: 'arn:aws:iam::123456789012:role/kubectl-role',\n  handlerRole,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'Cluster', {\n  clusterName: 'cluster',\n  kubectlProvider,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 645
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#fromClusterAttributes",
        "@aws-cdk/aws-eks.ClusterAttributes",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.IKubectlProvider",
        "@aws-cdk/aws-eks.KubectlProvider",
        "@aws-cdk/aws-eks.KubectlProvider#fromKubectlProviderAttributes",
        "@aws-cdk/aws-eks.KubectlProviderAttributes",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst handlerRole = iam.Role.fromRoleArn(this, 'HandlerRole', 'arn:aws:iam::123456789012:role/lambda-role');\nconst kubectlProvider = eks.KubectlProvider.fromKubectlProviderAttributes(this, 'KubectlProvider', {\n  functionArn: 'arn:aws:lambda:us-east-2:123456789012:function:my-function:1',\n  kubectlRoleArn: 'arn:aws:iam::123456789012:role/kubectl-role',\n  handlerRole,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'Cluster', {\n  clusterName: 'cluster',\n  kubectlProvider,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 17,
        "104": 3,
        "193": 2,
        "194": 6,
        "196": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 2
      },
      "fqnsFingerprint": "0d84391daba6ff4fffca9ee4649fb937a741a33232b1a47c09ad8948e97c2763"
    },
    "01fc38f0808eed9da3405d0567ac61aaefe825619ec8eb9ddefc7ddd0d73606c": {
      "translations": {
        "python": {
          "source": "cluster = eks.Cluster(self, \"hello-eks\",\n    version=eks.KubernetesVersion.V1_22,\n    kubectl_environment={\n        \"http_proxy\": \"http://proxy.myproxy.com\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster = new Cluster(this, \"hello-eks\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    KubectlEnvironment = new Dictionary<string, string> {\n        { \"http_proxy\", \"http://proxy.myproxy.com\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster = Cluster.Builder.create(this, \"hello-eks\")\n        .version(KubernetesVersion.V1_22)\n        .kubectlEnvironment(Map.of(\n                \"http_proxy\", \"http://proxy.myproxy.com\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewCluster(this, jsii.String(\"hello-eks\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tkubectlEnvironment: map[string]*string{\n\t\t\"http_proxy\": jsii.String(\"http://proxy.myproxy.com\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_22,\n  kubectlEnvironment: {\n    'http_proxy': 'http://proxy.myproxy.com',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 663
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_22,\n  kubectlEnvironment: {\n    'http_proxy': 'http://proxy.myproxy.com',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "fec0bf9e9ca523dfe65df53d74a109d5cde0b91a33ff3bf498c98237b7f57784"
    },
    "4220d9ff5829537ab4599069e99319108e7c48ab773f09b6b334b21c90e71a8e": {
      "translations": {
        "python": {
          "source": "layer = lambda_.LayerVersion(self, \"KubectlLayer\",\n    code=lambda_.Code.from_asset(\"layer.zip\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LayerVersion layer = new LayerVersion(this, \"KubectlLayer\", new LayerVersionProps {\n    Code = Code.FromAsset(\"layer.zip\")\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion layer = LayerVersion.Builder.create(this, \"KubectlLayer\")\n        .code(Code.fromAsset(\"layer.zip\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "layer := lambda.NewLayerVersion(this, jsii.String(\"KubectlLayer\"), &layerVersionProps{\n\tcode: lambda.code.fromAsset(jsii.String(\"layer.zip\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const layer = new lambda.LayerVersion(this, 'KubectlLayer', {\n  code: lambda.Code.fromAsset('layer.zip'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 693
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst layer = new lambda.LayerVersion(this, 'KubectlLayer', {\n  code: lambda.Code.fromAsset('layer.zip'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "9a47334c302481988a9aae23cd1eb84a3e8ec034862856218604195ddfa1bd86"
    },
    "a0e3ebcecd4e1e5a70d7df089513c83cf81d1b3f5954792505a30e8f52ea602b": {
      "translations": {
        "python": {
          "source": "# layer: lambda.LayerVersion\n# vpc: ec2.Vpc\n\n\ncluster1 = eks.Cluster(self, \"MyCluster\",\n    kubectl_layer=layer,\n    vpc=vpc,\n    cluster_name=\"cluster-name\",\n    version=eks.KubernetesVersion.V1_22\n)\n\n# or\ncluster2 = eks.Cluster.from_cluster_attributes(self, \"MyCluster\",\n    kubectl_layer=layer,\n    vpc=vpc,\n    cluster_name=\"cluster-name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LayerVersion layer;\nVpc vpc;\n\n\nCluster cluster1 = new Cluster(this, \"MyCluster\", new ClusterProps {\n    KubectlLayer = layer,\n    Vpc = vpc,\n    ClusterName = \"cluster-name\",\n    Version = KubernetesVersion.V1_22\n});\n\n// or\nICluster cluster2 = Cluster.FromClusterAttributes(this, \"MyCluster\", new ClusterAttributes {\n    KubectlLayer = layer,\n    Vpc = vpc,\n    ClusterName = \"cluster-name\"\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion layer;\nVpc vpc;\n\n\nCluster cluster1 = Cluster.Builder.create(this, \"MyCluster\")\n        .kubectlLayer(layer)\n        .vpc(vpc)\n        .clusterName(\"cluster-name\")\n        .version(KubernetesVersion.V1_22)\n        .build();\n\n// or\nICluster cluster2 = Cluster.fromClusterAttributes(this, \"MyCluster\", ClusterAttributes.builder()\n        .kubectlLayer(layer)\n        .vpc(vpc)\n        .clusterName(\"cluster-name\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var layer layerVersion\nvar vpc vpc\n\ncluster1 := eks.NewCluster(this, jsii.String(\"MyCluster\"), &clusterProps{\n\tkubectlLayer: layer,\n\tvpc: vpc,\n\tclusterName: jsii.String(\"cluster-name\"),\n\tversion: eks.kubernetesVersion_V1_22(),\n})\n\n// or\ncluster2 := eks.cluster.fromClusterAttributes(this, jsii.String(\"MyCluster\"), &clusterAttributes{\n\tkubectlLayer: layer,\n\tvpc: vpc,\n\tclusterName: jsii.String(\"cluster-name\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const layer: lambda.LayerVersion;\ndeclare const vpc: ec2.Vpc;\n\nconst cluster1 = new eks.Cluster(this, 'MyCluster', {\n  kubectlLayer: layer,\n  vpc,\n  clusterName: 'cluster-name',\n  version: eks.KubernetesVersion.V1_22,\n});\n\n// or\nconst cluster2 = eks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  kubectlLayer: layer,\n  vpc,\n  clusterName: 'cluster-name',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 701
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#fromClusterAttributes",
        "@aws-cdk/aws-eks.ClusterAttributes",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "@aws-cdk/aws-lambda.ILayerVersion",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const layer: lambda.LayerVersion;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster1 = new eks.Cluster(this, 'MyCluster', {\n  kubectlLayer: layer,\n  vpc,\n  clusterName: 'cluster-name',\n  version: eks.KubernetesVersion.V1_22,\n});\n\n// or\nconst cluster2 = eks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  kubectlLayer: layer,\n  vpc,\n  clusterName: 'cluster-name',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "367b50af9b502a1e2a51d99f083046d68e797bdac7f7b46be9e82bd2f8dd66f8"
    },
    "f9bb77d7167bf5b52d375a9b68e97e5fccce71bcf3c77a2ff131b0d2c3758da0": {
      "translations": {
        "python": {
          "source": "# or\n# vpc: ec2.Vpc\neks.Cluster(self, \"MyCluster\",\n    kubectl_memory=Size.gibibytes(4),\n    version=eks.KubernetesVersion.V1_22\n)\neks.Cluster.from_cluster_attributes(self, \"MyCluster\",\n    kubectl_memory=Size.gibibytes(4),\n    vpc=vpc,\n    cluster_name=\"cluster-name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// or\nVpc vpc;\nnew Cluster(this, \"MyCluster\", new ClusterProps {\n    KubectlMemory = Size.Gibibytes(4),\n    Version = KubernetesVersion.V1_22\n});\nCluster.FromClusterAttributes(this, \"MyCluster\", new ClusterAttributes {\n    KubectlMemory = Size.Gibibytes(4),\n    Vpc = vpc,\n    ClusterName = \"cluster-name\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// or\nVpc vpc;\nCluster.Builder.create(this, \"MyCluster\")\n        .kubectlMemory(Size.gibibytes(4))\n        .version(KubernetesVersion.V1_22)\n        .build();\nCluster.fromClusterAttributes(this, \"MyCluster\", ClusterAttributes.builder()\n        .kubectlMemory(Size.gibibytes(4))\n        .vpc(vpc)\n        .clusterName(\"cluster-name\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// or\nvar vpc vpceks.NewCluster(this, jsii.String(\"MyCluster\"), &clusterProps{\n\tkubectlMemory: size.gibibytes(jsii.Number(4)),\n\tversion: eks.kubernetesVersion_V1_22(),\n})\neks.cluster.fromClusterAttributes(this, jsii.String(\"MyCluster\"), &clusterAttributes{\n\tkubectlMemory: *size.gibibytes(jsii.Number(4)),\n\tvpc: vpc,\n\tclusterName: jsii.String(\"cluster-name\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new eks.Cluster(this, 'MyCluster', {\n  kubectlMemory: Size.gibibytes(4),\n  version: eks.KubernetesVersion.V1_22,\n});\n\n// or\ndeclare const vpc: ec2.Vpc;\neks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  kubectlMemory: Size.gibibytes(4),\n  vpc,\n  clusterName: 'cluster-name',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 724
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#fromClusterAttributes",
        "@aws-cdk/aws-eks.ClusterAttributes",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// or\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew eks.Cluster(this, 'MyCluster', {\n  kubectlMemory: Size.gibibytes(4),\n  version: eks.KubernetesVersion.V1_22,\n});\neks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  kubectlMemory: Size.gibibytes(4),\n  vpc,\n  clusterName: 'cluster-name',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5d36f4ef824f3bf658842a97a1479553c1677ac37cdf9e11ab16b172e2db7289"
    },
    "50bfe467023a0be2319aa1a5719ac824defb0e3a0292eb76f972889277c75ffb": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# add a managed ARM64 nodegroup\ncluster.add_nodegroup_capacity(\"extra-ng-arm\",\n    instance_types=[ec2.InstanceType(\"m6g.medium\")],\n    min_size=2\n)\n\n# add a self-managed ARM64 nodegroup\ncluster.add_auto_scaling_group_capacity(\"self-ng-arm\",\n    instance_type=ec2.InstanceType(\"m6g.medium\"),\n    min_capacity=2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// add a managed ARM64 nodegroup\ncluster.AddNodegroupCapacity(\"extra-ng-arm\", new NodegroupOptions {\n    InstanceTypes = new [] { new InstanceType(\"m6g.medium\") },\n    MinSize = 2\n});\n\n// add a self-managed ARM64 nodegroup\ncluster.AddAutoScalingGroupCapacity(\"self-ng-arm\", new AutoScalingGroupCapacityOptions {\n    InstanceType = new InstanceType(\"m6g.medium\"),\n    MinCapacity = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// add a managed ARM64 nodegroup\ncluster.addNodegroupCapacity(\"extra-ng-arm\", NodegroupOptions.builder()\n        .instanceTypes(List.of(new InstanceType(\"m6g.medium\")))\n        .minSize(2)\n        .build());\n\n// add a self-managed ARM64 nodegroup\ncluster.addAutoScalingGroupCapacity(\"self-ng-arm\", AutoScalingGroupCapacityOptions.builder()\n        .instanceType(new InstanceType(\"m6g.medium\"))\n        .minCapacity(2)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// add a managed ARM64 nodegroup\ncluster.addNodegroupCapacity(jsii.String(\"extra-ng-arm\"), &nodegroupOptions{\n\tinstanceTypes: []instanceType{\n\t\tec2.NewInstanceType(jsii.String(\"m6g.medium\")),\n\t},\n\tminSize: jsii.Number(2),\n})\n\n// add a self-managed ARM64 nodegroup\ncluster.addAutoScalingGroupCapacity(jsii.String(\"self-ng-arm\"), &autoScalingGroupCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"m6g.medium\")),\n\tminCapacity: jsii.Number(2),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// add a managed ARM64 nodegroup\ncluster.addNodegroupCapacity('extra-ng-arm', {\n  instanceTypes: [new ec2.InstanceType('m6g.medium')],\n  minSize: 2,\n});\n\n// add a self-managed ARM64 nodegroup\ncluster.addAutoScalingGroupCapacity('self-ng-arm', {\n  instanceType: new ec2.InstanceType('m6g.medium'),\n  minCapacity: 2,\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 744
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.AutoScalingGroupCapacityOptions",
        "@aws-cdk/aws-eks.Cluster#addAutoScalingGroupCapacity",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.NodegroupOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// add a managed ARM64 nodegroup\ncluster.addNodegroupCapacity('extra-ng-arm', {\n  instanceTypes: [new ec2.InstanceType('m6g.medium')],\n  minSize: 2,\n});\n\n// add a self-managed ARM64 nodegroup\ncluster.addAutoScalingGroupCapacity('self-ng-arm', {\n  instanceType: new ec2.InstanceType('m6g.medium'),\n  minCapacity: 2,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 15,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "452d47827ef9285ed708f659caf6c096ae6036d2279fa240bdd1985cd783a531"
    },
    "bb83f3ac596dd667ca8d3a842b4610233d64cd90a4470d50c03e21b041eae409": {
      "translations": {
        "python": {
          "source": "# role: iam.Role\n\neks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    masters_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Role role;\n\nnew Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    MastersRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "Role role;\n\nCluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .mastersRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var role role\neks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tmastersRole: role,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const role: iam.Role;\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  mastersRole: role,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 763
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "@aws-cdk/aws-iam.IRole",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  mastersRole: role,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "03c4315d6d4a096790d828ea0c832db95b58b4869cb236cacbbf9e79c29fbdda"
    },
    "dad832905454450c001bda8d740939e8a64ad84341507fa01de9c6b993244800": {
      "translations": {
        "python": {
          "source": "secrets_key = kms.Key(self, \"SecretsKey\")\ncluster = eks.Cluster(self, \"MyCluster\",\n    secrets_encryption_key=secrets_key,\n    version=eks.KubernetesVersion.V1_22\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Key secretsKey = new Key(this, \"SecretsKey\");\nCluster cluster = new Cluster(this, \"MyCluster\", new ClusterProps {\n    SecretsEncryptionKey = secretsKey,\n    Version = KubernetesVersion.V1_22\n});",
          "version": "1"
        },
        "java": {
          "source": "Key secretsKey = new Key(this, \"SecretsKey\");\nCluster cluster = Cluster.Builder.create(this, \"MyCluster\")\n        .secretsEncryptionKey(secretsKey)\n        .version(KubernetesVersion.V1_22)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "secretsKey := kms.NewKey(this, jsii.String(\"SecretsKey\"))\ncluster := eks.NewCluster(this, jsii.String(\"MyCluster\"), &clusterProps{\n\tsecretsEncryptionKey: secretsKey,\n\tversion: eks.kubernetesVersion_V1_22(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const secretsKey = new kms.Key(this, 'SecretsKey');\nconst cluster = new eks.Cluster(this, 'MyCluster', {\n  secretsEncryptionKey: secretsKey,\n  version: eks.KubernetesVersion.V1_22,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 790
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secretsKey = new kms.Key(this, 'SecretsKey');\nconst cluster = new eks.Cluster(this, 'MyCluster', {\n  secretsEncryptionKey: secretsKey,\n  version: eks.KubernetesVersion.V1_22,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 2,
        "193": 1,
        "194": 4,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "31b6a661fad723775c61ea5b87054c9c412ab76325996eebd1e2ee4d984effb3"
    },
    "e931360d82afb17fa3e830f5b36e7a91cf2901e61fe388e080753f0175ac1724": {
      "translations": {
        "python": {
          "source": "secrets_key = kms.Key(self, \"SecretsKey\")\ncluster = eks.FargateCluster(self, \"MyFargateCluster\",\n    secrets_encryption_key=secrets_key,\n    version=eks.KubernetesVersion.V1_22\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Key secretsKey = new Key(this, \"SecretsKey\");\nFargateCluster cluster = new FargateCluster(this, \"MyFargateCluster\", new FargateClusterProps {\n    SecretsEncryptionKey = secretsKey,\n    Version = KubernetesVersion.V1_22\n});",
          "version": "1"
        },
        "java": {
          "source": "Key secretsKey = new Key(this, \"SecretsKey\");\nFargateCluster cluster = FargateCluster.Builder.create(this, \"MyFargateCluster\")\n        .secretsEncryptionKey(secretsKey)\n        .version(KubernetesVersion.V1_22)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "secretsKey := kms.NewKey(this, jsii.String(\"SecretsKey\"))\ncluster := eks.NewFargateCluster(this, jsii.String(\"MyFargateCluster\"), &fargateClusterProps{\n\tsecretsEncryptionKey: secretsKey,\n\tversion: eks.kubernetesVersion_V1_22(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const secretsKey = new kms.Key(this, 'SecretsKey');\nconst cluster = new eks.FargateCluster(this, 'MyFargateCluster', {\n  secretsEncryptionKey: secretsKey,\n  version: eks.KubernetesVersion.V1_22,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 800
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.FargateCluster",
        "@aws-cdk/aws-eks.FargateClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secretsKey = new kms.Key(this, 'SecretsKey');\nconst cluster = new eks.FargateCluster(this, 'MyFargateCluster', {\n  secretsEncryptionKey: secretsKey,\n  version: eks.KubernetesVersion.V1_22,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 2,
        "193": 1,
        "194": 4,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "4340d96bcfe3e509e7894d3cdf4c59adc18c052b419f8758f501600637e69f55"
    },
    "6c140ca255fb1fff0b14e9a034da60fc1c220b539fb62e259ed8d59712d788db": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster_encryption_config_key_arn = cluster.cluster_encryption_config_key_arn",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nstring clusterEncryptionConfigKeyArn = cluster.ClusterEncryptionConfigKeyArn;",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nString clusterEncryptionConfigKeyArn = cluster.getClusterEncryptionConfigKeyArn();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nclusterEncryptionConfigKeyArn := cluster.clusterEncryptionConfigKeyArn",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst clusterEncryptionConfigKeyArn = cluster.clusterEncryptionConfigKeyArn;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 810
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster#clusterEncryptionConfigKeyArn"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst clusterEncryptionConfigKeyArn = cluster.clusterEncryptionConfigKeyArn;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "6d27a75bb3b2534f2b8ef8c2ec2ba3ffdca70ae1f3b9604658ca4c3ea29892d6"
    },
    "b738410791664d347783810e3b20302edd792a33672ed52ca4470917a1924a29": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\nadmin_user = iam.User(self, \"Admin\")\ncluster.aws_auth.add_user_mapping(admin_user, groups=[\"system:masters\"])",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nUser adminUser = new User(this, \"Admin\");\ncluster.AwsAuth.AddUserMapping(adminUser, new AwsAuthMapping { Groups = new [] { \"system:masters\" } });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nUser adminUser = new User(this, \"Admin\");\ncluster.awsAuth.addUserMapping(adminUser, AwsAuthMapping.builder().groups(List.of(\"system:masters\")).build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nadminUser := iam.NewUser(this, jsii.String(\"Admin\"))\ncluster.awsAuth.addUserMapping(adminUser, &awsAuthMapping{\n\tgroups: []*string{\n\t\tjsii.String(\"system:masters\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst adminUser = new iam.User(this, 'Admin');\ncluster.awsAuth.addUserMapping(adminUser, { groups: [ 'system:masters' ]});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 830
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.AwsAuth#addUserMapping",
        "@aws-cdk/aws-eks.AwsAuthMapping",
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.User",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst adminUser = new iam.User(this, 'Admin');\ncluster.awsAuth.addUserMapping(adminUser, { groups: [ 'system:masters' ]});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f8c321c079f1b310dfe9d34e97ac7a42673ecf48b50d665482deac3037225c63"
    },
    "cc732568e4c7e1ba06b1436a564393b61dd998153ddc26b9f768f4d3b435d908": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n# role: iam.Role\n\ncluster.aws_auth.add_masters_role(role)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nRole role;\n\ncluster.AwsAuth.AddMastersRole(role);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nRole role;\n\ncluster.awsAuth.addMastersRole(role);",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar role role\ncluster.awsAuth.addMastersRole(role)",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ndeclare const role: iam.Role;\ncluster.awsAuth.addMastersRole(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 838
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.AwsAuth#addMastersRole",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.awsAuth.addMastersRole(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 2,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "291fe84d68cfe6a3eaa73d441452919c2166befc51cfadc66e1f300100796142"
    },
    "ada06ed74d1fc0cca646fd3dceaae10d122c5d5ebbcb67481e22dc9510774444": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster_security_group_id = cluster.cluster_security_group_id",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nstring clusterSecurityGroupId = cluster.ClusterSecurityGroupId;",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nString clusterSecurityGroupId = cluster.getClusterSecurityGroupId();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nclusterSecurityGroupId := cluster.clusterSecurityGroupId",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst clusterSecurityGroupId = cluster.clusterSecurityGroupId;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 852
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster#clusterSecurityGroupId"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst clusterSecurityGroupId = cluster.clusterSecurityGroupId;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "33c0b53644904590e226e4fd6973c18767dbff638705c83675df0938ed460ca6"
    },
    "4e7f1282c1baf94f0732e19d5eeec2212ee2e6bc7f059d67060134d119616b3f": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# add service account\nservice_account = cluster.add_service_account(\"MyServiceAccount\")\n\nbucket = s3.Bucket(self, \"Bucket\")\nbucket.grant_read_write(service_account)\n\nmypod = cluster.add_manifest(\"mypod\", {\n    \"api_version\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\"name\": \"mypod\"},\n    \"spec\": {\n        \"service_account_name\": service_account.service_account_name,\n        \"containers\": [{\n            \"name\": \"hello\",\n            \"image\": \"paulbouwer/hello-kubernetes:1.5\",\n            \"ports\": [{\"container_port\": 8080}]\n        }\n        ]\n    }\n})\n\n# create the resource after the service account.\nmypod.node.add_dependency(service_account)\n\n# print the IAM role arn for this service account\nCfnOutput(self, \"ServiceAccountIamRole\", value=service_account.role.role_arn)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// add service account\nServiceAccount serviceAccount = cluster.AddServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.GrantReadWrite(serviceAccount);\n\nKubernetesManifest mypod = cluster.AddManifest(\"mypod\", new Dictionary<string, object> {\n    { \"apiVersion\", \"v1\" },\n    { \"kind\", \"Pod\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"mypod\" } } },\n    { \"spec\", new Dictionary<string, object> {\n        { \"serviceAccountName\", serviceAccount.ServiceAccountName },\n        { \"containers\", new [] { new Struct {\n            Name = \"hello\",\n            Image = \"paulbouwer/hello-kubernetes:1.5\",\n            Ports = new [] { new Struct { ContainerPort = 8080 } }\n        } } }\n    } }\n});\n\n// create the resource after the service account.\nmypod.Node.AddDependency(serviceAccount);\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nnew CfnOutput(this, \"ServiceAccountIamRole\", new CfnOutputProps { Value = serviceAccount.Role.RoleArn });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// add service account\nServiceAccount serviceAccount = cluster.addServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.grantReadWrite(serviceAccount);\n\nKubernetesManifest mypod = cluster.addManifest(\"mypod\", Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"Pod\",\n        \"metadata\", Map.of(\"name\", \"mypod\"),\n        \"spec\", Map.of(\n                \"serviceAccountName\", serviceAccount.getServiceAccountName(),\n                \"containers\", List.of(Map.of(\n                        \"name\", \"hello\",\n                        \"image\", \"paulbouwer/hello-kubernetes:1.5\",\n                        \"ports\", List.of(Map.of(\"containerPort\", 8080)))))));\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nCfnOutput.Builder.create(this, \"ServiceAccountIamRole\").value(serviceAccount.getRole().getRoleArn()).build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// add service account\nserviceAccount := cluster.addServiceAccount(jsii.String(\"MyServiceAccount\"))\n\nbucket := s3.NewBucket(this, jsii.String(\"Bucket\"))\nbucket.grantReadWrite(serviceAccount)\n\nmypod := cluster.addManifest(jsii.String(\"mypod\"), map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"v1\"),\n\t\"kind\": jsii.String(\"Pod\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"mypod\"),\n\t},\n\t\"spec\": map[string]interface{}{\n\t\t\"serviceAccountName\": serviceAccount.serviceAccountName,\n\t\t\"containers\": []map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"name\": jsii.String(\"hello\"),\n\t\t\t\t\"image\": jsii.String(\"paulbouwer/hello-kubernetes:1.5\"),\n\t\t\t\t\"ports\": []map[string]*f64{\n\t\t\t\t\tmap[string]*f64{\n\t\t\t\t\t\t\"containerPort\": jsii.Number(8080),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount)\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nNewCfnOutput(this, jsii.String(\"ServiceAccountIamRole\"), &cfnOutputProps{\n\tvalue: serviceAccount.role.roleArn,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// add service account\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n\nconst mypod = cluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    serviceAccountName: serviceAccount.serviceAccountName,\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\nnew CfnOutput(this, 'ServiceAccountIamRole', { value: serviceAccount.role.roleArn });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 872
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.KubernetesManifest",
        "@aws-cdk/aws-eks.ServiceAccount",
        "@aws-cdk/aws-eks.ServiceAccount#role",
        "@aws-cdk/aws-eks.ServiceAccount#serviceAccountName",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IRole#roleArn",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#grantReadWrite",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// add service account\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n\nconst mypod = cluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    serviceAccountName: serviceAccount.serviceAccountName,\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\nnew CfnOutput(this, 'ServiceAccountIamRole', { value: serviceAccount.role.roleArn });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 37,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 9,
        "196": 4,
        "197": 2,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "dc5a9adbbdf954cb2bacd6378711dc51c1fe97e9965d96aa3103b48949bc6a99"
    },
    "4545bafab8f1c4a5b78572519c93e3ed8aac16dcdb861f1db23c2e03301606b7": {
      "translations": {
        "python": {
          "source": "# or create a new one using an existing issuer url\n# issuer_url: str\n# you can import an existing provider\nprovider = eks.OpenIdConnectProvider.from_open_id_connect_provider_arn(self, \"Provider\", \"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\")\nprovider2 = eks.OpenIdConnectProvider(self, \"Provider\",\n    url=issuer_url\n)\n\ncluster = eks.Cluster.from_cluster_attributes(self, \"MyCluster\",\n    cluster_name=\"Cluster\",\n    open_id_connect_provider=provider,\n    kubectl_role_arn=\"arn:aws:iam::123456:role/service-role/k8sservicerole\"\n)\n\nservice_account = cluster.add_service_account(\"MyServiceAccount\")\n\nbucket = s3.Bucket(self, \"Bucket\")\nbucket.grant_read_write(service_account)",
          "version": "2"
        },
        "csharp": {
          "source": "// or create a new one using an existing issuer url\nstring issuerUrl;\n// you can import an existing provider\nIOpenIdConnectProvider provider = OpenIdConnectProvider.FromOpenIdConnectProviderArn(this, \"Provider\", \"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\");\nOpenIdConnectProvider provider2 = new OpenIdConnectProvider(this, \"Provider\", new OpenIdConnectProviderProps {\n    Url = issuerUrl\n});\n\nICluster cluster = Cluster.FromClusterAttributes(this, \"MyCluster\", new ClusterAttributes {\n    ClusterName = \"Cluster\",\n    OpenIdConnectProvider = provider,\n    KubectlRoleArn = \"arn:aws:iam::123456:role/service-role/k8sservicerole\"\n});\n\nServiceAccount serviceAccount = cluster.AddServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.GrantReadWrite(serviceAccount);",
          "version": "1"
        },
        "java": {
          "source": "// or create a new one using an existing issuer url\nString issuerUrl;\n// you can import an existing provider\nIOpenIdConnectProvider provider = OpenIdConnectProvider.fromOpenIdConnectProviderArn(this, \"Provider\", \"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\");\nOpenIdConnectProvider provider2 = OpenIdConnectProvider.Builder.create(this, \"Provider\")\n        .url(issuerUrl)\n        .build();\n\nICluster cluster = Cluster.fromClusterAttributes(this, \"MyCluster\", ClusterAttributes.builder()\n        .clusterName(\"Cluster\")\n        .openIdConnectProvider(provider)\n        .kubectlRoleArn(\"arn:aws:iam::123456:role/service-role/k8sservicerole\")\n        .build());\n\nServiceAccount serviceAccount = cluster.addServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.grantReadWrite(serviceAccount);",
          "version": "1"
        },
        "go": {
          "source": "// or create a new one using an existing issuer url\nvar issuerUrl string// you can import an existing provider\nprovider := eks.openIdConnectProvider.fromOpenIdConnectProviderArn(this, jsii.String(\"Provider\"), jsii.String(\"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\"))\nprovider2 := eks.NewOpenIdConnectProvider(this, jsii.String(\"Provider\"), &openIdConnectProviderProps{\n\turl: issuerUrl,\n})\n\ncluster := eks.cluster.fromClusterAttributes(this, jsii.String(\"MyCluster\"), &clusterAttributes{\n\tclusterName: jsii.String(\"Cluster\"),\n\topenIdConnectProvider: provider,\n\tkubectlRoleArn: jsii.String(\"arn:aws:iam::123456:role/service-role/k8sservicerole\"),\n})\n\nserviceAccount := cluster.addServiceAccount(jsii.String(\"MyServiceAccount\"))\n\nbucket := s3.NewBucket(this, jsii.String(\"Bucket\"))\nbucket.grantReadWrite(serviceAccount)",
          "version": "1"
        },
        "$": {
          "source": "// you can import an existing provider\nconst provider = eks.OpenIdConnectProvider.fromOpenIdConnectProviderArn(this, 'Provider', 'arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC');\n\n// or create a new one using an existing issuer url\ndeclare const issuerUrl: string;\nconst provider2 = new eks.OpenIdConnectProvider(this, 'Provider', {\n  url: issuerUrl,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  clusterName: 'Cluster',\n  openIdConnectProvider: provider,\n  kubectlRoleArn: 'arn:aws:iam::123456:role/service-role/k8sservicerole',\n});\n\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 909
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#fromClusterAttributes",
        "@aws-cdk/aws-eks.ClusterAttributes",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.ICluster#addServiceAccount",
        "@aws-cdk/aws-eks.OpenIdConnectProvider",
        "@aws-cdk/aws-eks.OpenIdConnectProviderProps",
        "@aws-cdk/aws-eks.ServiceAccount",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IOpenIdConnectProvider",
        "@aws-cdk/aws-iam.OpenIdConnectProvider#fromOpenIdConnectProviderArn",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#grantReadWrite",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// or create a new one using an existing issuer url\ndeclare const issuerUrl: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// you can import an existing provider\nconst provider = eks.OpenIdConnectProvider.fromOpenIdConnectProviderArn(this, 'Provider', 'arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC');\nconst provider2 = new eks.OpenIdConnectProvider(this, 'Provider', {\n  url: issuerUrl,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  clusterName: 'Cluster',\n  openIdConnectProvider: provider,\n  kubectlRoleArn: 'arn:aws:iam::123456:role/service-role/k8sservicerole',\n});\n\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 27,
        "104": 4,
        "130": 1,
        "143": 1,
        "193": 2,
        "194": 8,
        "196": 4,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9bffb8b906738e3191bae1feb0517a9a0ca145b512972beeeecf34c4168c9e5e"
    },
    "e35d697280385c1e8d7b25b7f108181a5d424353808f1699272a97af0b09ced5": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\napp_label = {\"app\": \"hello-kubernetes\"}\n\ndeployment = {\n    \"api_version\": \"apps/v1\",\n    \"kind\": \"Deployment\",\n    \"metadata\": {\"name\": \"hello-kubernetes\"},\n    \"spec\": {\n        \"replicas\": 3,\n        \"selector\": {\"match_labels\": app_label},\n        \"template\": {\n            \"metadata\": {\"labels\": app_label},\n            \"spec\": {\n                \"containers\": [{\n                    \"name\": \"hello-kubernetes\",\n                    \"image\": \"paulbouwer/hello-kubernetes:1.5\",\n                    \"ports\": [{\"container_port\": 8080}]\n                }\n                ]\n            }\n        }\n    }\n}\n\nservice = {\n    \"api_version\": \"v1\",\n    \"kind\": \"Service\",\n    \"metadata\": {\"name\": \"hello-kubernetes\"},\n    \"spec\": {\n        \"type\": \"LoadBalancer\",\n        \"ports\": [{\"port\": 80, \"target_port\": 8080}],\n        \"selector\": app_label\n    }\n}\n\n# option 1: use a construct\neks.KubernetesManifest(self, \"hello-kub\",\n    cluster=cluster,\n    manifest=[deployment, service]\n)\n\n# or, option2: use `addManifest`\ncluster.add_manifest(\"hello-kub\", service, deployment)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nIDictionary<string, string> appLabel = new Dictionary<string, string> { { \"app\", \"hello-kubernetes\" } };\n\nIDictionary<string, object> deployment = new Dictionary<string, object> {\n    { \"apiVersion\", \"apps/v1\" },\n    { \"kind\", \"Deployment\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"hello-kubernetes\" } } },\n    { \"spec\", new Dictionary<string, object> {\n        { \"replicas\", 3 },\n        { \"selector\", new Dictionary<string, IDictionary<string, string>> { { \"matchLabels\", appLabel } } },\n        { \"template\", new Dictionary<string, IDictionary<string, IDictionary<string, string>>> {\n            { \"metadata\", new Dictionary<string, IDictionary<string, string>> { { \"labels\", appLabel } } },\n            { \"spec\", new Dictionary<string, IDictionary<string, object>[]> {\n                { \"containers\", new [] { new Dictionary<string, object> {\n                    { \"name\", \"hello-kubernetes\" },\n                    { \"image\", \"paulbouwer/hello-kubernetes:1.5\" },\n                    { \"ports\", new [] { new Dictionary<string, int> { { \"containerPort\", 8080 } } } }\n                } } }\n            } }\n        } }\n    } }\n};\n\nIDictionary<string, object> service = new Dictionary<string, object> {\n    { \"apiVersion\", \"v1\" },\n    { \"kind\", \"Service\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"hello-kubernetes\" } } },\n    { \"spec\", new Dictionary<string, object> {\n        { \"type\", \"LoadBalancer\" },\n        { \"ports\", new [] { new Dictionary<string, int> { { \"port\", 80 }, { \"targetPort\", 8080 } } } },\n        { \"selector\", appLabel }\n    } }\n};\n\n// option 1: use a construct\n// option 1: use a construct\nnew KubernetesManifest(this, \"hello-kub\", new KubernetesManifestProps {\n    Cluster = cluster,\n    Manifest = new [] { deployment, service }\n});\n\n// or, option2: use `addManifest`\ncluster.AddManifest(\"hello-kub\", service, deployment);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nMap<String, String> appLabel = Map.of(\"app\", \"hello-kubernetes\");\n\nMap<String, Object> deployment = Map.of(\n        \"apiVersion\", \"apps/v1\",\n        \"kind\", \"Deployment\",\n        \"metadata\", Map.of(\"name\", \"hello-kubernetes\"),\n        \"spec\", Map.of(\n                \"replicas\", 3,\n                \"selector\", Map.of(\"matchLabels\", appLabel),\n                \"template\", Map.of(\n                        \"metadata\", Map.of(\"labels\", appLabel),\n                        \"spec\", Map.of(\n                                \"containers\", List.of(Map.of(\n                                        \"name\", \"hello-kubernetes\",\n                                        \"image\", \"paulbouwer/hello-kubernetes:1.5\",\n                                        \"ports\", List.of(Map.of(\"containerPort\", 8080))))))));\n\nMap<String, Object> service = Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"Service\",\n        \"metadata\", Map.of(\"name\", \"hello-kubernetes\"),\n        \"spec\", Map.of(\n                \"type\", \"LoadBalancer\",\n                \"ports\", List.of(Map.of(\"port\", 80, \"targetPort\", 8080)),\n                \"selector\", appLabel));\n\n// option 1: use a construct\n// option 1: use a construct\nKubernetesManifest.Builder.create(this, \"hello-kub\")\n        .cluster(cluster)\n        .manifest(List.of(deployment, service))\n        .build();\n\n// or, option2: use `addManifest`\ncluster.addManifest(\"hello-kub\", service, deployment);",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nappLabel := map[string]*string{\n\t\"app\": jsii.String(\"hello-kubernetes\"),\n}\n\ndeployment := map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"apps/v1\"),\n\t\"kind\": jsii.String(\"Deployment\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"hello-kubernetes\"),\n\t},\n\t\"spec\": map[string]interface{}{\n\t\t\"replicas\": jsii.Number(3),\n\t\t\"selector\": map[string]map[string]*string{\n\t\t\t\"matchLabels\": appLabel,\n\t\t},\n\t\t\"template\": map[string]map[string]map[string]*string{\n\t\t\t\"metadata\": map[string]map[string]*string{\n\t\t\t\t\"labels\": appLabel,\n\t\t\t},\n\t\t\t\"spec\": map[string][]map[string]interface{}{\n\t\t\t\t\"containers\": []map[string]interface{}{\n\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\"name\": jsii.String(\"hello-kubernetes\"),\n\t\t\t\t\t\t\"image\": jsii.String(\"paulbouwer/hello-kubernetes:1.5\"),\n\t\t\t\t\t\t\"ports\": []map[string]*f64{\n\t\t\t\t\t\t\tmap[string]*f64{\n\t\t\t\t\t\t\t\t\"containerPort\": jsii.Number(8080),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}\n\nservice := map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"v1\"),\n\t\"kind\": jsii.String(\"Service\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"hello-kubernetes\"),\n\t},\n\t\"spec\": map[string]interface{}{\n\t\t\"type\": jsii.String(\"LoadBalancer\"),\n\t\t\"ports\": []map[string]*f64{\n\t\t\tmap[string]*f64{\n\t\t\t\t\"port\": jsii.Number(80),\n\t\t\t\t\"targetPort\": jsii.Number(8080),\n\t\t\t},\n\t\t},\n\t\t\"selector\": appLabel,\n\t},\n}\n\n// option 1: use a construct\n// option 1: use a construct\neks.NewKubernetesManifest(this, jsii.String(\"hello-kub\"), &kubernetesManifestProps{\n\tcluster: cluster,\n\tmanifest: []map[string]interface{}{\n\t\tdeployment,\n\t\tservice,\n\t},\n})\n\n// or, option2: use `addManifest`\ncluster.addManifest(jsii.String(\"hello-kub\"), service, deployment)",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst appLabel = { app: \"hello-kubernetes\" };\n\nconst deployment = {\n  apiVersion: \"apps/v1\",\n  kind: \"Deployment\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    replicas: 3,\n    selector: { matchLabels: appLabel },\n    template: {\n      metadata: { labels: appLabel },\n      spec: {\n        containers: [\n          {\n            name: \"hello-kubernetes\",\n            image: \"paulbouwer/hello-kubernetes:1.5\",\n            ports: [ { containerPort: 8080 } ],\n          },\n        ],\n      },\n    },\n  },\n};\n\nconst service = {\n  apiVersion: \"v1\",\n  kind: \"Service\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    type: \"LoadBalancer\",\n    ports: [ { port: 80, targetPort: 8080 } ],\n    selector: appLabel,\n  }\n};\n\n// option 1: use a construct\nnew eks.KubernetesManifest(this, 'hello-kub', {\n  cluster,\n  manifest: [ deployment, service ],\n});\n\n// or, option2: use `addManifest`\ncluster.addManifest('hello-kub', service, deployment);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 951
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesManifest",
        "@aws-cdk/aws-eks.KubernetesManifestProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst appLabel = { app: \"hello-kubernetes\" };\n\nconst deployment = {\n  apiVersion: \"apps/v1\",\n  kind: \"Deployment\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    replicas: 3,\n    selector: { matchLabels: appLabel },\n    template: {\n      metadata: { labels: appLabel },\n      spec: {\n        containers: [\n          {\n            name: \"hello-kubernetes\",\n            image: \"paulbouwer/hello-kubernetes:1.5\",\n            ports: [ { containerPort: 8080 } ],\n          },\n        ],\n      },\n    },\n  },\n};\n\nconst service = {\n  apiVersion: \"v1\",\n  kind: \"Service\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    type: \"LoadBalancer\",\n    ports: [ { port: 80, targetPort: 8080 } ],\n    selector: appLabel,\n  }\n};\n\n// option 1: use a construct\nnew eks.KubernetesManifest(this, 'hello-kub', {\n  cluster,\n  manifest: [ deployment, service ],\n});\n\n// or, option2: use `addManifest`\ncluster.addManifest('hello-kub', service, deployment);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 12,
        "75": 47,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 15,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 29,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fe4597de6c8e9d097e147b81b75d3c38f644f2f7e12264366f8282000c107a64"
    },
    "88d1db3f4f2f216f447b95fe76f9f15a8b0a8dff211fb0d2fd3307aa74c2f11f": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\nnamespace = cluster.add_manifest(\"my-namespace\", {\n    \"api_version\": \"v1\",\n    \"kind\": \"Namespace\",\n    \"metadata\": {\"name\": \"my-app\"}\n})\n\nservice = cluster.add_manifest(\"my-service\", {\n    \"metadata\": {\n        \"name\": \"myservice\",\n        \"namespace\": \"my-app\"\n    },\n    \"spec\": {}\n})\n\nservice.node.add_dependency(namespace)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nKubernetesManifest namespace = cluster.AddManifest(\"my-namespace\", new Dictionary<string, object> {\n    { \"apiVersion\", \"v1\" },\n    { \"kind\", \"Namespace\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"my-app\" } } }\n});\n\nKubernetesManifest service = cluster.AddManifest(\"my-service\", new Dictionary<string, object> {\n    { \"metadata\", new Dictionary<string, string> {\n        { \"name\", \"myservice\" },\n        { \"namespace\", \"my-app\" }\n    } },\n    { \"spec\", new Dictionary<string, object> { } }\n});\n\nservice.Node.AddDependency(namespace);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nKubernetesManifest namespace = cluster.addManifest(\"my-namespace\", Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"Namespace\",\n        \"metadata\", Map.of(\"name\", \"my-app\")));\n\nKubernetesManifest service = cluster.addManifest(\"my-service\", Map.of(\n        \"metadata\", Map.of(\n                \"name\", \"myservice\",\n                \"namespace\", \"my-app\"),\n        \"spec\", Map.of()));\n\nservice.node.addDependency(namespace);",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nnamespace := cluster.addManifest(jsii.String(\"my-namespace\"), map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"v1\"),\n\t\"kind\": jsii.String(\"Namespace\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"my-app\"),\n\t},\n})\n\nservice := cluster.addManifest(jsii.String(\"my-service\"), map[string]interface{}{\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"myservice\"),\n\t\t\"namespace\": jsii.String(\"my-app\"),\n\t},\n\t\"spec\": map[string]interface{}{\n\t},\n})\n\nservice.node.addDependency(namespace)",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst namespace = cluster.addManifest('my-namespace', {\n  apiVersion: 'v1',\n  kind: 'Namespace',\n  metadata: { name: 'my-app' },\n});\n\nconst service = cluster.addManifest('my-service', {\n  metadata: {\n    name: 'myservice',\n    namespace: 'my-app',\n  },\n  spec: { }, // ...\n});\n\nservice.node.addDependency(namespace); // will apply `my-namespace` before `my-service`.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1035
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.KubernetesManifest",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst namespace = cluster.addManifest('my-namespace', {\n  apiVersion: 'v1',\n  kind: 'Namespace',\n  metadata: { name: 'my-app' },\n});\n\nconst service = cluster.addManifest('my-service', {\n  metadata: {\n    name: 'myservice',\n    namespace: 'my-app',\n  },\n  spec: { }, // ...\n});\n\nservice.node.addDependency(namespace);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 21,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 4,
        "196": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "8da0f443abb9ffc492ce86fba4e6ae828421a5eee4198c34e2218350e6f4621a"
    },
    "9a53cbae728486eaadb91dbae09639a650321d90cd590974e69bd1d43e290188": {
      "translations": {
        "python": {
          "source": "eks.Cluster(self, \"MyCluster\",\n    version=eks.KubernetesVersion.V1_22,\n    prune=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Cluster(this, \"MyCluster\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    Prune = false\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster.Builder.create(this, \"MyCluster\")\n        .version(KubernetesVersion.V1_22)\n        .prune(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "eks.NewCluster(this, jsii.String(\"MyCluster\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tprune: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "new eks.Cluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_22,\n  prune: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1077
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew eks.Cluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_22,\n  prune: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "fec0bf9e9ca523dfe65df53d74a109d5cde0b91a33ff3bf498c98237b7f57784"
    },
    "fd44975ca1cd0884250f3efcd2fed27b2e5581b22e124256d2a97e680ffe30a0": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\neks.KubernetesManifest(self, \"HelloAppWithoutValidation\",\n    cluster=cluster,\n    manifest=[{\"foo\": \"bar\"}],\n    skip_validation=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nnew KubernetesManifest(this, \"HelloAppWithoutValidation\", new KubernetesManifestProps {\n    Cluster = cluster,\n    Manifest = new [] { new Dictionary<string, object> { { \"foo\", \"bar\" } } },\n    SkipValidation = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nKubernetesManifest.Builder.create(this, \"HelloAppWithoutValidation\")\n        .cluster(cluster)\n        .manifest(List.of(Map.of(\"foo\", \"bar\")))\n        .skipValidation(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\neks.NewKubernetesManifest(this, jsii.String(\"HelloAppWithoutValidation\"), &kubernetesManifestProps{\n\tcluster: cluster,\n\tmanifest: []map[string]interface{}{\n\t\tmap[string]interface{}{\n\t\t\t\"foo\": jsii.String(\"bar\"),\n\t\t},\n\t},\n\tskipValidation: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nnew eks.KubernetesManifest(this, 'HelloAppWithoutValidation', {\n  cluster,\n  manifest: [{ foo: 'bar' }],\n  skipValidation: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1089
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesManifest",
        "@aws-cdk/aws-eks.KubernetesManifestProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew eks.KubernetesManifest(this, 'HelloAppWithoutValidation', {\n  cluster,\n  manifest: [{ foo: 'bar' }],\n  skipValidation: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fe4597de6c8e9d097e147b81b75d3c38f644f2f7e12264366f8282000c107a64"
    },
    "590958fbbd37369a97e9544ce5281b6e0ac15d6d9a559c2d36e9d92ca2fdd2f8": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# option 1: use a construct\neks.HelmChart(self, \"NginxIngress\",\n    cluster=cluster,\n    chart=\"nginx-ingress\",\n    repository=\"https://helm.nginx.com/stable\",\n    namespace=\"kube-system\"\n)\n\n# or, option2: use `addHelmChart`\ncluster.add_helm_chart(\"NginxIngress\",\n    chart=\"nginx-ingress\",\n    repository=\"https://helm.nginx.com/stable\",\n    namespace=\"kube-system\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// option 1: use a construct\n// option 1: use a construct\nnew HelmChart(this, \"NginxIngress\", new HelmChartProps {\n    Cluster = cluster,\n    Chart = \"nginx-ingress\",\n    Repository = \"https://helm.nginx.com/stable\",\n    Namespace = \"kube-system\"\n});\n\n// or, option2: use `addHelmChart`\ncluster.AddHelmChart(\"NginxIngress\", new HelmChartOptions {\n    Chart = \"nginx-ingress\",\n    Repository = \"https://helm.nginx.com/stable\",\n    Namespace = \"kube-system\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// option 1: use a construct\n// option 1: use a construct\nHelmChart.Builder.create(this, \"NginxIngress\")\n        .cluster(cluster)\n        .chart(\"nginx-ingress\")\n        .repository(\"https://helm.nginx.com/stable\")\n        .namespace(\"kube-system\")\n        .build();\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart(\"NginxIngress\", HelmChartOptions.builder()\n        .chart(\"nginx-ingress\")\n        .repository(\"https://helm.nginx.com/stable\")\n        .namespace(\"kube-system\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// option 1: use a construct\n// option 1: use a construct\neks.NewHelmChart(this, jsii.String(\"NginxIngress\"), &helmChartProps{\n\tcluster: cluster,\n\tchart: jsii.String(\"nginx-ingress\"),\n\trepository: jsii.String(\"https://helm.nginx.com/stable\"),\n\tnamespace: jsii.String(\"kube-system\"),\n})\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart(jsii.String(\"NginxIngress\"), &helmChartOptions{\n\tchart: jsii.String(\"nginx-ingress\"),\n\trepository: jsii.String(\"https://helm.nginx.com/stable\"),\n\tnamespace: jsii.String(\"kube-system\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// option 1: use a construct\nnew eks.HelmChart(this, 'NginxIngress', {\n  cluster,\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart('NginxIngress', {\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1109
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.HelmChart",
        "@aws-cdk/aws-eks.HelmChartOptions",
        "@aws-cdk/aws-eks.HelmChartProps",
        "@aws-cdk/aws-eks.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// option 1: use a construct\nnew eks.HelmChart(this, 'NginxIngress', {\n  cluster,\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart('NginxIngress', {\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "38445a0871a444cba345bf9bf375ede385d9fe648e7e219fd87a5d1c1e3db808"
    },
    "a938ccb3eff79e3eb29e5b84b307e3599f935966ccb44fec1fa31eb8e5bccc93": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3_assets as s3_assets\n\n# cluster: eks.Cluster\n\nchart_asset = s3_assets.Asset(self, \"ChartAsset\",\n    path=\"/path/to/asset\"\n)\n\ncluster.add_helm_chart(\"test-chart\",\n    chart_asset=chart_asset\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3.Assets;\n\nCluster cluster;\n\nAsset chartAsset = new Asset(this, \"ChartAsset\", new AssetProps {\n    Path = \"/path/to/asset\"\n});\n\ncluster.AddHelmChart(\"test-chart\", new HelmChartOptions {\n    ChartAsset = chartAsset\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.assets.*;\n\nCluster cluster;\n\nAsset chartAsset = Asset.Builder.create(this, \"ChartAsset\")\n        .path(\"/path/to/asset\")\n        .build();\n\ncluster.addHelmChart(\"test-chart\", HelmChartOptions.builder()\n        .chartAsset(chartAsset)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import s3Assets \"github.com/aws-samples/dummy/awscdkawss3assets\"\n\nvar cluster cluster\nchartAsset := s3Assets.NewAsset(this, jsii.String(\"ChartAsset\"), &assetProps{\n\tpath: jsii.String(\"/path/to/asset\"),\n})\n\ncluster.addHelmChart(jsii.String(\"test-chart\"), &helmChartOptions{\n\tchartAsset: chartAsset,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as s3Assets from '@aws-cdk/aws-s3-assets';\n\ndeclare const cluster: eks.Cluster;\nconst chartAsset = new s3Assets.Asset(this, 'ChartAsset', {\n  path: '/path/to/asset'\n});\n\ncluster.addHelmChart('test-chart', {\n  chartAsset: chartAsset,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1134
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.HelmChartOptions",
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3Assets from '@aws-cdk/aws-s3-assets';\n\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst chartAsset = new s3Assets.Asset(this, 'ChartAsset', {\n  path: '/path/to/asset'\n});\n\ncluster.addHelmChart('test-chart', {\n  chartAsset: chartAsset,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2f4f64945a6f7cb206330c3a6650018538c7c423545c4287f8359d5732109a54"
    },
    "5f842c51d0f407be79843d11bfdf8cb5bba254105f025ff1337f58cae69e87ec": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# option 1: use a construct\neks.HelmChart(self, \"MyOCIChart\",\n    cluster=cluster,\n    chart=\"some-chart\",\n    repository=\"oci://${ACCOUNT_ID}.dkr.ecr.${ACCOUNT_REGION}.amazonaws.com/${REPO_NAME}\",\n    namespace=\"oci\",\n    version=\"0.0.1\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// option 1: use a construct\n// option 1: use a construct\nnew HelmChart(this, \"MyOCIChart\", new HelmChartProps {\n    Cluster = cluster,\n    Chart = \"some-chart\",\n    Repository = \"oci://${ACCOUNT_ID}.dkr.ecr.${ACCOUNT_REGION}.amazonaws.com/${REPO_NAME}\",\n    Namespace = \"oci\",\n    Version = \"0.0.1\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// option 1: use a construct\n// option 1: use a construct\nHelmChart.Builder.create(this, \"MyOCIChart\")\n        .cluster(cluster)\n        .chart(\"some-chart\")\n        .repository(\"oci://${ACCOUNT_ID}.dkr.ecr.${ACCOUNT_REGION}.amazonaws.com/${REPO_NAME}\")\n        .namespace(\"oci\")\n        .version(\"0.0.1\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// option 1: use a construct\n// option 1: use a construct\neks.NewHelmChart(this, jsii.String(\"MyOCIChart\"), &helmChartProps{\n\tcluster: cluster,\n\tchart: jsii.String(\"some-chart\"),\n\trepository: jsii.String(\"oci://${ACCOUNT_ID}.dkr.ecr.${ACCOUNT_REGION}.amazonaws.com/${REPO_NAME}\"),\n\tnamespace: jsii.String(\"oci\"),\n\tversion: jsii.String(\"0.0.1\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// option 1: use a construct\nnew eks.HelmChart(this, 'MyOCIChart', {\n  cluster,\n  chart: 'some-chart',\n  repository: 'oci://${ACCOUNT_ID}.dkr.ecr.${ACCOUNT_REGION}.amazonaws.com/${REPO_NAME}',\n  namespace: 'oci',\n  version: '0.0.1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1152
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.HelmChart",
        "@aws-cdk/aws-eks.HelmChartProps",
        "@aws-cdk/aws-eks.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// option 1: use a construct\nnew eks.HelmChart(this, 'MyOCIChart', {\n  cluster,\n  chart: 'some-chart',\n  repository: 'oci://${ACCOUNT_ID}.dkr.ecr.${ACCOUNT_REGION}.amazonaws.com/${REPO_NAME}',\n  namespace: 'oci',\n  version: '0.0.1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "46348badfd009f2bc6fe16d1e03db5e84dc6ab68881c45aaba1504b668d8d140"
    },
    "b43bfb2501aff4b5d581489abf926653bad1fb0427787363fee4b744134f3e82": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\nchart1 = cluster.add_helm_chart(\"MyChart\",\n    chart=\"foo\"\n)\nchart2 = cluster.add_helm_chart(\"MyChart\",\n    chart=\"bar\"\n)\n\nchart2.node.add_dependency(chart1)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nHelmChart chart1 = cluster.AddHelmChart(\"MyChart\", new HelmChartOptions {\n    Chart = \"foo\"\n});\nHelmChart chart2 = cluster.AddHelmChart(\"MyChart\", new HelmChartOptions {\n    Chart = \"bar\"\n});\n\nchart2.Node.AddDependency(chart1);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nHelmChart chart1 = cluster.addHelmChart(\"MyChart\", HelmChartOptions.builder()\n        .chart(\"foo\")\n        .build());\nHelmChart chart2 = cluster.addHelmChart(\"MyChart\", HelmChartOptions.builder()\n        .chart(\"bar\")\n        .build());\n\nchart2.node.addDependency(chart1);",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nchart1 := cluster.addHelmChart(jsii.String(\"MyChart\"), &helmChartOptions{\n\tchart: jsii.String(\"foo\"),\n})\nchart2 := cluster.addHelmChart(jsii.String(\"MyChart\"), &helmChartOptions{\n\tchart: jsii.String(\"bar\"),\n})\n\nchart2.node.addDependency(chart1)",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst chart1 = cluster.addHelmChart('MyChart', {\n  chart: 'foo',\n});\nconst chart2 = cluster.addHelmChart('MyChart', {\n  chart: 'bar',\n});\n\nchart2.node.addDependency(chart1);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1179
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.HelmChart",
        "@aws-cdk/aws-eks.HelmChartOptions",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst chart1 = cluster.addHelmChart('MyChart', {\n  chart: 'foo',\n});\nconst chart2 = cluster.addHelmChart('MyChart', {\n  chart: 'bar',\n});\n\nchart2.node.addDependency(chart1);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "cad0afe11eafc9510e4f74e9e3ac4562ae3496411f454425fc4294282871aeb5"
    },
    "f3d9d2397181743195bb7c85c295bbcce5dec2ebc5b10558ea22572a88777d6a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3 as s3\nimport constructs as constructs\nimport cdk8s as cdk8s\nimport cdk8s_plus_21 as kplus\n\nclass MyChart(cdk8s.Chart):\n    def __init__(self, scope, id, *, bucket):\n        super().__init__(scope, id)\n\n        kplus.Pod(self, \"Pod\",\n            containers=[\n                kplus.Container(\n                    image=\"my-image\",\n                    env={\n                        \"BUCKET_NAME\": kplus.EnvValue.from_value(bucket.bucket_name)\n                    }\n                )\n            ]\n        )",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3;\nusing Constructs;\nusing Org.Cdk8s;\nusing Org.Cdk8s.Plus21;\n\nclass MyChartProps\n{\n    public Bucket Bucket { get; set; }\n}\n\nclass MyChart : Chart\n{\n    public MyChart(Construct scope, string id, MyChartProps props) : base(scope, id)\n    {\n\n        new Pod(this, \"Pod\", new PodProps {\n            Containers = new [] {\n                new Container(new ContainerProps {\n                    Image = \"my-image\",\n                    Env = new Dictionary<string, EnvValue> {\n                        { \"BUCKET_NAME\", EnvValue.FromValue(props.Bucket.BucketName) }\n                    }\n                }) }\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.*;\nimport software.constructs.*;\nimport org.cdk8s.*;\nimport org.cdk8s.plus21.*;\n\npublic class MyChartProps {\n    private Bucket bucket;\n    public Bucket getBucket() {\n        return this.bucket;\n    }\n    public MyChartProps bucket(Bucket bucket) {\n        this.bucket = bucket;\n        return this;\n    }\n}\n\npublic class MyChart extends Chart {\n    public MyChart(Construct scope, String id, MyChartProps props) {\n        super(scope, id);\n\n        Pod.Builder.create(this, \"Pod\")\n                .containers(List.of(\n                    Container.Builder.create()\n                            .image(\"my-image\")\n                            .env(Map.of(\n                                    \"BUCKET_NAME\", EnvValue.fromValue(props.getBucket().getBucketName())))\n                            .build()))\n                .build();\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "import s3 \"github.com/aws-samples/dummy/awscdkawss3\"import constructs \"github.com/aws/constructs-go/constructs\"import cdk8s \"github.com/cdk8s-team/cdk8s-core-go/cdk8s\"import kplus \"github.com/cdk8s-team/cdk8s-plus-go/cdk8splus21\"\n\ntype myChartProps struct {\n\tbucket bucket\n}\n\ntype MyChart struct {\n\tchart\n}\n\nfunc NewMyChart(scope construct, id *string, props myChartProps) *MyChart {\n\tthis := &MyChart{}\n\tcdk8s.NewChart_Override(this, scope, id)\n\n\tkplus.NewPod(this, jsii.String(\"Pod\"), &podProps{\n\t\tcontainers: []containerProps{\n\t\t\tkplus.NewContainer(&containerProps{\n\t\t\t\timage: jsii.String(\"my-image\"),\n\t\t\t\tenv: map[string]envValue{\n\t\t\t\t\t\"BUCKET_NAME\": kplus.*envValue.fromValue(props.bucket.bucketName),\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t})\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as s3 from '@aws-cdk/aws-s3';\nimport * as constructs from 'constructs';\nimport * as cdk8s from 'cdk8s';\nimport * as kplus from 'cdk8s-plus-21';\n\nexport interface MyChartProps {\n  readonly bucket: s3.Bucket;\n}\n\nexport class MyChart extends cdk8s.Chart {\n  constructor(scope: constructs.Construct, id: string, props: MyChartProps) {\n    super(scope, id);\n\n    new kplus.Pod(this, 'Pod', {\n      containers: [\n        new kplus.Container({\n          image: 'my-image',\n          env: {\n            BUCKET_NAME: kplus.EnvValue.fromValue(props.bucket.bucketName),\n          },\n        }),\n      ],\n    });\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1227
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket#bucketName",
        "cdk8s-plus-21.Container",
        "cdk8s-plus-21.ContainerProps",
        "cdk8s-plus-21.EnvValue",
        "cdk8s-plus-21.EnvValue#fromValue",
        "cdk8s-plus-21.Pod",
        "cdk8s-plus-21.PodProps",
        "cdk8s.Chart",
        "constructs.Construct"
      ],
      "fullSource": "import * as s3 from '@aws-cdk/aws-s3';\nimport * as constructs from 'constructs';\nimport * as cdk8s from 'cdk8s';\nimport * as kplus from 'cdk8s-plus-21';\n\nexport interface MyChartProps {\n  readonly bucket: s3.Bucket;\n}\n\nexport class MyChart extends cdk8s.Chart {\n  constructor(scope: constructs.Construct, id: string, props: MyChartProps) {\n    super(scope, id);\n\n    new kplus.Pod(this, 'Pod', {\n      containers: [\n        new kplus.Container({\n          image: 'my-image',\n          env: {\n            BUCKET_NAME: kplus.EnvValue.fromValue(props.bucket.bucketName),\n          },\n        }),\n      ],\n    });\n  }\n}",
      "syntaxKindCounter": {
        "10": 6,
        "75": 33,
        "89": 2,
        "102": 1,
        "104": 1,
        "138": 1,
        "143": 1,
        "153": 2,
        "156": 3,
        "158": 1,
        "162": 1,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 7,
        "196": 2,
        "197": 2,
        "216": 1,
        "223": 1,
        "226": 2,
        "245": 1,
        "246": 1,
        "254": 4,
        "255": 4,
        "256": 4,
        "279": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "af0e3f71b6a7a892a6a519f22bf178089279e4793de602325e44d7838db03a86"
    },
    "952523441b053309bb606b5b5965e62f1071657698e73ae5a92aea976800ad34": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n\n# some bucket..\nbucket = s3.Bucket(self, \"Bucket\")\n\n# create a cdk8s chart and use `cdk8s.App` as the scope.\nmy_chart = MyChart(cdk8s.App(), \"MyChart\", bucket=bucket)\n\n# add the cdk8s chart to the cluster\ncluster.add_cdk8s_chart(\"my-chart\", my_chart)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\n// some bucket..\nBucket bucket = new Bucket(this, \"Bucket\");\n\n// create a cdk8s chart and use `cdk8s.App` as the scope.\nMyChart myChart = new MyChart(new App(), \"MyChart\", new MyChartProps { Bucket = bucket });\n\n// add the cdk8s chart to the cluster\ncluster.AddCdk8sChart(\"my-chart\", myChart);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\n// some bucket..\nBucket bucket = new Bucket(this, \"Bucket\");\n\n// create a cdk8s chart and use `cdk8s.App` as the scope.\nMyChart myChart = new MyChart(new App(), \"MyChart\", new MyChartProps().bucket(bucket));\n\n// add the cdk8s chart to the cluster\ncluster.addCdk8sChart(\"my-chart\", myChart);",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\n\n// some bucket..\nbucket := s3.NewBucket(this, jsii.String(\"Bucket\"))\n\n// create a cdk8s chart and use `cdk8s.App` as the scope.\nmyChart := NewMyChart(cdk8s.NewApp(), jsii.String(\"MyChart\"), &myChartProps{\n\tbucket: bucket,\n})\n\n// add the cdk8s chart to the cluster\ncluster.addCdk8sChart(jsii.String(\"my-chart\"), myChart)",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n\n// some bucket..\nconst bucket = new s3.Bucket(this, 'Bucket');\n\n// create a cdk8s chart and use `cdk8s.App` as the scope.\nconst myChart = new MyChart(new cdk8s.App(), 'MyChart', { bucket });\n\n// add the cdk8s chart to the cluster\ncluster.addCdk8sChart('my-chart', myChart);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1257
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "cdk8s-plus-21.EnvValue",
        "cdk8s.App",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk8s from 'cdk8s';\nimport * as kplus from 'cdk8s-plus-21';\n\ninterface MyChartProps {\n  readonly bucket: s3.Bucket;\n}\n\nclass MyChart extends cdk8s.Chart {\n  constructor(scope: Construct, id: string, props: MyChartProps) {\n    super(scope, id);\n\n    new kplus.Pod(this, 'Pod', {\n      containers: [\n        new kplus.Container({\n          image: 'my-image',\n          env: {\n            BUCKET_NAME: kplus.EnvValue.fromValue(props.bucket.bucketName),\n          },\n        }),\n      ],\n    });\n  }\n}\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// some bucket..\nconst bucket = new s3.Bucket(this, 'Bucket');\n\n// create a cdk8s chart and use `cdk8s.App` as the scope.\nconst myChart = new MyChart(new cdk8s.App(), 'MyChart', { bucket });\n\n// add the cdk8s chart to the cluster\ncluster.addCdk8sChart('my-chart', myChart);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5da7b03a70371dfe9bc6014fe898710c08ad8158aac79ae224b4e751077f8565"
    },
    "62206cc52813824896d6900d565d99b791e4b7e8b120c9bec177865604a78fbf": {
      "translations": {
        "python": {
          "source": "import constructs as constructs\nimport cdk8s as cdk8s\nimport cdk8s_plus_21 as kplus\n\napp = cdk8s.App()\nchart = cdk8s.Chart(app, \"my-chart\")\n\nclass LoadBalancedWebService(constructs.Construct):\n    def __init__(self, scope, id, props):\n        super().__init__(scope, id)\n\n        deployment = kplus.Deployment(chart, \"Deployment\",\n            replicas=props.replicas,\n            containers=[kplus.Container(image=props.image)]\n        )\n\n        deployment.expose_via_service(\n            port=props.port,\n            service_type=kplus.ServiceType.LOAD_BALANCER\n        )",
          "version": "2"
        },
        "csharp": {
          "source": "using Constructs;\nusing Org.Cdk8s;\nusing Org.Cdk8s.Plus21;\n\nclass LoadBalancedWebService\n{\n    public int Port { get; set; }\n    public string Image { get; set; }\n    public int Replicas { get; set; }\n}\n\nApp app = new App();\nChart chart = new Chart(app, \"my-chart\");\n\nclass LoadBalancedWebService : Construct\n{\n    public LoadBalancedWebService(Construct scope, string id, LoadBalancedWebService props) : base(scope, id)\n    {\n\n        Deployment deployment = new Deployment(chart, \"Deployment\", new DeploymentProps {\n            Replicas = props.Replicas,\n            Containers = new [] { new Container(new ContainerProps { Image = props.Image }) }\n        });\n\n        deployment.ExposeViaService(new ExposeDeploymentViaServiceOptions {\n            Port = props.Port,\n            ServiceType = ServiceType.LOAD_BALANCER\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.constructs.*;\nimport org.cdk8s.*;\nimport org.cdk8s.plus21.*;\n\npublic class LoadBalancedWebService {\n    private Number port;\n    public Number getPort() {\n        return this.port;\n    }\n    public LoadBalancedWebService port(Number port) {\n        this.port = port;\n        return this;\n    }\n    private String image;\n    public String getImage() {\n        return this.image;\n    }\n    public LoadBalancedWebService image(String image) {\n        this.image = image;\n        return this;\n    }\n    private Number replicas;\n    public Number getReplicas() {\n        return this.replicas;\n    }\n    public LoadBalancedWebService replicas(Number replicas) {\n        this.replicas = replicas;\n        return this;\n    }\n}\n\nApp app = new App();\nChart chart = new Chart(app, \"my-chart\");\n\npublic class LoadBalancedWebService extends Construct {\n    public LoadBalancedWebService(Construct scope, String id, LoadBalancedWebService props) {\n        super(scope, id);\n\n        Deployment deployment = Deployment.Builder.create(chart, \"Deployment\")\n                .replicas(props.getReplicas())\n                .containers(List.of(Container.Builder.create().image(props.getImage()).build()))\n                .build();\n\n        deployment.exposeViaService(ExposeDeploymentViaServiceOptions.builder()\n                .port(props.getPort())\n                .serviceType(ServiceType.LOAD_BALANCER)\n                .build());\n    }\n}",
          "version": "1"
        },
        "go": {
          "source": "import constructs \"github.com/aws/constructs-go/constructs\"import cdk8s \"github.com/cdk8s-team/cdk8s-core-go/cdk8s\"import kplus \"github.com/cdk8s-team/cdk8s-plus-go/cdk8splus21\"\n\ntype loadBalancedWebService struct {\n\tport *f64\n\timage *string\n\treplicas *f64\n}\n\napp := cdk8s.NewApp()\nchart := cdk8s.NewChart(app, jsii.String(\"my-chart\"))\n\ntype loadBalancedWebService struct {\n\tconstruct\n}\n\nfunc NewLoadBalancedWebService(scope construct, id *string, props loadBalancedWebService) *loadBalancedWebService {\n\tthis := &loadBalancedWebService{}\n\tconstructs.NewConstruct_Override(this, scope, id)\n\n\tdeployment := kplus.NewDeployment(chart, jsii.String(\"Deployment\"), &deploymentProps{\n\t\treplicas: props.replicas,\n\t\tcontainers: []containerProps{\n\t\t\tkplus.NewContainer(&containerProps{\n\t\t\t\timage: props.image,\n\t\t\t}),\n\t\t},\n\t})\n\n\tdeployment.exposeViaService(&exposeDeploymentViaServiceOptions{\n\t\tport: props.port,\n\t\tserviceType: kplus.serviceType_LOAD_BALANCER,\n\t})\n\treturn this\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as constructs from 'constructs';\nimport * as cdk8s from 'cdk8s';\nimport * as kplus from 'cdk8s-plus-21';\n\nexport interface LoadBalancedWebService {\n  readonly port: number;\n  readonly image: string;\n  readonly replicas: number;\n}\n\nconst app = new cdk8s.App();\nconst chart = new cdk8s.Chart(app, 'my-chart');\n\nexport class LoadBalancedWebService extends constructs.Construct {\n  constructor(scope: constructs.Construct, id: string, props: LoadBalancedWebService) {\n    super(scope, id);\n\n    const deployment = new kplus.Deployment(chart, 'Deployment', {\n      replicas: props.replicas,\n      containers: [ new kplus.Container({ image: props.image }) ],\n    });\n\n    deployment.exposeViaService({\n      port: props.port,\n      serviceType: kplus.ServiceType.LOAD_BALANCER,\n    });\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1276
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "cdk8s-plus-21.Container",
        "cdk8s-plus-21.ContainerProps",
        "cdk8s-plus-21.Deployment",
        "cdk8s-plus-21.Deployment#exposeViaService",
        "cdk8s-plus-21.DeploymentProps",
        "cdk8s-plus-21.ExposeDeploymentViaServiceOptions",
        "cdk8s-plus-21.ServiceType",
        "cdk8s-plus-21.ServiceType#LOAD_BALANCER",
        "cdk8s.App",
        "cdk8s.Chart",
        "constructs.Construct"
      ],
      "fullSource": "import * as constructs from 'constructs';\nimport * as cdk8s from 'cdk8s';\nimport * as kplus from 'cdk8s-plus-21';\n\nexport interface LoadBalancedWebService {\n  readonly port: number;\n  readonly image: string;\n  readonly replicas: number;\n}\n\nconst app = new cdk8s.App();\nconst chart = new cdk8s.Chart(app, 'my-chart');\n\nexport class LoadBalancedWebService extends constructs.Construct {\n  constructor(scope: constructs.Construct, id: string, props: LoadBalancedWebService) {\n    super(scope, id);\n\n    const deployment = new kplus.Deployment(chart, 'Deployment', {\n      replicas: props.replicas,\n      containers: [ new kplus.Container({ image: props.image }) ],\n    });\n\n    deployment.exposeViaService({\n      port: props.port,\n      serviceType: kplus.ServiceType.LOAD_BALANCER,\n    });\n  }\n}",
      "syntaxKindCounter": {
        "10": 5,
        "75": 47,
        "89": 2,
        "102": 1,
        "138": 3,
        "140": 2,
        "143": 2,
        "153": 1,
        "156": 3,
        "158": 3,
        "162": 1,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 11,
        "196": 2,
        "197": 4,
        "216": 1,
        "223": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "245": 1,
        "246": 1,
        "254": 3,
        "255": 3,
        "256": 3,
        "279": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fed647ebddc7b4a778836ef8ca3b85501d4e340550485811639e37e28145fa42"
    },
    "79e3d46fd36f8ccc57362eaf0c162c8399a17dff487e015a6828a9fd57fbab7f": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\neks.KubernetesPatch(self, \"hello-kub-deployment-label\",\n    cluster=cluster,\n    resource_name=\"deployment/hello-kubernetes\",\n    apply_patch={\"spec\": {\"replicas\": 5}},\n    restore_patch={\"spec\": {\"replicas\": 3}}\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nnew KubernetesPatch(this, \"hello-kub-deployment-label\", new KubernetesPatchProps {\n    Cluster = cluster,\n    ResourceName = \"deployment/hello-kubernetes\",\n    ApplyPatch = new Dictionary<string, object> { { \"spec\", new Dictionary<string, int> { { \"replicas\", 5 } } } },\n    RestorePatch = new Dictionary<string, object> { { \"spec\", new Dictionary<string, int> { { \"replicas\", 3 } } } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nKubernetesPatch.Builder.create(this, \"hello-kub-deployment-label\")\n        .cluster(cluster)\n        .resourceName(\"deployment/hello-kubernetes\")\n        .applyPatch(Map.of(\"spec\", Map.of(\"replicas\", 5)))\n        .restorePatch(Map.of(\"spec\", Map.of(\"replicas\", 3)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\neks.NewKubernetesPatch(this, jsii.String(\"hello-kub-deployment-label\"), &kubernetesPatchProps{\n\tcluster: cluster,\n\tresourceName: jsii.String(\"deployment/hello-kubernetes\"),\n\tapplyPatch: map[string]interface{}{\n\t\t\"spec\": map[string]*f64{\n\t\t\t\"replicas\": jsii.Number(5),\n\t\t},\n\t},\n\trestorePatch: map[string]interface{}{\n\t\t\"spec\": map[string]*f64{\n\t\t\t\"replicas\": jsii.Number(3),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nnew eks.KubernetesPatch(this, 'hello-kub-deployment-label', {\n  cluster,\n  resourceName: \"deployment/hello-kubernetes\",\n  applyPatch: { spec: { replicas: 5 } },\n  restorePatch: { spec: { replicas: 3 } },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1319
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesPatch",
        "@aws-cdk/aws-eks.KubernetesPatchProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew eks.KubernetesPatch(this, 'hello-kub-deployment-label', {\n  cluster,\n  resourceName: \"deployment/hello-kubernetes\",\n  applyPatch: { spec: { replicas: 5 } },\n  restorePatch: { spec: { replicas: 3 } },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6ee8677baebf5b880f7c82c45239e98fead70dfbcf24ba14624291a85a135c04"
    },
    "9e0b945227c6182ada1ed36bc9911cae385698a4c08e10c00ba097b31d439087": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# query the load balancer address\nmy_service_address = eks.KubernetesObjectValue(self, \"LoadBalancerAttribute\",\n    cluster=cluster,\n    object_type=\"service\",\n    object_name=\"my-service\",\n    json_path=\".status.loadBalancer.ingress[0].hostname\"\n)\n\n# pass the address to a lambda function\nproxy_function = lambda_.Function(self, \"ProxyFunction\",\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"my-code\"),\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    environment={\n        \"my_service_address\": my_service_address.value\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// query the load balancer address\nKubernetesObjectValue myServiceAddress = new KubernetesObjectValue(this, \"LoadBalancerAttribute\", new KubernetesObjectValueProps {\n    Cluster = cluster,\n    ObjectType = \"service\",\n    ObjectName = \"my-service\",\n    JsonPath = \".status.loadBalancer.ingress[0].hostname\"\n});\n\n// pass the address to a lambda function\nFunction proxyFunction = new Function(this, \"ProxyFunction\", new FunctionProps {\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"my-code\"),\n    Runtime = Runtime.NODEJS_14_X,\n    Environment = new Dictionary<string, string> {\n        { \"myServiceAddress\", myServiceAddress.Value }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// query the load balancer address\nKubernetesObjectValue myServiceAddress = KubernetesObjectValue.Builder.create(this, \"LoadBalancerAttribute\")\n        .cluster(cluster)\n        .objectType(\"service\")\n        .objectName(\"my-service\")\n        .jsonPath(\".status.loadBalancer.ingress[0].hostname\")\n        .build();\n\n// pass the address to a lambda function\nFunction proxyFunction = Function.Builder.create(this, \"ProxyFunction\")\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"my-code\"))\n        .runtime(Runtime.NODEJS_14_X)\n        .environment(Map.of(\n                \"myServiceAddress\", myServiceAddress.getValue()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// query the load balancer address\nmyServiceAddress := eks.NewKubernetesObjectValue(this, jsii.String(\"LoadBalancerAttribute\"), &kubernetesObjectValueProps{\n\tcluster: cluster,\n\tobjectType: jsii.String(\"service\"),\n\tobjectName: jsii.String(\"my-service\"),\n\tjsonPath: jsii.String(\".status.loadBalancer.ingress[0].hostname\"),\n})\n\n// pass the address to a lambda function\nproxyFunction := lambda.NewFunction(this, jsii.String(\"ProxyFunction\"), &functionProps{\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromInline(jsii.String(\"my-code\")),\n\truntime: lambda.runtime_NODEJS_14_X(),\n\tenvironment: map[string]*string{\n\t\t\"myServiceAddress\": myServiceAddress.value,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// query the load balancer address\nconst myServiceAddress = new eks.KubernetesObjectValue(this, 'LoadBalancerAttribute', {\n  cluster: cluster,\n  objectType: 'service',\n  objectName: 'my-service',\n  jsonPath: '.status.loadBalancer.ingress[0].hostname', // https://kubernetes.io/docs/reference/kubectl/jsonpath/\n});\n\n// pass the address to a lambda function\nconst proxyFunction = new lambda.Function(this, 'ProxyFunction', {\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('my-code'),\n  runtime: lambda.Runtime.NODEJS_14_X,\n  environment: {\n    myServiceAddress: myServiceAddress.value,\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1336
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesObjectValue",
        "@aws-cdk/aws-eks.KubernetesObjectValueProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// query the load balancer address\nconst myServiceAddress = new eks.KubernetesObjectValue(this, 'LoadBalancerAttribute', {\n  cluster: cluster,\n  objectType: 'service',\n  objectName: 'my-service',\n  jsonPath: '.status.loadBalancer.ingress[0].hostname', // https://kubernetes.io/docs/reference/kubectl/jsonpath/\n});\n\n// pass the address to a lambda function\nconst proxyFunction = new lambda.Function(this, 'ProxyFunction', {\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('my-code'),\n  runtime: lambda.Runtime.NODEJS_14_X,\n  environment: {\n    myServiceAddress: myServiceAddress.value,\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "fbf5e2473713c3f4c8bb0106f4984cd43cac34a54417e1314b9062188b9c1f37"
    },
    "e5fa523eb29f56e50a1897a001ace5fc1a8fe9fdf82fdbc4bbd9feaa4b1028a4": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\nload_balancer_address = cluster.get_service_load_balancer_address(\"my-service\")",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nstring loadBalancerAddress = cluster.GetServiceLoadBalancerAddress(\"my-service\");",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nString loadBalancerAddress = cluster.getServiceLoadBalancerAddress(\"my-service\");",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nloadBalancerAddress := cluster.getServiceLoadBalancerAddress(jsii.String(\"my-service\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst loadBalancerAddress = cluster.getServiceLoadBalancerAddress('my-service');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1359
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster#getServiceLoadBalancerAddress"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancerAddress = cluster.getServiceLoadBalancerAddress('my-service');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "e11ea74428894f3ac995286f1547d953ea551754e5db501931807cd8fe2fefd2"
    },
    "0506c5007664c2f22d42d921ed2088b548809a63018d98c8a7b24c43122d0a80": {
      "translations": {
        "python": {
          "source": "cluster = eks.Cluster.from_cluster_attributes(self, \"MyCluster\",\n    cluster_name=\"my-cluster-name\",\n    kubectl_role_arn=\"arn:aws:iam::1111111:role/iam-role-that-has-masters-access\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ICluster cluster = Cluster.FromClusterAttributes(this, \"MyCluster\", new ClusterAttributes {\n    ClusterName = \"my-cluster-name\",\n    KubectlRoleArn = \"arn:aws:iam::1111111:role/iam-role-that-has-masters-access\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ICluster cluster = Cluster.fromClusterAttributes(this, \"MyCluster\", ClusterAttributes.builder()\n        .clusterName(\"my-cluster-name\")\n        .kubectlRoleArn(\"arn:aws:iam::1111111:role/iam-role-that-has-masters-access\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.cluster.fromClusterAttributes(this, jsii.String(\"MyCluster\"), &clusterAttributes{\n\tclusterName: jsii.String(\"my-cluster-name\"),\n\tkubectlRoleArn: jsii.String(\"arn:aws:iam::1111111:role/iam-role-that-has-masters-access\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = eks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  clusterName: 'my-cluster-name',\n  kubectlRoleArn: 'arn:aws:iam::1111111:role/iam-role-that-has-masters-access',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1373
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#fromClusterAttributes",
        "@aws-cdk/aws-eks.ClusterAttributes",
        "@aws-cdk/aws-eks.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  clusterName: 'my-cluster-name',\n  kubectlRoleArn: 'arn:aws:iam::1111111:role/iam-role-that-has-masters-access',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "2a837cd812a915c40dd0eab29290b554346d11273be644ad479c4d44988ac085"
    },
    "667bbce003fa4c11dad3eb35f871acf6f9ab0f91d845619860b818f9cd5b7b94": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_manifest(\"Test\", {\n    \"api_version\": \"v1\",\n    \"kind\": \"ConfigMap\",\n    \"metadata\": {\n        \"name\": \"myconfigmap\"\n    },\n    \"data\": {\n        \"Key\": \"value\",\n        \"Another\": \"123454\"\n    }\n})",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddManifest(\"Test\", new Dictionary<string, object> {\n    { \"apiVersion\", \"v1\" },\n    { \"kind\", \"ConfigMap\" },\n    { \"metadata\", new Dictionary<string, string> {\n        { \"name\", \"myconfigmap\" }\n    } },\n    { \"data\", new Dictionary<string, string> {\n        { \"Key\", \"value\" },\n        { \"Another\", \"123454\" }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addManifest(\"Test\", Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"ConfigMap\",\n        \"metadata\", Map.of(\n                \"name\", \"myconfigmap\"),\n        \"data\", Map.of(\n                \"Key\", \"value\",\n                \"Another\", \"123454\")));",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addManifest(jsii.String(\"Test\"), map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"v1\"),\n\t\"kind\": jsii.String(\"ConfigMap\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"myconfigmap\"),\n\t},\n\t\"data\": map[string]*string{\n\t\t\"Key\": jsii.String(\"value\"),\n\t\t\"Another\": jsii.String(\"123454\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addManifest('Test', {\n  apiVersion: 'v1',\n  kind: 'ConfigMap',\n  metadata: {\n    name: 'myconfigmap',\n  },\n  data: {\n    Key: 'value',\n    Another: '123454',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1383
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addManifest('Test', {\n  apiVersion: 'v1',\n  kind: 'ConfigMap',\n  metadata: {\n    name: 'myconfigmap',\n  },\n  data: {\n    Key: 'value',\n    Another: '123454',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "b2cd86e5feb2bbd62ca10697c058e555e179d09cb523230eb9cec61c8aed9c50": {
      "translations": {
        "python": {
          "source": "cluster = eks.Cluster(self, \"Cluster\",\n    # ...\n    version=eks.KubernetesVersion.V1_22,\n    cluster_logging=[eks.ClusterLoggingTypes.API, eks.ClusterLoggingTypes.AUTHENTICATOR, eks.ClusterLoggingTypes.SCHEDULER\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    // ...\n    Version = KubernetesVersion.V1_22,\n    ClusterLogging = new [] { ClusterLoggingTypes.API, ClusterLoggingTypes.AUTHENTICATOR, ClusterLoggingTypes.SCHEDULER }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        // ...\n        .version(KubernetesVersion.V1_22)\n        .clusterLogging(List.of(ClusterLoggingTypes.API, ClusterLoggingTypes.AUTHENTICATOR, ClusterLoggingTypes.SCHEDULER))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\t// ...\n\tversion: eks.kubernetesVersion_V1_22(),\n\tclusterLogging: []clusterLoggingTypes{\n\t\teks.*clusterLoggingTypes_API,\n\t\teks.*clusterLoggingTypes_AUTHENTICATOR,\n\t\teks.*clusterLoggingTypes_SCHEDULER,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.Cluster(this, 'Cluster', {\n  // ...\n  version: eks.KubernetesVersion.V1_22,\n  clusterLogging: [\n    eks.ClusterLoggingTypes.API,\n    eks.ClusterLoggingTypes.AUTHENTICATOR,\n    eks.ClusterLoggingTypes.SCHEDULER,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-eks"
        },
        "field": {
          "field": "markdown",
          "line": 1431
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterLoggingTypes",
        "@aws-cdk/aws-eks.ClusterLoggingTypes#API",
        "@aws-cdk/aws-eks.ClusterLoggingTypes#AUTHENTICATOR",
        "@aws-cdk/aws-eks.ClusterLoggingTypes#SCHEDULER",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.Cluster(this, 'Cluster', {\n  // ...\n  version: eks.KubernetesVersion.V1_22,\n  clusterLogging: [\n    eks.ClusterLoggingTypes.API,\n    eks.ClusterLoggingTypes.AUTHENTICATOR,\n    eks.ClusterLoggingTypes.SCHEDULER,\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 17,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 9,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5850ccac70e031a1a23485f633584eb0b6116f0c4be0bdf3d2fc478a168a851d"
    },
    "3887c62c0036d0ede8d6ba49eb4b2736f683cbd1ea1ce3cbc97604f927abb219": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\n# alb_controller_version: eks.AlbControllerVersion\n# cluster: eks.Cluster\n# policy: Any\n\nalb_controller = eks.AlbController(self, \"MyAlbController\",\n    cluster=cluster,\n    version=alb_controller_version,\n\n    # the properties below are optional\n    policy=policy,\n    repository=\"repository\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nAlbControllerVersion albControllerVersion;\nCluster cluster;\nvar policy;\n\nAlbController albController = new AlbController(this, \"MyAlbController\", new AlbControllerProps {\n    Cluster = cluster,\n    Version = albControllerVersion,\n\n    // the properties below are optional\n    Policy = policy,\n    Repository = \"repository\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nAlbControllerVersion albControllerVersion;\nCluster cluster;\nObject policy;\n\nAlbController albController = AlbController.Builder.create(this, \"MyAlbController\")\n        .cluster(cluster)\n        .version(albControllerVersion)\n\n        // the properties below are optional\n        .policy(policy)\n        .repository(\"repository\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nvar albControllerVersion albControllerVersion\nvar cluster cluster\nvar policy interface{}\nalbController := eks.NewAlbController(this, jsii.String(\"MyAlbController\"), &albControllerProps{\n\tcluster: cluster,\n\tversion: albControllerVersion,\n\n\t// the properties below are optional\n\tpolicy: policy,\n\trepository: jsii.String(\"repository\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const albControllerVersion: eks.AlbControllerVersion;\ndeclare const cluster: eks.Cluster;\ndeclare const policy: any;\nconst albController = new eks.AlbController(this, 'MyAlbController', {\n  cluster: cluster,\n  version: albControllerVersion,\n\n  // the properties below are optional\n  policy: policy,\n  repository: 'repository',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.AlbController"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.AlbController",
        "@aws-cdk/aws-eks.AlbControllerProps",
        "@aws-cdk/aws-eks.AlbControllerVersion",
        "@aws-cdk/aws-eks.Cluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const albControllerVersion: eks.AlbControllerVersion;\ndeclare const cluster: eks.Cluster;\ndeclare const policy: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst albController = new eks.AlbController(this, 'MyAlbController', {\n  cluster: cluster,\n  version: albControllerVersion,\n\n  // the properties below are optional\n  policy: policy,\n  repository: 'repository',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "125": 1,
        "130": 3,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "5193a970fdd57ab6d6f714cf21a950d47429b89c7fb069629fc4dc40dd63be4c"
    },
    "ad4fb893eeb524fef85c924234a236630349cb60c51da4b8feb86cd2e24cce47": {
      "translations": {
        "python": {
          "source": "eks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    alb_controller=eks.AlbControllerOptions(\n        version=eks.AlbControllerVersion.V2_4_1\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    AlbController = new AlbControllerOptions {\n        Version = AlbControllerVersion.V2_4_1\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .albController(AlbControllerOptions.builder()\n                .version(AlbControllerVersion.V2_4_1)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "eks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\talbController: &albControllerOptions{\n\t\tversion: eks.albControllerVersion_V2_4_1(),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  albController: {\n    version: eks.AlbControllerVersion.V2_4_1,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.AlbControllerOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.AlbControllerOptions",
        "@aws-cdk/aws-eks.AlbControllerVersion",
        "@aws-cdk/aws-eks.AlbControllerVersion#V2_4_1",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  albController: {\n    version: eks.AlbControllerVersion.V2_4_1,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "44f8cbe8d81ace0d2b92ff92e4e4cd980db34ab13008b31be7c6ed924800c34f"
    },
    "8fba159ca90db211a962a055c76e85792fc1db8038d0b091530cb2387c0c6fb0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\n# alb_controller_version: eks.AlbControllerVersion\n# cluster: eks.Cluster\n# policy: Any\n\nalb_controller_props = eks.AlbControllerProps(\n    cluster=cluster,\n    version=alb_controller_version,\n\n    # the properties below are optional\n    policy=policy,\n    repository=\"repository\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nAlbControllerVersion albControllerVersion;\nCluster cluster;\nvar policy;\n\nAlbControllerProps albControllerProps = new AlbControllerProps {\n    Cluster = cluster,\n    Version = albControllerVersion,\n\n    // the properties below are optional\n    Policy = policy,\n    Repository = \"repository\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nAlbControllerVersion albControllerVersion;\nCluster cluster;\nObject policy;\n\nAlbControllerProps albControllerProps = AlbControllerProps.builder()\n        .cluster(cluster)\n        .version(albControllerVersion)\n\n        // the properties below are optional\n        .policy(policy)\n        .repository(\"repository\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nvar albControllerVersion albControllerVersion\nvar cluster cluster\nvar policy interface{}\nalbControllerProps := &albControllerProps{\n\tcluster: cluster,\n\tversion: albControllerVersion,\n\n\t// the properties below are optional\n\tpolicy: policy,\n\trepository: jsii.String(\"repository\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const albControllerVersion: eks.AlbControllerVersion;\ndeclare const cluster: eks.Cluster;\ndeclare const policy: any;\nconst albControllerProps: eks.AlbControllerProps = {\n  cluster: cluster,\n  version: albControllerVersion,\n\n  // the properties below are optional\n  policy: policy,\n  repository: 'repository',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.AlbControllerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.AlbControllerProps",
        "@aws-cdk/aws-eks.AlbControllerVersion",
        "@aws-cdk/aws-eks.Cluster"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const albControllerVersion: eks.AlbControllerVersion;\ndeclare const cluster: eks.Cluster;\ndeclare const policy: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst albControllerProps: eks.AlbControllerProps = {\n  cluster: cluster,\n  version: albControllerVersion,\n\n  // the properties below are optional\n  policy: policy,\n  repository: 'repository',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "125": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c94e4c541302f0a73697c966024f24418a4ecfcdbcc004b69a50aa90299a8f29"
    },
    "21b17ce8c4fe5c7e514cbc3e2cdb44d3a2c08115591ad88392a4d262ba50557c": {
      "translations": {
        "python": {
          "source": "eks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    alb_controller=eks.AlbControllerOptions(\n        version=eks.AlbControllerVersion.V2_4_1\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    AlbController = new AlbControllerOptions {\n        Version = AlbControllerVersion.V2_4_1\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .albController(AlbControllerOptions.builder()\n                .version(AlbControllerVersion.V2_4_1)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "eks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\talbController: &albControllerOptions{\n\t\tversion: eks.albControllerVersion_V2_4_1(),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  albController: {\n    version: eks.AlbControllerVersion.V2_4_1,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.AlbControllerVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.AlbControllerOptions",
        "@aws-cdk/aws-eks.AlbControllerVersion",
        "@aws-cdk/aws-eks.AlbControllerVersion#V2_4_1",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  albController: {\n    version: eks.AlbControllerVersion.V2_4_1,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "44f8cbe8d81ace0d2b92ff92e4e4cd980db34ab13008b31be7c6ed924800c34f"
    },
    "6fa64c114dbdbf7bb583f95cb7971edb963a10db5ed67d4bea67edcf2a7cea0f": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_auto_scaling_group_capacity(\"BottlerocketNodes\",\n    instance_type=ec2.InstanceType(\"t3.small\"),\n    min_capacity=2,\n    machine_image_type=eks.MachineImageType.BOTTLEROCKET\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddAutoScalingGroupCapacity(\"BottlerocketNodes\", new AutoScalingGroupCapacityOptions {\n    InstanceType = new InstanceType(\"t3.small\"),\n    MinCapacity = 2,\n    MachineImageType = MachineImageType.BOTTLEROCKET\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addAutoScalingGroupCapacity(\"BottlerocketNodes\", AutoScalingGroupCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t3.small\"))\n        .minCapacity(2)\n        .machineImageType(MachineImageType.BOTTLEROCKET)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addAutoScalingGroupCapacity(jsii.String(\"BottlerocketNodes\"), &autoScalingGroupCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.small\")),\n\tminCapacity: jsii.Number(2),\n\tmachineImageType: eks.machineImageType_BOTTLEROCKET,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addAutoScalingGroupCapacity('BottlerocketNodes', {\n  instanceType: new ec2.InstanceType('t3.small'),\n  minCapacity:  2,\n  machineImageType: eks.MachineImageType.BOTTLEROCKET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.AutoScalingGroupCapacityOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.AutoScalingGroupCapacityOptions",
        "@aws-cdk/aws-eks.Cluster#addAutoScalingGroupCapacity",
        "@aws-cdk/aws-eks.MachineImageType",
        "@aws-cdk/aws-eks.MachineImageType#BOTTLEROCKET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addAutoScalingGroupCapacity('BottlerocketNodes', {\n  instanceType: new ec2.InstanceType('t3.small'),\n  minCapacity:  2,\n  machineImageType: eks.MachineImageType.BOTTLEROCKET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4b82854d6574fffddcc9e3e453f5d5cdf7fa68d17295288dbd102dfb26579f61"
    },
    "9edd3511df0c03c759c56635b005a59fa5205d8c87e096144eb0681981e534ac": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n# asg: autoscaling.AutoScalingGroup\n\ncluster.connect_auto_scaling_group_capacity(asg)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nAutoScalingGroup asg;\n\ncluster.ConnectAutoScalingGroupCapacity(asg, new AutoScalingGroupOptions { });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nAutoScalingGroup asg;\n\ncluster.connectAutoScalingGroupCapacity(asg, AutoScalingGroupOptions.builder().build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar asg autoScalingGroup\ncluster.connectAutoScalingGroupCapacity(asg, &autoScalingGroupOptions{\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ndeclare const asg: autoscaling.AutoScalingGroup;\ncluster.connectAutoScalingGroupCapacity(asg, {});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.AutoScalingGroupOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-eks.AutoScalingGroupOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\ndeclare const asg: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.connectAutoScalingGroupCapacity(asg, {});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "b758d619026d87f8bc3403ae30edd9eda1cb8cd636f518c5f4999bc5cbfa6a62"
    },
    "d0ff6935fa0e8ba3216b1ef5c42a0439b41a05910d0abe8ccc44a50e31fc4854": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\n# cluster: eks.Cluster\n\naws_auth = eks.AwsAuth(self, \"MyAwsAuth\",\n    cluster=cluster\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCluster cluster;\n\nAwsAuth awsAuth = new AwsAuth(this, \"MyAwsAuth\", new AwsAuthProps {\n    Cluster = cluster\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCluster cluster;\n\nAwsAuth awsAuth = AwsAuth.Builder.create(this, \"MyAwsAuth\")\n        .cluster(cluster)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nvar cluster cluster\nawsAuth := eks.NewAwsAuth(this, jsii.String(\"MyAwsAuth\"), &awsAuthProps{\n\tcluster: cluster,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const cluster: eks.Cluster;\nconst awsAuth = new eks.AwsAuth(this, 'MyAwsAuth', {\n  cluster: cluster,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.AwsAuth"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.AwsAuth",
        "@aws-cdk/aws-eks.AwsAuthProps",
        "@aws-cdk/aws-eks.Cluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst awsAuth = new eks.AwsAuth(this, 'MyAwsAuth', {\n  cluster: cluster,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "e74c7e66eef6374e413ed14976a2e936d5b28e7f1b4eba071eec86fe6444d920"
    },
    "709d1798e19301b6117edadbbc7a5fded034058b091e6e007e0841da15a10c67": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\nadmin_user = iam.User(self, \"Admin\")\ncluster.aws_auth.add_user_mapping(admin_user, groups=[\"system:masters\"])",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nUser adminUser = new User(this, \"Admin\");\ncluster.AwsAuth.AddUserMapping(adminUser, new AwsAuthMapping { Groups = new [] { \"system:masters\" } });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nUser adminUser = new User(this, \"Admin\");\ncluster.awsAuth.addUserMapping(adminUser, AwsAuthMapping.builder().groups(List.of(\"system:masters\")).build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nadminUser := iam.NewUser(this, jsii.String(\"Admin\"))\ncluster.awsAuth.addUserMapping(adminUser, &awsAuthMapping{\n\tgroups: []*string{\n\t\tjsii.String(\"system:masters\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst adminUser = new iam.User(this, 'Admin');\ncluster.awsAuth.addUserMapping(adminUser, { groups: [ 'system:masters' ]});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.AwsAuthMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.AwsAuth#addUserMapping",
        "@aws-cdk/aws-eks.AwsAuthMapping",
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.User",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst adminUser = new iam.User(this, 'Admin');\ncluster.awsAuth.addUserMapping(adminUser, { groups: [ 'system:masters' ]});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f8c321c079f1b310dfe9d34e97ac7a42673ecf48b50d665482deac3037225c63"
    },
    "f0e2bf9ae18be784850a84b83a326d67dcfbda91454881a81ae518c0c858084d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\n# cluster: eks.Cluster\n\naws_auth_props = eks.AwsAuthProps(\n    cluster=cluster\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCluster cluster;\n\nAwsAuthProps awsAuthProps = new AwsAuthProps {\n    Cluster = cluster\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCluster cluster;\n\nAwsAuthProps awsAuthProps = AwsAuthProps.builder()\n        .cluster(cluster)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nvar cluster cluster\nawsAuthProps := &awsAuthProps{\n\tcluster: cluster,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const cluster: eks.Cluster;\nconst awsAuthProps: eks.AwsAuthProps = {\n  cluster: cluster,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.AwsAuthProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.AwsAuthProps",
        "@aws-cdk/aws-eks.Cluster"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst awsAuthProps: eks.AwsAuthProps = {\n  cluster: cluster,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d751ec4ac481403d03cd58c795c18def9d1f444de0eb2f39a8bc17726d70c6ad"
    },
    "62626ffcf667408a4cd2a4ff6d0d2dbb4686fc80af84166ba62f0de688a7c596": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_auto_scaling_group_capacity(\"spot\",\n    instance_type=ec2.InstanceType(\"t3.large\"),\n    min_capacity=2,\n    bootstrap_options=eks.BootstrapOptions(\n        kubelet_extra_args=\"--node-labels foo=bar,goo=far\",\n        aws_api_retry_attempts=5\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddAutoScalingGroupCapacity(\"spot\", new AutoScalingGroupCapacityOptions {\n    InstanceType = new InstanceType(\"t3.large\"),\n    MinCapacity = 2,\n    BootstrapOptions = new BootstrapOptions {\n        KubeletExtraArgs = \"--node-labels foo=bar,goo=far\",\n        AwsApiRetryAttempts = 5\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addAutoScalingGroupCapacity(\"spot\", AutoScalingGroupCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t3.large\"))\n        .minCapacity(2)\n        .bootstrapOptions(BootstrapOptions.builder()\n                .kubeletExtraArgs(\"--node-labels foo=bar,goo=far\")\n                .awsApiRetryAttempts(5)\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addAutoScalingGroupCapacity(jsii.String(\"spot\"), &autoScalingGroupCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.large\")),\n\tminCapacity: jsii.Number(2),\n\tbootstrapOptions: &bootstrapOptions{\n\t\tkubeletExtraArgs: jsii.String(\"--node-labels foo=bar,goo=far\"),\n\t\tawsApiRetryAttempts: jsii.Number(5),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addAutoScalingGroupCapacity('spot', {\n  instanceType: new ec2.InstanceType('t3.large'),\n  minCapacity: 2,\n  bootstrapOptions: {\n    kubeletExtraArgs: '--node-labels foo=bar,goo=far',\n    awsApiRetryAttempts: 5,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.BootstrapOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.AutoScalingGroupCapacityOptions",
        "@aws-cdk/aws-eks.BootstrapOptions",
        "@aws-cdk/aws-eks.Cluster#addAutoScalingGroupCapacity"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addAutoScalingGroupCapacity('spot', {\n  instanceType: new ec2.InstanceType('t3.large'),\n  minCapacity: 2,\n  bootstrapOptions: {\n    kubeletExtraArgs: '--node-labels foo=bar,goo=far',\n    awsApiRetryAttempts: 5,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "45c3d617336a415a25c0f96731ab38bbca15877ba58e970707acbcfe657aae8f"
    },
    "04b34279fab0d36bcf5fc2793be29b4fd8cff17caaccf48350e6583b40b0b9b5": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_nodegroup_capacity(\"extra-ng-spot\",\n    instance_types=[\n        ec2.InstanceType(\"c5.large\"),\n        ec2.InstanceType(\"c5a.large\"),\n        ec2.InstanceType(\"c5d.large\")\n    ],\n    min_size=3,\n    capacity_type=eks.CapacityType.SPOT\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddNodegroupCapacity(\"extra-ng-spot\", new NodegroupOptions {\n    InstanceTypes = new [] {\n        new InstanceType(\"c5.large\"),\n        new InstanceType(\"c5a.large\"),\n        new InstanceType(\"c5d.large\") },\n    MinSize = 3,\n    CapacityType = CapacityType.SPOT\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addNodegroupCapacity(\"extra-ng-spot\", NodegroupOptions.builder()\n        .instanceTypes(List.of(\n            new InstanceType(\"c5.large\"),\n            new InstanceType(\"c5a.large\"),\n            new InstanceType(\"c5d.large\")))\n        .minSize(3)\n        .capacityType(CapacityType.SPOT)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addNodegroupCapacity(jsii.String(\"extra-ng-spot\"), &nodegroupOptions{\n\tinstanceTypes: []instanceType{\n\t\tec2.NewInstanceType(jsii.String(\"c5.large\")),\n\t\tec2.NewInstanceType(jsii.String(\"c5a.large\")),\n\t\tec2.NewInstanceType(jsii.String(\"c5d.large\")),\n\t},\n\tminSize: jsii.Number(3),\n\tcapacityType: eks.capacityType_SPOT,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addNodegroupCapacity('extra-ng-spot', {\n  instanceTypes: [\n    new ec2.InstanceType('c5.large'),\n    new ec2.InstanceType('c5a.large'),\n    new ec2.InstanceType('c5d.large'),\n  ],\n  minSize: 3,\n  capacityType: eks.CapacityType.SPOT,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CapacityType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.CapacityType",
        "@aws-cdk/aws-eks.CapacityType#SPOT",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.NodegroupOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addNodegroupCapacity('extra-ng-spot', {\n  instanceTypes: [\n    new ec2.InstanceType('c5.large'),\n    new ec2.InstanceType('c5a.large'),\n    new ec2.InstanceType('c5d.large'),\n  ],\n  minSize: 3,\n  capacityType: eks.CapacityType.SPOT,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 17,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "646a397bc5ab26e96b337300eb4e0440604579eaf89a1d50129ee6801483d6a4"
    },
    "90b58dae5ee22393bd9952c4191ac0009e365e36bcbe06265a05d41e68a30e09": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\ncfn_addon = eks.CfnAddon(self, \"MyCfnAddon\",\n    addon_name=\"addonName\",\n    cluster_name=\"clusterName\",\n\n    # the properties below are optional\n    addon_version=\"addonVersion\",\n    resolve_conflicts=\"resolveConflicts\",\n    service_account_role_arn=\"serviceAccountRoleArn\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCfnAddon cfnAddon = new CfnAddon(this, \"MyCfnAddon\", new CfnAddonProps {\n    AddonName = \"addonName\",\n    ClusterName = \"clusterName\",\n\n    // the properties below are optional\n    AddonVersion = \"addonVersion\",\n    ResolveConflicts = \"resolveConflicts\",\n    ServiceAccountRoleArn = \"serviceAccountRoleArn\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCfnAddon cfnAddon = CfnAddon.Builder.create(this, \"MyCfnAddon\")\n        .addonName(\"addonName\")\n        .clusterName(\"clusterName\")\n\n        // the properties below are optional\n        .addonVersion(\"addonVersion\")\n        .resolveConflicts(\"resolveConflicts\")\n        .serviceAccountRoleArn(\"serviceAccountRoleArn\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\ncfnAddon := eks.NewCfnAddon(this, jsii.String(\"MyCfnAddon\"), &cfnAddonProps{\n\taddonName: jsii.String(\"addonName\"),\n\tclusterName: jsii.String(\"clusterName\"),\n\n\t// the properties below are optional\n\taddonVersion: jsii.String(\"addonVersion\"),\n\tresolveConflicts: jsii.String(\"resolveConflicts\"),\n\tserviceAccountRoleArn: jsii.String(\"serviceAccountRoleArn\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst cfnAddon = new eks.CfnAddon(this, 'MyCfnAddon', {\n  addonName: 'addonName',\n  clusterName: 'clusterName',\n\n  // the properties below are optional\n  addonVersion: 'addonVersion',\n  resolveConflicts: 'resolveConflicts',\n  serviceAccountRoleArn: 'serviceAccountRoleArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnAddon"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnAddon",
        "@aws-cdk/aws-eks.CfnAddonProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAddon = new eks.CfnAddon(this, 'MyCfnAddon', {\n  addonName: 'addonName',\n  clusterName: 'clusterName',\n\n  // the properties below are optional\n  addonVersion: 'addonVersion',\n  resolveConflicts: 'resolveConflicts',\n  serviceAccountRoleArn: 'serviceAccountRoleArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 12,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "4a64f24546b82e5d60370d40738290e52d7c421491f32eeea5d8822f94832fbe"
    },
    "2b4c569b4e0a5c9a87463001601e8b694bf306572aae7a1135e672bb6689ea9e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\ncfn_addon_props = eks.CfnAddonProps(\n    addon_name=\"addonName\",\n    cluster_name=\"clusterName\",\n\n    # the properties below are optional\n    addon_version=\"addonVersion\",\n    resolve_conflicts=\"resolveConflicts\",\n    service_account_role_arn=\"serviceAccountRoleArn\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCfnAddonProps cfnAddonProps = new CfnAddonProps {\n    AddonName = \"addonName\",\n    ClusterName = \"clusterName\",\n\n    // the properties below are optional\n    AddonVersion = \"addonVersion\",\n    ResolveConflicts = \"resolveConflicts\",\n    ServiceAccountRoleArn = \"serviceAccountRoleArn\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCfnAddonProps cfnAddonProps = CfnAddonProps.builder()\n        .addonName(\"addonName\")\n        .clusterName(\"clusterName\")\n\n        // the properties below are optional\n        .addonVersion(\"addonVersion\")\n        .resolveConflicts(\"resolveConflicts\")\n        .serviceAccountRoleArn(\"serviceAccountRoleArn\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\ncfnAddonProps := &cfnAddonProps{\n\taddonName: jsii.String(\"addonName\"),\n\tclusterName: jsii.String(\"clusterName\"),\n\n\t// the properties below are optional\n\taddonVersion: jsii.String(\"addonVersion\"),\n\tresolveConflicts: jsii.String(\"resolveConflicts\"),\n\tserviceAccountRoleArn: jsii.String(\"serviceAccountRoleArn\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst cfnAddonProps: eks.CfnAddonProps = {\n  addonName: 'addonName',\n  clusterName: 'clusterName',\n\n  // the properties below are optional\n  addonVersion: 'addonVersion',\n  resolveConflicts: 'resolveConflicts',\n  serviceAccountRoleArn: 'serviceAccountRoleArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnAddonProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnAddonProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAddonProps: eks.CfnAddonProps = {\n  addonName: 'addonName',\n  clusterName: 'clusterName',\n\n  // the properties below are optional\n  addonVersion: 'addonVersion',\n  resolveConflicts: 'resolveConflicts',\n  serviceAccountRoleArn: 'serviceAccountRoleArn',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 12,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "eb2a36a084e3a0faaa8c008cf45ee2646c2412c13f0fdba54cfc3dce2944360f"
    },
    "2b448188366c4cbe3ce5f41d7e5d195299ac21f64a0e86fe7da72d931cdb8911": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\ncfn_cluster = eks.CfnCluster(self, \"MyCfnCluster\",\n    resources_vpc_config=eks.CfnCluster.ResourcesVpcConfigProperty(\n        subnet_ids=[\"subnetIds\"],\n\n        # the properties below are optional\n        endpoint_private_access=False,\n        endpoint_public_access=False,\n        public_access_cidrs=[\"publicAccessCidrs\"],\n        security_group_ids=[\"securityGroupIds\"]\n    ),\n    role_arn=\"roleArn\",\n\n    # the properties below are optional\n    encryption_config=[eks.CfnCluster.EncryptionConfigProperty(\n        provider=eks.CfnCluster.ProviderProperty(\n            key_arn=\"keyArn\"\n        ),\n        resources=[\"resources\"]\n    )],\n    kubernetes_network_config=eks.CfnCluster.KubernetesNetworkConfigProperty(\n        ip_family=\"ipFamily\",\n        service_ipv4_cidr=\"serviceIpv4Cidr\",\n        service_ipv6_cidr=\"serviceIpv6Cidr\"\n    ),\n    logging=eks.CfnCluster.LoggingProperty(\n        cluster_logging=eks.CfnCluster.ClusterLoggingProperty(\n            enabled_types=[eks.CfnCluster.LoggingTypeConfigProperty(\n                type=\"type\"\n            )]\n        )\n    ),\n    name=\"name\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCfnCluster cfnCluster = new CfnCluster(this, \"MyCfnCluster\", new CfnClusterProps {\n    ResourcesVpcConfig = new ResourcesVpcConfigProperty {\n        SubnetIds = new [] { \"subnetIds\" },\n\n        // the properties below are optional\n        EndpointPrivateAccess = false,\n        EndpointPublicAccess = false,\n        PublicAccessCidrs = new [] { \"publicAccessCidrs\" },\n        SecurityGroupIds = new [] { \"securityGroupIds\" }\n    },\n    RoleArn = \"roleArn\",\n\n    // the properties below are optional\n    EncryptionConfig = new [] { new EncryptionConfigProperty {\n        Provider = new ProviderProperty {\n            KeyArn = \"keyArn\"\n        },\n        Resources = new [] { \"resources\" }\n    } },\n    KubernetesNetworkConfig = new KubernetesNetworkConfigProperty {\n        IpFamily = \"ipFamily\",\n        ServiceIpv4Cidr = \"serviceIpv4Cidr\",\n        ServiceIpv6Cidr = \"serviceIpv6Cidr\"\n    },\n    Logging = new LoggingProperty {\n        ClusterLogging = new ClusterLoggingProperty {\n            EnabledTypes = new [] { new LoggingTypeConfigProperty {\n                Type = \"type\"\n            } }\n        }\n    },\n    Name = \"name\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Version = \"version\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCfnCluster cfnCluster = CfnCluster.Builder.create(this, \"MyCfnCluster\")\n        .resourcesVpcConfig(ResourcesVpcConfigProperty.builder()\n                .subnetIds(List.of(\"subnetIds\"))\n\n                // the properties below are optional\n                .endpointPrivateAccess(false)\n                .endpointPublicAccess(false)\n                .publicAccessCidrs(List.of(\"publicAccessCidrs\"))\n                .securityGroupIds(List.of(\"securityGroupIds\"))\n                .build())\n        .roleArn(\"roleArn\")\n\n        // the properties below are optional\n        .encryptionConfig(List.of(EncryptionConfigProperty.builder()\n                .provider(ProviderProperty.builder()\n                        .keyArn(\"keyArn\")\n                        .build())\n                .resources(List.of(\"resources\"))\n                .build()))\n        .kubernetesNetworkConfig(KubernetesNetworkConfigProperty.builder()\n                .ipFamily(\"ipFamily\")\n                .serviceIpv4Cidr(\"serviceIpv4Cidr\")\n                .serviceIpv6Cidr(\"serviceIpv6Cidr\")\n                .build())\n        .logging(LoggingProperty.builder()\n                .clusterLogging(ClusterLoggingProperty.builder()\n                        .enabledTypes(List.of(LoggingTypeConfigProperty.builder()\n                                .type(\"type\")\n                                .build()))\n                        .build())\n                .build())\n        .name(\"name\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\ncfnCluster := eks.NewCfnCluster(this, jsii.String(\"MyCfnCluster\"), &cfnClusterProps{\n\tresourcesVpcConfig: &resourcesVpcConfigProperty{\n\t\tsubnetIds: []*string{\n\t\t\tjsii.String(\"subnetIds\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tendpointPrivateAccess: jsii.Boolean(false),\n\t\tendpointPublicAccess: jsii.Boolean(false),\n\t\tpublicAccessCidrs: []*string{\n\t\t\tjsii.String(\"publicAccessCidrs\"),\n\t\t},\n\t\tsecurityGroupIds: []*string{\n\t\t\tjsii.String(\"securityGroupIds\"),\n\t\t},\n\t},\n\troleArn: jsii.String(\"roleArn\"),\n\n\t// the properties below are optional\n\tencryptionConfig: []interface{}{\n\t\t&encryptionConfigProperty{\n\t\t\tprovider: &providerProperty{\n\t\t\t\tkeyArn: jsii.String(\"keyArn\"),\n\t\t\t},\n\t\t\tresources: []*string{\n\t\t\t\tjsii.String(\"resources\"),\n\t\t\t},\n\t\t},\n\t},\n\tkubernetesNetworkConfig: &kubernetesNetworkConfigProperty{\n\t\tipFamily: jsii.String(\"ipFamily\"),\n\t\tserviceIpv4Cidr: jsii.String(\"serviceIpv4Cidr\"),\n\t\tserviceIpv6Cidr: jsii.String(\"serviceIpv6Cidr\"),\n\t},\n\tlogging: &loggingProperty{\n\t\tclusterLogging: &clusterLoggingProperty{\n\t\t\tenabledTypes: []interface{}{\n\t\t\t\t&loggingTypeConfigProperty{\n\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tversion: jsii.String(\"version\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst cfnCluster = new eks.CfnCluster(this, 'MyCfnCluster', {\n  resourcesVpcConfig: {\n    subnetIds: ['subnetIds'],\n\n    // the properties below are optional\n    endpointPrivateAccess: false,\n    endpointPublicAccess: false,\n    publicAccessCidrs: ['publicAccessCidrs'],\n    securityGroupIds: ['securityGroupIds'],\n  },\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  encryptionConfig: [{\n    provider: {\n      keyArn: 'keyArn',\n    },\n    resources: ['resources'],\n  }],\n  kubernetesNetworkConfig: {\n    ipFamily: 'ipFamily',\n    serviceIpv4Cidr: 'serviceIpv4Cidr',\n    serviceIpv6Cidr: 'serviceIpv6Cidr',\n  },\n  logging: {\n    clusterLogging: {\n      enabledTypes: [{\n        type: 'type',\n      }],\n    },\n  },\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  version: 'version',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnCluster",
        "@aws-cdk/aws-eks.CfnClusterProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCluster = new eks.CfnCluster(this, 'MyCfnCluster', {\n  resourcesVpcConfig: {\n    subnetIds: ['subnetIds'],\n\n    // the properties below are optional\n    endpointPrivateAccess: false,\n    endpointPublicAccess: false,\n    publicAccessCidrs: ['publicAccessCidrs'],\n    securityGroupIds: ['securityGroupIds'],\n  },\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  encryptionConfig: [{\n    provider: {\n      keyArn: 'keyArn',\n    },\n    resources: ['resources'],\n  }],\n  kubernetesNetworkConfig: {\n    ipFamily: 'ipFamily',\n    serviceIpv4Cidr: 'serviceIpv4Cidr',\n    serviceIpv6Cidr: 'serviceIpv6Cidr',\n  },\n  logging: {\n    clusterLogging: {\n      enabledTypes: [{\n        type: 'type',\n      }],\n    },\n  },\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  version: 'version',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 16,
        "75": 28,
        "91": 2,
        "104": 1,
        "192": 7,
        "193": 9,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "a4743cbd12deed5c28e3e4c4f97f47ff31e9fd675880dd428108946fccfdae23"
    },
    "dddc4687673e6722a69efb56ce270d2ac4af2482e3ab068f5569939184c58bb1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\ncluster_logging_property = eks.CfnCluster.ClusterLoggingProperty(\n    enabled_types=[eks.CfnCluster.LoggingTypeConfigProperty(\n        type=\"type\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nClusterLoggingProperty clusterLoggingProperty = new ClusterLoggingProperty {\n    EnabledTypes = new [] { new LoggingTypeConfigProperty {\n        Type = \"type\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nClusterLoggingProperty clusterLoggingProperty = ClusterLoggingProperty.builder()\n        .enabledTypes(List.of(LoggingTypeConfigProperty.builder()\n                .type(\"type\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nclusterLoggingProperty := &clusterLoggingProperty{\n\tenabledTypes: []interface{}{\n\t\t&loggingTypeConfigProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst clusterLoggingProperty: eks.CfnCluster.ClusterLoggingProperty = {\n  enabledTypes: [{\n    type: 'type',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnCluster.ClusterLoggingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnCluster.ClusterLoggingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterLoggingProperty: eks.CfnCluster.ClusterLoggingProperty = {\n  enabledTypes: [{\n    type: 'type',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9b110146a41a728ccb54166688e190029a86d40e6dfac83f504b24ca138f0034"
    },
    "4c1e0f23941159d95daf33daeee5e03879372250684b52afb1b95f98f07d545f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nencryption_config_property = eks.CfnCluster.EncryptionConfigProperty(\n    provider=eks.CfnCluster.ProviderProperty(\n        key_arn=\"keyArn\"\n    ),\n    resources=[\"resources\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nEncryptionConfigProperty encryptionConfigProperty = new EncryptionConfigProperty {\n    Provider = new ProviderProperty {\n        KeyArn = \"keyArn\"\n    },\n    Resources = new [] { \"resources\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nEncryptionConfigProperty encryptionConfigProperty = EncryptionConfigProperty.builder()\n        .provider(ProviderProperty.builder()\n                .keyArn(\"keyArn\")\n                .build())\n        .resources(List.of(\"resources\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nencryptionConfigProperty := &encryptionConfigProperty{\n\tprovider: &providerProperty{\n\t\tkeyArn: jsii.String(\"keyArn\"),\n\t},\n\tresources: []*string{\n\t\tjsii.String(\"resources\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst encryptionConfigProperty: eks.CfnCluster.EncryptionConfigProperty = {\n  provider: {\n    keyArn: 'keyArn',\n  },\n  resources: ['resources'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnCluster.EncryptionConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnCluster.EncryptionConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst encryptionConfigProperty: eks.CfnCluster.EncryptionConfigProperty = {\n  provider: {\n    keyArn: 'keyArn',\n  },\n  resources: ['resources'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "44fbc8f76c2ab234ffc0c36a8fe5d0bceb1eaaf92009d44742912e61bdccc1d0"
    },
    "acf7c6177dce0d62b7351018c4c964c8ae71517da565e797a1f4ee9a5537b3b6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nkubernetes_network_config_property = eks.CfnCluster.KubernetesNetworkConfigProperty(\n    ip_family=\"ipFamily\",\n    service_ipv4_cidr=\"serviceIpv4Cidr\",\n    service_ipv6_cidr=\"serviceIpv6Cidr\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nKubernetesNetworkConfigProperty kubernetesNetworkConfigProperty = new KubernetesNetworkConfigProperty {\n    IpFamily = \"ipFamily\",\n    ServiceIpv4Cidr = \"serviceIpv4Cidr\",\n    ServiceIpv6Cidr = \"serviceIpv6Cidr\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nKubernetesNetworkConfigProperty kubernetesNetworkConfigProperty = KubernetesNetworkConfigProperty.builder()\n        .ipFamily(\"ipFamily\")\n        .serviceIpv4Cidr(\"serviceIpv4Cidr\")\n        .serviceIpv6Cidr(\"serviceIpv6Cidr\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nkubernetesNetworkConfigProperty := &kubernetesNetworkConfigProperty{\n\tipFamily: jsii.String(\"ipFamily\"),\n\tserviceIpv4Cidr: jsii.String(\"serviceIpv4Cidr\"),\n\tserviceIpv6Cidr: jsii.String(\"serviceIpv6Cidr\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst kubernetesNetworkConfigProperty: eks.CfnCluster.KubernetesNetworkConfigProperty = {\n  ipFamily: 'ipFamily',\n  serviceIpv4Cidr: 'serviceIpv4Cidr',\n  serviceIpv6Cidr: 'serviceIpv6Cidr',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnCluster.KubernetesNetworkConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnCluster.KubernetesNetworkConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst kubernetesNetworkConfigProperty: eks.CfnCluster.KubernetesNetworkConfigProperty = {\n  ipFamily: 'ipFamily',\n  serviceIpv4Cidr: 'serviceIpv4Cidr',\n  serviceIpv6Cidr: 'serviceIpv6Cidr',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b9cb383b69d4b026452c175825d92519ce07100d03f8caf9299cb140e22a4c21"
    },
    "f44587c1be244e969a0147c0774298f773e9070dfaa04533359cc56dda9f9fbc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nlogging_property = eks.CfnCluster.LoggingProperty(\n    cluster_logging=eks.CfnCluster.ClusterLoggingProperty(\n        enabled_types=[eks.CfnCluster.LoggingTypeConfigProperty(\n            type=\"type\"\n        )]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nLoggingProperty loggingProperty = new LoggingProperty {\n    ClusterLogging = new ClusterLoggingProperty {\n        EnabledTypes = new [] { new LoggingTypeConfigProperty {\n            Type = \"type\"\n        } }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nLoggingProperty loggingProperty = LoggingProperty.builder()\n        .clusterLogging(ClusterLoggingProperty.builder()\n                .enabledTypes(List.of(LoggingTypeConfigProperty.builder()\n                        .type(\"type\")\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nloggingProperty := &loggingProperty{\n\tclusterLogging: &clusterLoggingProperty{\n\t\tenabledTypes: []interface{}{\n\t\t\t&loggingTypeConfigProperty{\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst loggingProperty: eks.CfnCluster.LoggingProperty = {\n  clusterLogging: {\n    enabledTypes: [{\n      type: 'type',\n    }],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnCluster.LoggingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnCluster.LoggingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst loggingProperty: eks.CfnCluster.LoggingProperty = {\n  clusterLogging: {\n    enabledTypes: [{\n      type: 'type',\n    }],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b86a969d4dcd63951be3a77e0501263f5fcbf8ea65138a8ab5fd911201092659"
    },
    "2fdd60a003513f1cdb0a0c3c9af9c64a79cde1f119495b9c050c841b06f73d26": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nlogging_type_config_property = eks.CfnCluster.LoggingTypeConfigProperty(\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nLoggingTypeConfigProperty loggingTypeConfigProperty = new LoggingTypeConfigProperty {\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nLoggingTypeConfigProperty loggingTypeConfigProperty = LoggingTypeConfigProperty.builder()\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nloggingTypeConfigProperty := &loggingTypeConfigProperty{\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst loggingTypeConfigProperty: eks.CfnCluster.LoggingTypeConfigProperty = {\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnCluster.LoggingTypeConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnCluster.LoggingTypeConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst loggingTypeConfigProperty: eks.CfnCluster.LoggingTypeConfigProperty = {\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b95642011e92df4a547b3a2effab6d70fef38c6d3028dc507694d82bbf00a531"
    },
    "45d3eb7a7c99d087f1ff6cd09f36da8681af9963a3a2c3693726ad2d33839005": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nprovider_property = eks.CfnCluster.ProviderProperty(\n    key_arn=\"keyArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nProviderProperty providerProperty = new ProviderProperty {\n    KeyArn = \"keyArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nProviderProperty providerProperty = ProviderProperty.builder()\n        .keyArn(\"keyArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nproviderProperty := &providerProperty{\n\tkeyArn: jsii.String(\"keyArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst providerProperty: eks.CfnCluster.ProviderProperty = {\n  keyArn: 'keyArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnCluster.ProviderProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnCluster.ProviderProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst providerProperty: eks.CfnCluster.ProviderProperty = {\n  keyArn: 'keyArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "6938692fb6cc4a2a8bbb92c6bd3fb83be92583e8f1eeaad62cfc1d72924cc8a3"
    },
    "203feedabcbf61ef9c720782cfac6461dfb55d082d3786add9e71dfc6d2aac7c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nresources_vpc_config_property = eks.CfnCluster.ResourcesVpcConfigProperty(\n    subnet_ids=[\"subnetIds\"],\n\n    # the properties below are optional\n    endpoint_private_access=False,\n    endpoint_public_access=False,\n    public_access_cidrs=[\"publicAccessCidrs\"],\n    security_group_ids=[\"securityGroupIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nResourcesVpcConfigProperty resourcesVpcConfigProperty = new ResourcesVpcConfigProperty {\n    SubnetIds = new [] { \"subnetIds\" },\n\n    // the properties below are optional\n    EndpointPrivateAccess = false,\n    EndpointPublicAccess = false,\n    PublicAccessCidrs = new [] { \"publicAccessCidrs\" },\n    SecurityGroupIds = new [] { \"securityGroupIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nResourcesVpcConfigProperty resourcesVpcConfigProperty = ResourcesVpcConfigProperty.builder()\n        .subnetIds(List.of(\"subnetIds\"))\n\n        // the properties below are optional\n        .endpointPrivateAccess(false)\n        .endpointPublicAccess(false)\n        .publicAccessCidrs(List.of(\"publicAccessCidrs\"))\n        .securityGroupIds(List.of(\"securityGroupIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nresourcesVpcConfigProperty := &resourcesVpcConfigProperty{\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\n\t// the properties below are optional\n\tendpointPrivateAccess: jsii.Boolean(false),\n\tendpointPublicAccess: jsii.Boolean(false),\n\tpublicAccessCidrs: []*string{\n\t\tjsii.String(\"publicAccessCidrs\"),\n\t},\n\tsecurityGroupIds: []*string{\n\t\tjsii.String(\"securityGroupIds\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst resourcesVpcConfigProperty: eks.CfnCluster.ResourcesVpcConfigProperty = {\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  endpointPrivateAccess: false,\n  endpointPublicAccess: false,\n  publicAccessCidrs: ['publicAccessCidrs'],\n  securityGroupIds: ['securityGroupIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnCluster.ResourcesVpcConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnCluster.ResourcesVpcConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourcesVpcConfigProperty: eks.CfnCluster.ResourcesVpcConfigProperty = {\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  endpointPrivateAccess: false,\n  endpointPublicAccess: false,\n  publicAccessCidrs: ['publicAccessCidrs'],\n  securityGroupIds: ['securityGroupIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "91": 2,
        "153": 2,
        "169": 1,
        "192": 3,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "d511cad3da07bad01fc90ef54722a7af9cd83e520b2e6fd47b5ce5e1b6774407"
    },
    "44bc1646c5e7b5e36458e6dd6bc74340ca7dcce5c62d76c7c34e6d7ac9afebd2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\ncfn_cluster_props = eks.CfnClusterProps(\n    resources_vpc_config=eks.CfnCluster.ResourcesVpcConfigProperty(\n        subnet_ids=[\"subnetIds\"],\n\n        # the properties below are optional\n        endpoint_private_access=False,\n        endpoint_public_access=False,\n        public_access_cidrs=[\"publicAccessCidrs\"],\n        security_group_ids=[\"securityGroupIds\"]\n    ),\n    role_arn=\"roleArn\",\n\n    # the properties below are optional\n    encryption_config=[eks.CfnCluster.EncryptionConfigProperty(\n        provider=eks.CfnCluster.ProviderProperty(\n            key_arn=\"keyArn\"\n        ),\n        resources=[\"resources\"]\n    )],\n    kubernetes_network_config=eks.CfnCluster.KubernetesNetworkConfigProperty(\n        ip_family=\"ipFamily\",\n        service_ipv4_cidr=\"serviceIpv4Cidr\",\n        service_ipv6_cidr=\"serviceIpv6Cidr\"\n    ),\n    logging=eks.CfnCluster.LoggingProperty(\n        cluster_logging=eks.CfnCluster.ClusterLoggingProperty(\n            enabled_types=[eks.CfnCluster.LoggingTypeConfigProperty(\n                type=\"type\"\n            )]\n        )\n    ),\n    name=\"name\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCfnClusterProps cfnClusterProps = new CfnClusterProps {\n    ResourcesVpcConfig = new ResourcesVpcConfigProperty {\n        SubnetIds = new [] { \"subnetIds\" },\n\n        // the properties below are optional\n        EndpointPrivateAccess = false,\n        EndpointPublicAccess = false,\n        PublicAccessCidrs = new [] { \"publicAccessCidrs\" },\n        SecurityGroupIds = new [] { \"securityGroupIds\" }\n    },\n    RoleArn = \"roleArn\",\n\n    // the properties below are optional\n    EncryptionConfig = new [] { new EncryptionConfigProperty {\n        Provider = new ProviderProperty {\n            KeyArn = \"keyArn\"\n        },\n        Resources = new [] { \"resources\" }\n    } },\n    KubernetesNetworkConfig = new KubernetesNetworkConfigProperty {\n        IpFamily = \"ipFamily\",\n        ServiceIpv4Cidr = \"serviceIpv4Cidr\",\n        ServiceIpv6Cidr = \"serviceIpv6Cidr\"\n    },\n    Logging = new LoggingProperty {\n        ClusterLogging = new ClusterLoggingProperty {\n            EnabledTypes = new [] { new LoggingTypeConfigProperty {\n                Type = \"type\"\n            } }\n        }\n    },\n    Name = \"name\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Version = \"version\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCfnClusterProps cfnClusterProps = CfnClusterProps.builder()\n        .resourcesVpcConfig(ResourcesVpcConfigProperty.builder()\n                .subnetIds(List.of(\"subnetIds\"))\n\n                // the properties below are optional\n                .endpointPrivateAccess(false)\n                .endpointPublicAccess(false)\n                .publicAccessCidrs(List.of(\"publicAccessCidrs\"))\n                .securityGroupIds(List.of(\"securityGroupIds\"))\n                .build())\n        .roleArn(\"roleArn\")\n\n        // the properties below are optional\n        .encryptionConfig(List.of(EncryptionConfigProperty.builder()\n                .provider(ProviderProperty.builder()\n                        .keyArn(\"keyArn\")\n                        .build())\n                .resources(List.of(\"resources\"))\n                .build()))\n        .kubernetesNetworkConfig(KubernetesNetworkConfigProperty.builder()\n                .ipFamily(\"ipFamily\")\n                .serviceIpv4Cidr(\"serviceIpv4Cidr\")\n                .serviceIpv6Cidr(\"serviceIpv6Cidr\")\n                .build())\n        .logging(LoggingProperty.builder()\n                .clusterLogging(ClusterLoggingProperty.builder()\n                        .enabledTypes(List.of(LoggingTypeConfigProperty.builder()\n                                .type(\"type\")\n                                .build()))\n                        .build())\n                .build())\n        .name(\"name\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\ncfnClusterProps := &cfnClusterProps{\n\tresourcesVpcConfig: &resourcesVpcConfigProperty{\n\t\tsubnetIds: []*string{\n\t\t\tjsii.String(\"subnetIds\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tendpointPrivateAccess: jsii.Boolean(false),\n\t\tendpointPublicAccess: jsii.Boolean(false),\n\t\tpublicAccessCidrs: []*string{\n\t\t\tjsii.String(\"publicAccessCidrs\"),\n\t\t},\n\t\tsecurityGroupIds: []*string{\n\t\t\tjsii.String(\"securityGroupIds\"),\n\t\t},\n\t},\n\troleArn: jsii.String(\"roleArn\"),\n\n\t// the properties below are optional\n\tencryptionConfig: []interface{}{\n\t\t&encryptionConfigProperty{\n\t\t\tprovider: &providerProperty{\n\t\t\t\tkeyArn: jsii.String(\"keyArn\"),\n\t\t\t},\n\t\t\tresources: []*string{\n\t\t\t\tjsii.String(\"resources\"),\n\t\t\t},\n\t\t},\n\t},\n\tkubernetesNetworkConfig: &kubernetesNetworkConfigProperty{\n\t\tipFamily: jsii.String(\"ipFamily\"),\n\t\tserviceIpv4Cidr: jsii.String(\"serviceIpv4Cidr\"),\n\t\tserviceIpv6Cidr: jsii.String(\"serviceIpv6Cidr\"),\n\t},\n\tlogging: &loggingProperty{\n\t\tclusterLogging: &clusterLoggingProperty{\n\t\t\tenabledTypes: []interface{}{\n\t\t\t\t&loggingTypeConfigProperty{\n\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tversion: jsii.String(\"version\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst cfnClusterProps: eks.CfnClusterProps = {\n  resourcesVpcConfig: {\n    subnetIds: ['subnetIds'],\n\n    // the properties below are optional\n    endpointPrivateAccess: false,\n    endpointPublicAccess: false,\n    publicAccessCidrs: ['publicAccessCidrs'],\n    securityGroupIds: ['securityGroupIds'],\n  },\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  encryptionConfig: [{\n    provider: {\n      keyArn: 'keyArn',\n    },\n    resources: ['resources'],\n  }],\n  kubernetesNetworkConfig: {\n    ipFamily: 'ipFamily',\n    serviceIpv4Cidr: 'serviceIpv4Cidr',\n    serviceIpv6Cidr: 'serviceIpv6Cidr',\n  },\n  logging: {\n    clusterLogging: {\n      enabledTypes: [{\n        type: 'type',\n      }],\n    },\n  },\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  version: 'version',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnClusterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterProps: eks.CfnClusterProps = {\n  resourcesVpcConfig: {\n    subnetIds: ['subnetIds'],\n\n    // the properties below are optional\n    endpointPrivateAccess: false,\n    endpointPublicAccess: false,\n    publicAccessCidrs: ['publicAccessCidrs'],\n    securityGroupIds: ['securityGroupIds'],\n  },\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  encryptionConfig: [{\n    provider: {\n      keyArn: 'keyArn',\n    },\n    resources: ['resources'],\n  }],\n  kubernetesNetworkConfig: {\n    ipFamily: 'ipFamily',\n    serviceIpv4Cidr: 'serviceIpv4Cidr',\n    serviceIpv6Cidr: 'serviceIpv6Cidr',\n  },\n  logging: {\n    clusterLogging: {\n      enabledTypes: [{\n        type: 'type',\n      }],\n    },\n  },\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 15,
        "75": 28,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 7,
        "193": 9,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "d6b4ae391caa98c96d6aef542ddeed0c2934fde9e99d2c817a4237243b2e42d0"
    },
    "0527e2717f4aadf3cf80faa50e828e486ac59265dfbbadddbc6b0ad7513e742d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\ncfn_fargate_profile = eks.CfnFargateProfile(self, \"MyCfnFargateProfile\",\n    cluster_name=\"clusterName\",\n    pod_execution_role_arn=\"podExecutionRoleArn\",\n    selectors=[eks.CfnFargateProfile.SelectorProperty(\n        namespace=\"namespace\",\n\n        # the properties below are optional\n        labels=[eks.CfnFargateProfile.LabelProperty(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n\n    # the properties below are optional\n    fargate_profile_name=\"fargateProfileName\",\n    subnets=[\"subnets\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCfnFargateProfile cfnFargateProfile = new CfnFargateProfile(this, \"MyCfnFargateProfile\", new CfnFargateProfileProps {\n    ClusterName = \"clusterName\",\n    PodExecutionRoleArn = \"podExecutionRoleArn\",\n    Selectors = new [] { new SelectorProperty {\n        Namespace = \"namespace\",\n\n        // the properties below are optional\n        Labels = new [] { new LabelProperty {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n\n    // the properties below are optional\n    FargateProfileName = \"fargateProfileName\",\n    Subnets = new [] { \"subnets\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCfnFargateProfile cfnFargateProfile = CfnFargateProfile.Builder.create(this, \"MyCfnFargateProfile\")\n        .clusterName(\"clusterName\")\n        .podExecutionRoleArn(\"podExecutionRoleArn\")\n        .selectors(List.of(SelectorProperty.builder()\n                .namespace(\"namespace\")\n\n                // the properties below are optional\n                .labels(List.of(LabelProperty.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n\n        // the properties below are optional\n        .fargateProfileName(\"fargateProfileName\")\n        .subnets(List.of(\"subnets\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\ncfnFargateProfile := eks.NewCfnFargateProfile(this, jsii.String(\"MyCfnFargateProfile\"), &cfnFargateProfileProps{\n\tclusterName: jsii.String(\"clusterName\"),\n\tpodExecutionRoleArn: jsii.String(\"podExecutionRoleArn\"),\n\tselectors: []interface{}{\n\t\t&selectorProperty{\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\n\t\t\t// the properties below are optional\n\t\t\tlabels: []interface{}{\n\t\t\t\t&labelProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tfargateProfileName: jsii.String(\"fargateProfileName\"),\n\tsubnets: []*string{\n\t\tjsii.String(\"subnets\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst cfnFargateProfile = new eks.CfnFargateProfile(this, 'MyCfnFargateProfile', {\n  clusterName: 'clusterName',\n  podExecutionRoleArn: 'podExecutionRoleArn',\n  selectors: [{\n    namespace: 'namespace',\n\n    // the properties below are optional\n    labels: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n\n  // the properties below are optional\n  fargateProfileName: 'fargateProfileName',\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnFargateProfile"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnFargateProfile",
        "@aws-cdk/aws-eks.CfnFargateProfileProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnFargateProfile = new eks.CfnFargateProfile(this, 'MyCfnFargateProfile', {\n  clusterName: 'clusterName',\n  podExecutionRoleArn: 'podExecutionRoleArn',\n  selectors: [{\n    namespace: 'namespace',\n\n    // the properties below are optional\n    labels: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n\n  // the properties below are optional\n  fargateProfileName: 'fargateProfileName',\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 16,
        "104": 1,
        "192": 4,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "5d17dc74df709976d5da2c8f050bc9695507b38ba424200844739d7c5e80891b"
    },
    "37fe6c944344a1d229e169426f32b58546f1a5cdcb622ca712f6f1b7e40e8a79": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nlabel_property = eks.CfnFargateProfile.LabelProperty(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nLabelProperty labelProperty = new LabelProperty {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nLabelProperty labelProperty = LabelProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nlabelProperty := &labelProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst labelProperty: eks.CfnFargateProfile.LabelProperty = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnFargateProfile.LabelProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnFargateProfile.LabelProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst labelProperty: eks.CfnFargateProfile.LabelProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ea4f68e19b7cff6119a9f6e73c6a81f287dcde33ef26f677bb7e700db934de38"
    },
    "f6e1cd682b428d9507ad72cc0f954be47a8228338833385d65b7d317e7a4c61d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nselector_property = eks.CfnFargateProfile.SelectorProperty(\n    namespace=\"namespace\",\n\n    # the properties below are optional\n    labels=[eks.CfnFargateProfile.LabelProperty(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nSelectorProperty selectorProperty = new SelectorProperty {\n    Namespace = \"namespace\",\n\n    // the properties below are optional\n    Labels = new [] { new LabelProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nSelectorProperty selectorProperty = SelectorProperty.builder()\n        .namespace(\"namespace\")\n\n        // the properties below are optional\n        .labels(List.of(LabelProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nselectorProperty := &selectorProperty{\n\tnamespace: jsii.String(\"namespace\"),\n\n\t// the properties below are optional\n\tlabels: []interface{}{\n\t\t&labelProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst selectorProperty: eks.CfnFargateProfile.SelectorProperty = {\n  namespace: 'namespace',\n\n  // the properties below are optional\n  labels: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnFargateProfile.SelectorProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnFargateProfile.SelectorProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst selectorProperty: eks.CfnFargateProfile.SelectorProperty = {\n  namespace: 'namespace',\n\n  // the properties below are optional\n  labels: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "fc35d6393bef91449c7848a7ce1d16760a8d48393121b67820e4bc54b10a0341"
    },
    "8e4b208703428a1552001c7e5fa7123846cfbaca1cbcc0be6af7faf3141a5198": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\ncfn_fargate_profile_props = eks.CfnFargateProfileProps(\n    cluster_name=\"clusterName\",\n    pod_execution_role_arn=\"podExecutionRoleArn\",\n    selectors=[eks.CfnFargateProfile.SelectorProperty(\n        namespace=\"namespace\",\n\n        # the properties below are optional\n        labels=[eks.CfnFargateProfile.LabelProperty(\n            key=\"key\",\n            value=\"value\"\n        )]\n    )],\n\n    # the properties below are optional\n    fargate_profile_name=\"fargateProfileName\",\n    subnets=[\"subnets\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCfnFargateProfileProps cfnFargateProfileProps = new CfnFargateProfileProps {\n    ClusterName = \"clusterName\",\n    PodExecutionRoleArn = \"podExecutionRoleArn\",\n    Selectors = new [] { new SelectorProperty {\n        Namespace = \"namespace\",\n\n        // the properties below are optional\n        Labels = new [] { new LabelProperty {\n            Key = \"key\",\n            Value = \"value\"\n        } }\n    } },\n\n    // the properties below are optional\n    FargateProfileName = \"fargateProfileName\",\n    Subnets = new [] { \"subnets\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCfnFargateProfileProps cfnFargateProfileProps = CfnFargateProfileProps.builder()\n        .clusterName(\"clusterName\")\n        .podExecutionRoleArn(\"podExecutionRoleArn\")\n        .selectors(List.of(SelectorProperty.builder()\n                .namespace(\"namespace\")\n\n                // the properties below are optional\n                .labels(List.of(LabelProperty.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n\n        // the properties below are optional\n        .fargateProfileName(\"fargateProfileName\")\n        .subnets(List.of(\"subnets\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\ncfnFargateProfileProps := &cfnFargateProfileProps{\n\tclusterName: jsii.String(\"clusterName\"),\n\tpodExecutionRoleArn: jsii.String(\"podExecutionRoleArn\"),\n\tselectors: []interface{}{\n\t\t&selectorProperty{\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\n\t\t\t// the properties below are optional\n\t\t\tlabels: []interface{}{\n\t\t\t\t&labelProperty{\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tfargateProfileName: jsii.String(\"fargateProfileName\"),\n\tsubnets: []*string{\n\t\tjsii.String(\"subnets\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst cfnFargateProfileProps: eks.CfnFargateProfileProps = {\n  clusterName: 'clusterName',\n  podExecutionRoleArn: 'podExecutionRoleArn',\n  selectors: [{\n    namespace: 'namespace',\n\n    // the properties below are optional\n    labels: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n\n  // the properties below are optional\n  fargateProfileName: 'fargateProfileName',\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnFargateProfileProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnFargateProfileProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnFargateProfileProps: eks.CfnFargateProfileProps = {\n  clusterName: 'clusterName',\n  podExecutionRoleArn: 'podExecutionRoleArn',\n  selectors: [{\n    namespace: 'namespace',\n\n    // the properties below are optional\n    labels: [{\n      key: 'key',\n      value: 'value',\n    }],\n  }],\n\n  // the properties below are optional\n  fargateProfileName: 'fargateProfileName',\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 16,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "28c8b10325d6f2997a07920d79f534a2d267fe495fdc7cdfd6e22e2c1d3af271"
    },
    "73cbcd788c47c9aeb43081d19abdd7688b637bcaaf901fdc2412eba0192db572": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\ncfn_identity_provider_config = eks.CfnIdentityProviderConfig(self, \"MyCfnIdentityProviderConfig\",\n    cluster_name=\"clusterName\",\n    type=\"type\",\n\n    # the properties below are optional\n    identity_provider_config_name=\"identityProviderConfigName\",\n    oidc=eks.CfnIdentityProviderConfig.OidcIdentityProviderConfigProperty(\n        client_id=\"clientId\",\n        issuer_url=\"issuerUrl\",\n\n        # the properties below are optional\n        groups_claim=\"groupsClaim\",\n        groups_prefix=\"groupsPrefix\",\n        required_claims=[eks.CfnIdentityProviderConfig.RequiredClaimProperty(\n            key=\"key\",\n            value=\"value\"\n        )],\n        username_claim=\"usernameClaim\",\n        username_prefix=\"usernamePrefix\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCfnIdentityProviderConfig cfnIdentityProviderConfig = new CfnIdentityProviderConfig(this, \"MyCfnIdentityProviderConfig\", new CfnIdentityProviderConfigProps {\n    ClusterName = \"clusterName\",\n    Type = \"type\",\n\n    // the properties below are optional\n    IdentityProviderConfigName = \"identityProviderConfigName\",\n    Oidc = new OidcIdentityProviderConfigProperty {\n        ClientId = \"clientId\",\n        IssuerUrl = \"issuerUrl\",\n\n        // the properties below are optional\n        GroupsClaim = \"groupsClaim\",\n        GroupsPrefix = \"groupsPrefix\",\n        RequiredClaims = new [] { new RequiredClaimProperty {\n            Key = \"key\",\n            Value = \"value\"\n        } },\n        UsernameClaim = \"usernameClaim\",\n        UsernamePrefix = \"usernamePrefix\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCfnIdentityProviderConfig cfnIdentityProviderConfig = CfnIdentityProviderConfig.Builder.create(this, \"MyCfnIdentityProviderConfig\")\n        .clusterName(\"clusterName\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .identityProviderConfigName(\"identityProviderConfigName\")\n        .oidc(OidcIdentityProviderConfigProperty.builder()\n                .clientId(\"clientId\")\n                .issuerUrl(\"issuerUrl\")\n\n                // the properties below are optional\n                .groupsClaim(\"groupsClaim\")\n                .groupsPrefix(\"groupsPrefix\")\n                .requiredClaims(List.of(RequiredClaimProperty.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .usernameClaim(\"usernameClaim\")\n                .usernamePrefix(\"usernamePrefix\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\ncfnIdentityProviderConfig := eks.NewCfnIdentityProviderConfig(this, jsii.String(\"MyCfnIdentityProviderConfig\"), &cfnIdentityProviderConfigProps{\n\tclusterName: jsii.String(\"clusterName\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tidentityProviderConfigName: jsii.String(\"identityProviderConfigName\"),\n\toidc: &oidcIdentityProviderConfigProperty{\n\t\tclientId: jsii.String(\"clientId\"),\n\t\tissuerUrl: jsii.String(\"issuerUrl\"),\n\n\t\t// the properties below are optional\n\t\tgroupsClaim: jsii.String(\"groupsClaim\"),\n\t\tgroupsPrefix: jsii.String(\"groupsPrefix\"),\n\t\trequiredClaims: []interface{}{\n\t\t\t&requiredClaimProperty{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\tusernameClaim: jsii.String(\"usernameClaim\"),\n\t\tusernamePrefix: jsii.String(\"usernamePrefix\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst cfnIdentityProviderConfig = new eks.CfnIdentityProviderConfig(this, 'MyCfnIdentityProviderConfig', {\n  clusterName: 'clusterName',\n  type: 'type',\n\n  // the properties below are optional\n  identityProviderConfigName: 'identityProviderConfigName',\n  oidc: {\n    clientId: 'clientId',\n    issuerUrl: 'issuerUrl',\n\n    // the properties below are optional\n    groupsClaim: 'groupsClaim',\n    groupsPrefix: 'groupsPrefix',\n    requiredClaims: [{\n      key: 'key',\n      value: 'value',\n    }],\n    usernameClaim: 'usernameClaim',\n    usernamePrefix: 'usernamePrefix',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnIdentityProviderConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnIdentityProviderConfig",
        "@aws-cdk/aws-eks.CfnIdentityProviderConfigProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIdentityProviderConfig = new eks.CfnIdentityProviderConfig(this, 'MyCfnIdentityProviderConfig', {\n  clusterName: 'clusterName',\n  type: 'type',\n\n  // the properties below are optional\n  identityProviderConfigName: 'identityProviderConfigName',\n  oidc: {\n    clientId: 'clientId',\n    issuerUrl: 'issuerUrl',\n\n    // the properties below are optional\n    groupsClaim: 'groupsClaim',\n    groupsPrefix: 'groupsPrefix',\n    requiredClaims: [{\n      key: 'key',\n      value: 'value',\n    }],\n    usernameClaim: 'usernameClaim',\n    usernamePrefix: 'usernamePrefix',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 15,
        "75": 20,
        "104": 1,
        "192": 2,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "dd7ba5a2e7de44113090db73ee83c25d578d6ec155f760a37db2834959ebb399"
    },
    "d41860211434b6e7f446188284594db8b9d77ca2858e4a7d1b521246194e9699": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\noidc_identity_provider_config_property = eks.CfnIdentityProviderConfig.OidcIdentityProviderConfigProperty(\n    client_id=\"clientId\",\n    issuer_url=\"issuerUrl\",\n\n    # the properties below are optional\n    groups_claim=\"groupsClaim\",\n    groups_prefix=\"groupsPrefix\",\n    required_claims=[eks.CfnIdentityProviderConfig.RequiredClaimProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    username_claim=\"usernameClaim\",\n    username_prefix=\"usernamePrefix\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nOidcIdentityProviderConfigProperty oidcIdentityProviderConfigProperty = new OidcIdentityProviderConfigProperty {\n    ClientId = \"clientId\",\n    IssuerUrl = \"issuerUrl\",\n\n    // the properties below are optional\n    GroupsClaim = \"groupsClaim\",\n    GroupsPrefix = \"groupsPrefix\",\n    RequiredClaims = new [] { new RequiredClaimProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    UsernameClaim = \"usernameClaim\",\n    UsernamePrefix = \"usernamePrefix\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nOidcIdentityProviderConfigProperty oidcIdentityProviderConfigProperty = OidcIdentityProviderConfigProperty.builder()\n        .clientId(\"clientId\")\n        .issuerUrl(\"issuerUrl\")\n\n        // the properties below are optional\n        .groupsClaim(\"groupsClaim\")\n        .groupsPrefix(\"groupsPrefix\")\n        .requiredClaims(List.of(RequiredClaimProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .usernameClaim(\"usernameClaim\")\n        .usernamePrefix(\"usernamePrefix\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\noidcIdentityProviderConfigProperty := &oidcIdentityProviderConfigProperty{\n\tclientId: jsii.String(\"clientId\"),\n\tissuerUrl: jsii.String(\"issuerUrl\"),\n\n\t// the properties below are optional\n\tgroupsClaim: jsii.String(\"groupsClaim\"),\n\tgroupsPrefix: jsii.String(\"groupsPrefix\"),\n\trequiredClaims: []interface{}{\n\t\t&requiredClaimProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tusernameClaim: jsii.String(\"usernameClaim\"),\n\tusernamePrefix: jsii.String(\"usernamePrefix\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst oidcIdentityProviderConfigProperty: eks.CfnIdentityProviderConfig.OidcIdentityProviderConfigProperty = {\n  clientId: 'clientId',\n  issuerUrl: 'issuerUrl',\n\n  // the properties below are optional\n  groupsClaim: 'groupsClaim',\n  groupsPrefix: 'groupsPrefix',\n  requiredClaims: [{\n    key: 'key',\n    value: 'value',\n  }],\n  usernameClaim: 'usernameClaim',\n  usernamePrefix: 'usernamePrefix',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnIdentityProviderConfig.OidcIdentityProviderConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnIdentityProviderConfig.OidcIdentityProviderConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst oidcIdentityProviderConfigProperty: eks.CfnIdentityProviderConfig.OidcIdentityProviderConfigProperty = {\n  clientId: 'clientId',\n  issuerUrl: 'issuerUrl',\n\n  // the properties below are optional\n  groupsClaim: 'groupsClaim',\n  groupsPrefix: 'groupsPrefix',\n  requiredClaims: [{\n    key: 'key',\n    value: 'value',\n  }],\n  usernameClaim: 'usernameClaim',\n  usernamePrefix: 'usernamePrefix',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 14,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "38031e913b5b3572518c51816c0096f1a8184f4a0b863af8380d500e9df49bda"
    },
    "aa82e95ba43b229107f27cfeca1f531e2e1b5888f895dd1140176b50cff9ab6b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nrequired_claim_property = eks.CfnIdentityProviderConfig.RequiredClaimProperty(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nRequiredClaimProperty requiredClaimProperty = new RequiredClaimProperty {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nRequiredClaimProperty requiredClaimProperty = RequiredClaimProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nrequiredClaimProperty := &requiredClaimProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst requiredClaimProperty: eks.CfnIdentityProviderConfig.RequiredClaimProperty = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnIdentityProviderConfig.RequiredClaimProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnIdentityProviderConfig.RequiredClaimProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst requiredClaimProperty: eks.CfnIdentityProviderConfig.RequiredClaimProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "76c59c20ea870033fff4b967f7a1685a7644a50cdeb27494594657db5ecdd9f8"
    },
    "ce96d573b37ef1e09938a3535c5a7aad81e5e72c0d410de2857362c5b19cc07c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\ncfn_identity_provider_config_props = eks.CfnIdentityProviderConfigProps(\n    cluster_name=\"clusterName\",\n    type=\"type\",\n\n    # the properties below are optional\n    identity_provider_config_name=\"identityProviderConfigName\",\n    oidc=eks.CfnIdentityProviderConfig.OidcIdentityProviderConfigProperty(\n        client_id=\"clientId\",\n        issuer_url=\"issuerUrl\",\n\n        # the properties below are optional\n        groups_claim=\"groupsClaim\",\n        groups_prefix=\"groupsPrefix\",\n        required_claims=[eks.CfnIdentityProviderConfig.RequiredClaimProperty(\n            key=\"key\",\n            value=\"value\"\n        )],\n        username_claim=\"usernameClaim\",\n        username_prefix=\"usernamePrefix\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCfnIdentityProviderConfigProps cfnIdentityProviderConfigProps = new CfnIdentityProviderConfigProps {\n    ClusterName = \"clusterName\",\n    Type = \"type\",\n\n    // the properties below are optional\n    IdentityProviderConfigName = \"identityProviderConfigName\",\n    Oidc = new OidcIdentityProviderConfigProperty {\n        ClientId = \"clientId\",\n        IssuerUrl = \"issuerUrl\",\n\n        // the properties below are optional\n        GroupsClaim = \"groupsClaim\",\n        GroupsPrefix = \"groupsPrefix\",\n        RequiredClaims = new [] { new RequiredClaimProperty {\n            Key = \"key\",\n            Value = \"value\"\n        } },\n        UsernameClaim = \"usernameClaim\",\n        UsernamePrefix = \"usernamePrefix\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCfnIdentityProviderConfigProps cfnIdentityProviderConfigProps = CfnIdentityProviderConfigProps.builder()\n        .clusterName(\"clusterName\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .identityProviderConfigName(\"identityProviderConfigName\")\n        .oidc(OidcIdentityProviderConfigProperty.builder()\n                .clientId(\"clientId\")\n                .issuerUrl(\"issuerUrl\")\n\n                // the properties below are optional\n                .groupsClaim(\"groupsClaim\")\n                .groupsPrefix(\"groupsPrefix\")\n                .requiredClaims(List.of(RequiredClaimProperty.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .usernameClaim(\"usernameClaim\")\n                .usernamePrefix(\"usernamePrefix\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\ncfnIdentityProviderConfigProps := &cfnIdentityProviderConfigProps{\n\tclusterName: jsii.String(\"clusterName\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tidentityProviderConfigName: jsii.String(\"identityProviderConfigName\"),\n\toidc: &oidcIdentityProviderConfigProperty{\n\t\tclientId: jsii.String(\"clientId\"),\n\t\tissuerUrl: jsii.String(\"issuerUrl\"),\n\n\t\t// the properties below are optional\n\t\tgroupsClaim: jsii.String(\"groupsClaim\"),\n\t\tgroupsPrefix: jsii.String(\"groupsPrefix\"),\n\t\trequiredClaims: []interface{}{\n\t\t\t&requiredClaimProperty{\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\tusernameClaim: jsii.String(\"usernameClaim\"),\n\t\tusernamePrefix: jsii.String(\"usernamePrefix\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst cfnIdentityProviderConfigProps: eks.CfnIdentityProviderConfigProps = {\n  clusterName: 'clusterName',\n  type: 'type',\n\n  // the properties below are optional\n  identityProviderConfigName: 'identityProviderConfigName',\n  oidc: {\n    clientId: 'clientId',\n    issuerUrl: 'issuerUrl',\n\n    // the properties below are optional\n    groupsClaim: 'groupsClaim',\n    groupsPrefix: 'groupsPrefix',\n    requiredClaims: [{\n      key: 'key',\n      value: 'value',\n    }],\n    usernameClaim: 'usernameClaim',\n    usernamePrefix: 'usernamePrefix',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnIdentityProviderConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnIdentityProviderConfigProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIdentityProviderConfigProps: eks.CfnIdentityProviderConfigProps = {\n  clusterName: 'clusterName',\n  type: 'type',\n\n  // the properties below are optional\n  identityProviderConfigName: 'identityProviderConfigName',\n  oidc: {\n    clientId: 'clientId',\n    issuerUrl: 'issuerUrl',\n\n    // the properties below are optional\n    groupsClaim: 'groupsClaim',\n    groupsPrefix: 'groupsPrefix',\n    requiredClaims: [{\n      key: 'key',\n      value: 'value',\n    }],\n    usernameClaim: 'usernameClaim',\n    usernamePrefix: 'usernamePrefix',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 14,
        "75": 20,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "57aac4ae32285584fb49d7939fc6ff940681487ac6a7c2867d0706b6cf39d1e9"
    },
    "c0d7e49ff371870de9e2b7d02a119aa53b7c41ea3305ba727e8d3f31931af131": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\n# labels: Any\n# tags: Any\n\ncfn_nodegroup = eks.CfnNodegroup(self, \"MyCfnNodegroup\",\n    cluster_name=\"clusterName\",\n    node_role=\"nodeRole\",\n    subnets=[\"subnets\"],\n\n    # the properties below are optional\n    ami_type=\"amiType\",\n    capacity_type=\"capacityType\",\n    disk_size=123,\n    force_update_enabled=False,\n    instance_types=[\"instanceTypes\"],\n    labels=labels,\n    launch_template=eks.CfnNodegroup.LaunchTemplateSpecificationProperty(\n        id=\"id\",\n        name=\"name\",\n        version=\"version\"\n    ),\n    nodegroup_name=\"nodegroupName\",\n    release_version=\"releaseVersion\",\n    remote_access=eks.CfnNodegroup.RemoteAccessProperty(\n        ec2_ssh_key=\"ec2SshKey\",\n\n        # the properties below are optional\n        source_security_groups=[\"sourceSecurityGroups\"]\n    ),\n    scaling_config=eks.CfnNodegroup.ScalingConfigProperty(\n        desired_size=123,\n        max_size=123,\n        min_size=123\n    ),\n    tags=tags,\n    taints=[eks.CfnNodegroup.TaintProperty(\n        effect=\"effect\",\n        key=\"key\",\n        value=\"value\"\n    )],\n    update_config=eks.CfnNodegroup.UpdateConfigProperty(\n        max_unavailable=123,\n        max_unavailable_percentage=123\n    ),\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nvar labels;\nvar tags;\n\nCfnNodegroup cfnNodegroup = new CfnNodegroup(this, \"MyCfnNodegroup\", new CfnNodegroupProps {\n    ClusterName = \"clusterName\",\n    NodeRole = \"nodeRole\",\n    Subnets = new [] { \"subnets\" },\n\n    // the properties below are optional\n    AmiType = \"amiType\",\n    CapacityType = \"capacityType\",\n    DiskSize = 123,\n    ForceUpdateEnabled = false,\n    InstanceTypes = new [] { \"instanceTypes\" },\n    Labels = labels,\n    LaunchTemplate = new LaunchTemplateSpecificationProperty {\n        Id = \"id\",\n        Name = \"name\",\n        Version = \"version\"\n    },\n    NodegroupName = \"nodegroupName\",\n    ReleaseVersion = \"releaseVersion\",\n    RemoteAccess = new RemoteAccessProperty {\n        Ec2SshKey = \"ec2SshKey\",\n\n        // the properties below are optional\n        SourceSecurityGroups = new [] { \"sourceSecurityGroups\" }\n    },\n    ScalingConfig = new ScalingConfigProperty {\n        DesiredSize = 123,\n        MaxSize = 123,\n        MinSize = 123\n    },\n    Tags = tags,\n    Taints = new [] { new TaintProperty {\n        Effect = \"effect\",\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    UpdateConfig = new UpdateConfigProperty {\n        MaxUnavailable = 123,\n        MaxUnavailablePercentage = 123\n    },\n    Version = \"version\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nObject labels;\nObject tags;\n\nCfnNodegroup cfnNodegroup = CfnNodegroup.Builder.create(this, \"MyCfnNodegroup\")\n        .clusterName(\"clusterName\")\n        .nodeRole(\"nodeRole\")\n        .subnets(List.of(\"subnets\"))\n\n        // the properties below are optional\n        .amiType(\"amiType\")\n        .capacityType(\"capacityType\")\n        .diskSize(123)\n        .forceUpdateEnabled(false)\n        .instanceTypes(List.of(\"instanceTypes\"))\n        .labels(labels)\n        .launchTemplate(LaunchTemplateSpecificationProperty.builder()\n                .id(\"id\")\n                .name(\"name\")\n                .version(\"version\")\n                .build())\n        .nodegroupName(\"nodegroupName\")\n        .releaseVersion(\"releaseVersion\")\n        .remoteAccess(RemoteAccessProperty.builder()\n                .ec2SshKey(\"ec2SshKey\")\n\n                // the properties below are optional\n                .sourceSecurityGroups(List.of(\"sourceSecurityGroups\"))\n                .build())\n        .scalingConfig(ScalingConfigProperty.builder()\n                .desiredSize(123)\n                .maxSize(123)\n                .minSize(123)\n                .build())\n        .tags(tags)\n        .taints(List.of(TaintProperty.builder()\n                .effect(\"effect\")\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .updateConfig(UpdateConfigProperty.builder()\n                .maxUnavailable(123)\n                .maxUnavailablePercentage(123)\n                .build())\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nvar labels interface{}\nvar tags interface{}\ncfnNodegroup := eks.NewCfnNodegroup(this, jsii.String(\"MyCfnNodegroup\"), &cfnNodegroupProps{\n\tclusterName: jsii.String(\"clusterName\"),\n\tnodeRole: jsii.String(\"nodeRole\"),\n\tsubnets: []*string{\n\t\tjsii.String(\"subnets\"),\n\t},\n\n\t// the properties below are optional\n\tamiType: jsii.String(\"amiType\"),\n\tcapacityType: jsii.String(\"capacityType\"),\n\tdiskSize: jsii.Number(123),\n\tforceUpdateEnabled: jsii.Boolean(false),\n\tinstanceTypes: []*string{\n\t\tjsii.String(\"instanceTypes\"),\n\t},\n\tlabels: labels,\n\tlaunchTemplate: &launchTemplateSpecificationProperty{\n\t\tid: jsii.String(\"id\"),\n\t\tname: jsii.String(\"name\"),\n\t\tversion: jsii.String(\"version\"),\n\t},\n\tnodegroupName: jsii.String(\"nodegroupName\"),\n\treleaseVersion: jsii.String(\"releaseVersion\"),\n\tremoteAccess: &remoteAccessProperty{\n\t\tec2SshKey: jsii.String(\"ec2SshKey\"),\n\n\t\t// the properties below are optional\n\t\tsourceSecurityGroups: []*string{\n\t\t\tjsii.String(\"sourceSecurityGroups\"),\n\t\t},\n\t},\n\tscalingConfig: &scalingConfigProperty{\n\t\tdesiredSize: jsii.Number(123),\n\t\tmaxSize: jsii.Number(123),\n\t\tminSize: jsii.Number(123),\n\t},\n\ttags: tags,\n\ttaints: []interface{}{\n\t\t&taintProperty{\n\t\t\teffect: jsii.String(\"effect\"),\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tupdateConfig: &updateConfigProperty{\n\t\tmaxUnavailable: jsii.Number(123),\n\t\tmaxUnavailablePercentage: jsii.Number(123),\n\t},\n\tversion: jsii.String(\"version\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const labels: any;\ndeclare const tags: any;\nconst cfnNodegroup = new eks.CfnNodegroup(this, 'MyCfnNodegroup', {\n  clusterName: 'clusterName',\n  nodeRole: 'nodeRole',\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  amiType: 'amiType',\n  capacityType: 'capacityType',\n  diskSize: 123,\n  forceUpdateEnabled: false,\n  instanceTypes: ['instanceTypes'],\n  labels: labels,\n  launchTemplate: {\n    id: 'id',\n    name: 'name',\n    version: 'version',\n  },\n  nodegroupName: 'nodegroupName',\n  releaseVersion: 'releaseVersion',\n  remoteAccess: {\n    ec2SshKey: 'ec2SshKey',\n\n    // the properties below are optional\n    sourceSecurityGroups: ['sourceSecurityGroups'],\n  },\n  scalingConfig: {\n    desiredSize: 123,\n    maxSize: 123,\n    minSize: 123,\n  },\n  tags: tags,\n  taints: [{\n    effect: 'effect',\n    key: 'key',\n    value: 'value',\n  }],\n  updateConfig: {\n    maxUnavailable: 123,\n    maxUnavailablePercentage: 123,\n  },\n  version: 'version',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnNodegroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnNodegroup",
        "@aws-cdk/aws-eks.CfnNodegroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const labels: any;\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNodegroup = new eks.CfnNodegroup(this, 'MyCfnNodegroup', {\n  clusterName: 'clusterName',\n  nodeRole: 'nodeRole',\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  amiType: 'amiType',\n  capacityType: 'capacityType',\n  diskSize: 123,\n  forceUpdateEnabled: false,\n  instanceTypes: ['instanceTypes'],\n  labels: labels,\n  launchTemplate: {\n    id: 'id',\n    name: 'name',\n    version: 'version',\n  },\n  nodegroupName: 'nodegroupName',\n  releaseVersion: 'releaseVersion',\n  remoteAccess: {\n    ec2SshKey: 'ec2SshKey',\n\n    // the properties below are optional\n    sourceSecurityGroups: ['sourceSecurityGroups'],\n  },\n  scalingConfig: {\n    desiredSize: 123,\n    maxSize: 123,\n    minSize: 123,\n  },\n  tags: tags,\n  taints: [{\n    effect: 'effect',\n    key: 'key',\n    value: 'value',\n  }],\n  updateConfig: {\n    maxUnavailable: 123,\n    maxUnavailablePercentage: 123,\n  },\n  version: 'version',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 19,
        "75": 39,
        "91": 1,
        "104": 1,
        "125": 2,
        "130": 2,
        "192": 4,
        "193": 6,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 31,
        "290": 1
      },
      "fqnsFingerprint": "ae5b6c6a3296be4d3c95653f7721ec2f6a9464b8160203405f9dc425ac2aee66"
    },
    "3f8e7c939b2934bd5d1f37b696189de3551a5f76c1fc253ccd08b6a1f05d6e8a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nlaunch_template_specification_property = eks.CfnNodegroup.LaunchTemplateSpecificationProperty(\n    id=\"id\",\n    name=\"name\",\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nLaunchTemplateSpecificationProperty launchTemplateSpecificationProperty = new LaunchTemplateSpecificationProperty {\n    Id = \"id\",\n    Name = \"name\",\n    Version = \"version\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nLaunchTemplateSpecificationProperty launchTemplateSpecificationProperty = LaunchTemplateSpecificationProperty.builder()\n        .id(\"id\")\n        .name(\"name\")\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nlaunchTemplateSpecificationProperty := &launchTemplateSpecificationProperty{\n\tid: jsii.String(\"id\"),\n\tname: jsii.String(\"name\"),\n\tversion: jsii.String(\"version\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst launchTemplateSpecificationProperty: eks.CfnNodegroup.LaunchTemplateSpecificationProperty = {\n  id: 'id',\n  name: 'name',\n  version: 'version',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnNodegroup.LaunchTemplateSpecificationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnNodegroup.LaunchTemplateSpecificationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst launchTemplateSpecificationProperty: eks.CfnNodegroup.LaunchTemplateSpecificationProperty = {\n  id: 'id',\n  name: 'name',\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b4a874ef9cc084375fc9945212e5367158bb3bc3c30a5f810cb09e86ba785e9e"
    },
    "6160a2dfddb4a60e48e2499da50d6d97e98172649409225a06b4e03291ffa2a8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nremote_access_property = eks.CfnNodegroup.RemoteAccessProperty(\n    ec2_ssh_key=\"ec2SshKey\",\n\n    # the properties below are optional\n    source_security_groups=[\"sourceSecurityGroups\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nRemoteAccessProperty remoteAccessProperty = new RemoteAccessProperty {\n    Ec2SshKey = \"ec2SshKey\",\n\n    // the properties below are optional\n    SourceSecurityGroups = new [] { \"sourceSecurityGroups\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nRemoteAccessProperty remoteAccessProperty = RemoteAccessProperty.builder()\n        .ec2SshKey(\"ec2SshKey\")\n\n        // the properties below are optional\n        .sourceSecurityGroups(List.of(\"sourceSecurityGroups\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nremoteAccessProperty := &remoteAccessProperty{\n\tec2SshKey: jsii.String(\"ec2SshKey\"),\n\n\t// the properties below are optional\n\tsourceSecurityGroups: []*string{\n\t\tjsii.String(\"sourceSecurityGroups\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst remoteAccessProperty: eks.CfnNodegroup.RemoteAccessProperty = {\n  ec2SshKey: 'ec2SshKey',\n\n  // the properties below are optional\n  sourceSecurityGroups: ['sourceSecurityGroups'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnNodegroup.RemoteAccessProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnNodegroup.RemoteAccessProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst remoteAccessProperty: eks.CfnNodegroup.RemoteAccessProperty = {\n  ec2SshKey: 'ec2SshKey',\n\n  // the properties below are optional\n  sourceSecurityGroups: ['sourceSecurityGroups'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a1fc8b1931db5268cef0320bcd5c001c55e7b9b5cce5f399e58d00043c23f4fd"
    },
    "f11df7038198fc08a8f1e29144da532b42bdbf72545312dc14ae6b06fe19de98": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nscaling_config_property = eks.CfnNodegroup.ScalingConfigProperty(\n    desired_size=123,\n    max_size=123,\n    min_size=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nScalingConfigProperty scalingConfigProperty = new ScalingConfigProperty {\n    DesiredSize = 123,\n    MaxSize = 123,\n    MinSize = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nScalingConfigProperty scalingConfigProperty = ScalingConfigProperty.builder()\n        .desiredSize(123)\n        .maxSize(123)\n        .minSize(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nscalingConfigProperty := &scalingConfigProperty{\n\tdesiredSize: jsii.Number(123),\n\tmaxSize: jsii.Number(123),\n\tminSize: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst scalingConfigProperty: eks.CfnNodegroup.ScalingConfigProperty = {\n  desiredSize: 123,\n  maxSize: 123,\n  minSize: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnNodegroup.ScalingConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnNodegroup.ScalingConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scalingConfigProperty: eks.CfnNodegroup.ScalingConfigProperty = {\n  desiredSize: 123,\n  maxSize: 123,\n  minSize: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 1,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "79189902073c27d8eb85ada637bd55720a0f8a1788ec0c5ccb2b4eb3db92145f"
    },
    "11701d7cea51648c9df842583d85d1a23c1de82404cc02d46ad2be147ff92ccc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\ntaint_property = eks.CfnNodegroup.TaintProperty(\n    effect=\"effect\",\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nTaintProperty taintProperty = new TaintProperty {\n    Effect = \"effect\",\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nTaintProperty taintProperty = TaintProperty.builder()\n        .effect(\"effect\")\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\ntaintProperty := &taintProperty{\n\teffect: jsii.String(\"effect\"),\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst taintProperty: eks.CfnNodegroup.TaintProperty = {\n  effect: 'effect',\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnNodegroup.TaintProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnNodegroup.TaintProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst taintProperty: eks.CfnNodegroup.TaintProperty = {\n  effect: 'effect',\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f7411ecb05d16a781c2a4bf89bd581b1e871ed7ac7ef4b7d3c26f90267a48b81"
    },
    "98039fe203abca8894004d18e5400a69df9215951be77725b976a85987003080": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nupdate_config_property = eks.CfnNodegroup.UpdateConfigProperty(\n    max_unavailable=123,\n    max_unavailable_percentage=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nUpdateConfigProperty updateConfigProperty = new UpdateConfigProperty {\n    MaxUnavailable = 123,\n    MaxUnavailablePercentage = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nUpdateConfigProperty updateConfigProperty = UpdateConfigProperty.builder()\n        .maxUnavailable(123)\n        .maxUnavailablePercentage(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nupdateConfigProperty := &updateConfigProperty{\n\tmaxUnavailable: jsii.Number(123),\n\tmaxUnavailablePercentage: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst updateConfigProperty: eks.CfnNodegroup.UpdateConfigProperty = {\n  maxUnavailable: 123,\n  maxUnavailablePercentage: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnNodegroup.UpdateConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnNodegroup.UpdateConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst updateConfigProperty: eks.CfnNodegroup.UpdateConfigProperty = {\n  maxUnavailable: 123,\n  maxUnavailablePercentage: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "fd7287651c851d4071361cbf5c4e70f0f6450336ba381746044dcbf101b596c3"
    },
    "2050eb9787ddb9112680dcc79369b90737f8f176cbe784bfda1ec473d307492b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\n# labels: Any\n# tags: Any\n\ncfn_nodegroup_props = eks.CfnNodegroupProps(\n    cluster_name=\"clusterName\",\n    node_role=\"nodeRole\",\n    subnets=[\"subnets\"],\n\n    # the properties below are optional\n    ami_type=\"amiType\",\n    capacity_type=\"capacityType\",\n    disk_size=123,\n    force_update_enabled=False,\n    instance_types=[\"instanceTypes\"],\n    labels=labels,\n    launch_template=eks.CfnNodegroup.LaunchTemplateSpecificationProperty(\n        id=\"id\",\n        name=\"name\",\n        version=\"version\"\n    ),\n    nodegroup_name=\"nodegroupName\",\n    release_version=\"releaseVersion\",\n    remote_access=eks.CfnNodegroup.RemoteAccessProperty(\n        ec2_ssh_key=\"ec2SshKey\",\n\n        # the properties below are optional\n        source_security_groups=[\"sourceSecurityGroups\"]\n    ),\n    scaling_config=eks.CfnNodegroup.ScalingConfigProperty(\n        desired_size=123,\n        max_size=123,\n        min_size=123\n    ),\n    tags=tags,\n    taints=[eks.CfnNodegroup.TaintProperty(\n        effect=\"effect\",\n        key=\"key\",\n        value=\"value\"\n    )],\n    update_config=eks.CfnNodegroup.UpdateConfigProperty(\n        max_unavailable=123,\n        max_unavailable_percentage=123\n    ),\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nvar labels;\nvar tags;\n\nCfnNodegroupProps cfnNodegroupProps = new CfnNodegroupProps {\n    ClusterName = \"clusterName\",\n    NodeRole = \"nodeRole\",\n    Subnets = new [] { \"subnets\" },\n\n    // the properties below are optional\n    AmiType = \"amiType\",\n    CapacityType = \"capacityType\",\n    DiskSize = 123,\n    ForceUpdateEnabled = false,\n    InstanceTypes = new [] { \"instanceTypes\" },\n    Labels = labels,\n    LaunchTemplate = new LaunchTemplateSpecificationProperty {\n        Id = \"id\",\n        Name = \"name\",\n        Version = \"version\"\n    },\n    NodegroupName = \"nodegroupName\",\n    ReleaseVersion = \"releaseVersion\",\n    RemoteAccess = new RemoteAccessProperty {\n        Ec2SshKey = \"ec2SshKey\",\n\n        // the properties below are optional\n        SourceSecurityGroups = new [] { \"sourceSecurityGroups\" }\n    },\n    ScalingConfig = new ScalingConfigProperty {\n        DesiredSize = 123,\n        MaxSize = 123,\n        MinSize = 123\n    },\n    Tags = tags,\n    Taints = new [] { new TaintProperty {\n        Effect = \"effect\",\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    UpdateConfig = new UpdateConfigProperty {\n        MaxUnavailable = 123,\n        MaxUnavailablePercentage = 123\n    },\n    Version = \"version\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nObject labels;\nObject tags;\n\nCfnNodegroupProps cfnNodegroupProps = CfnNodegroupProps.builder()\n        .clusterName(\"clusterName\")\n        .nodeRole(\"nodeRole\")\n        .subnets(List.of(\"subnets\"))\n\n        // the properties below are optional\n        .amiType(\"amiType\")\n        .capacityType(\"capacityType\")\n        .diskSize(123)\n        .forceUpdateEnabled(false)\n        .instanceTypes(List.of(\"instanceTypes\"))\n        .labels(labels)\n        .launchTemplate(LaunchTemplateSpecificationProperty.builder()\n                .id(\"id\")\n                .name(\"name\")\n                .version(\"version\")\n                .build())\n        .nodegroupName(\"nodegroupName\")\n        .releaseVersion(\"releaseVersion\")\n        .remoteAccess(RemoteAccessProperty.builder()\n                .ec2SshKey(\"ec2SshKey\")\n\n                // the properties below are optional\n                .sourceSecurityGroups(List.of(\"sourceSecurityGroups\"))\n                .build())\n        .scalingConfig(ScalingConfigProperty.builder()\n                .desiredSize(123)\n                .maxSize(123)\n                .minSize(123)\n                .build())\n        .tags(tags)\n        .taints(List.of(TaintProperty.builder()\n                .effect(\"effect\")\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .updateConfig(UpdateConfigProperty.builder()\n                .maxUnavailable(123)\n                .maxUnavailablePercentage(123)\n                .build())\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nvar labels interface{}\nvar tags interface{}\ncfnNodegroupProps := &cfnNodegroupProps{\n\tclusterName: jsii.String(\"clusterName\"),\n\tnodeRole: jsii.String(\"nodeRole\"),\n\tsubnets: []*string{\n\t\tjsii.String(\"subnets\"),\n\t},\n\n\t// the properties below are optional\n\tamiType: jsii.String(\"amiType\"),\n\tcapacityType: jsii.String(\"capacityType\"),\n\tdiskSize: jsii.Number(123),\n\tforceUpdateEnabled: jsii.Boolean(false),\n\tinstanceTypes: []*string{\n\t\tjsii.String(\"instanceTypes\"),\n\t},\n\tlabels: labels,\n\tlaunchTemplate: &launchTemplateSpecificationProperty{\n\t\tid: jsii.String(\"id\"),\n\t\tname: jsii.String(\"name\"),\n\t\tversion: jsii.String(\"version\"),\n\t},\n\tnodegroupName: jsii.String(\"nodegroupName\"),\n\treleaseVersion: jsii.String(\"releaseVersion\"),\n\tremoteAccess: &remoteAccessProperty{\n\t\tec2SshKey: jsii.String(\"ec2SshKey\"),\n\n\t\t// the properties below are optional\n\t\tsourceSecurityGroups: []*string{\n\t\t\tjsii.String(\"sourceSecurityGroups\"),\n\t\t},\n\t},\n\tscalingConfig: &scalingConfigProperty{\n\t\tdesiredSize: jsii.Number(123),\n\t\tmaxSize: jsii.Number(123),\n\t\tminSize: jsii.Number(123),\n\t},\n\ttags: tags,\n\ttaints: []interface{}{\n\t\t&taintProperty{\n\t\t\teffect: jsii.String(\"effect\"),\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tupdateConfig: &updateConfigProperty{\n\t\tmaxUnavailable: jsii.Number(123),\n\t\tmaxUnavailablePercentage: jsii.Number(123),\n\t},\n\tversion: jsii.String(\"version\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const labels: any;\ndeclare const tags: any;\nconst cfnNodegroupProps: eks.CfnNodegroupProps = {\n  clusterName: 'clusterName',\n  nodeRole: 'nodeRole',\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  amiType: 'amiType',\n  capacityType: 'capacityType',\n  diskSize: 123,\n  forceUpdateEnabled: false,\n  instanceTypes: ['instanceTypes'],\n  labels: labels,\n  launchTemplate: {\n    id: 'id',\n    name: 'name',\n    version: 'version',\n  },\n  nodegroupName: 'nodegroupName',\n  releaseVersion: 'releaseVersion',\n  remoteAccess: {\n    ec2SshKey: 'ec2SshKey',\n\n    // the properties below are optional\n    sourceSecurityGroups: ['sourceSecurityGroups'],\n  },\n  scalingConfig: {\n    desiredSize: 123,\n    maxSize: 123,\n    minSize: 123,\n  },\n  tags: tags,\n  taints: [{\n    effect: 'effect',\n    key: 'key',\n    value: 'value',\n  }],\n  updateConfig: {\n    maxUnavailable: 123,\n    maxUnavailablePercentage: 123,\n  },\n  version: 'version',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CfnNodegroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CfnNodegroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const labels: any;\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNodegroupProps: eks.CfnNodegroupProps = {\n  clusterName: 'clusterName',\n  nodeRole: 'nodeRole',\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  amiType: 'amiType',\n  capacityType: 'capacityType',\n  diskSize: 123,\n  forceUpdateEnabled: false,\n  instanceTypes: ['instanceTypes'],\n  labels: labels,\n  launchTemplate: {\n    id: 'id',\n    name: 'name',\n    version: 'version',\n  },\n  nodegroupName: 'nodegroupName',\n  releaseVersion: 'releaseVersion',\n  remoteAccess: {\n    ec2SshKey: 'ec2SshKey',\n\n    // the properties below are optional\n    sourceSecurityGroups: ['sourceSecurityGroups'],\n  },\n  scalingConfig: {\n    desiredSize: 123,\n    maxSize: 123,\n    minSize: 123,\n  },\n  tags: tags,\n  taints: [{\n    effect: 'effect',\n    key: 'key',\n    value: 'value',\n  }],\n  updateConfig: {\n    maxUnavailable: 123,\n    maxUnavailablePercentage: 123,\n  },\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 18,
        "75": 39,
        "91": 1,
        "125": 2,
        "130": 2,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 6,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 31,
        "290": 1
      },
      "fqnsFingerprint": "8ec79cdc83302f7fe1576750baa192dda914e84c85b181e0c7d05ff9a9f68016"
    },
    "3ccbf7eeb90be1ea60b237e42a2944a122750fe95c16637745117035eb572bc3": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\neks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    vpc=vpc,\n    vpc_subnets=[ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    Vpc = vpc,\n    VpcSubnets = new [] { new SubnetSelection { SubnetType = SubnetType.PRIVATE } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .vpc(vpc)\n        .vpcSubnets(List.of(SubnetSelection.builder().subnetType(SubnetType.PRIVATE).build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\neks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tvpc: vpc,\n\tvpcSubnets: []subnetSelection{\n\t\t&subnetSelection{\n\t\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  vpc,\n  vpcSubnets: [{ subnetType: ec2.SubnetType.PRIVATE }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.Cluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  vpc,\n  vpcSubnets: [{ subnetType: ec2.SubnetType.PRIVATE }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "40540957c50341d14d51d2ea487874bd226cd103c97d991f1468ad9a98ec6621"
    },
    "ae11cd294c838e8f58531db13f62151141f515631ef1e02a43b96aa79e3fef45": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n# asg: autoscaling.AutoScalingGroup\n\nimported_cluster = eks.Cluster.from_cluster_attributes(self, \"ImportedCluster\",\n    cluster_name=cluster.cluster_name,\n    cluster_security_group_id=cluster.cluster_security_group_id\n)\n\nimported_cluster.connect_auto_scaling_group_capacity(asg)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nAutoScalingGroup asg;\n\nICluster importedCluster = Cluster.FromClusterAttributes(this, \"ImportedCluster\", new ClusterAttributes {\n    ClusterName = cluster.ClusterName,\n    ClusterSecurityGroupId = cluster.ClusterSecurityGroupId\n});\n\nimportedCluster.ConnectAutoScalingGroupCapacity(asg, new AutoScalingGroupOptions { });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nAutoScalingGroup asg;\n\nICluster importedCluster = Cluster.fromClusterAttributes(this, \"ImportedCluster\", ClusterAttributes.builder()\n        .clusterName(cluster.getClusterName())\n        .clusterSecurityGroupId(cluster.getClusterSecurityGroupId())\n        .build());\n\nimportedCluster.connectAutoScalingGroupCapacity(asg, AutoScalingGroupOptions.builder().build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar asg autoScalingGroup\nimportedCluster := eks.cluster.fromClusterAttributes(this, jsii.String(\"ImportedCluster\"), &clusterAttributes{\n\tclusterName: cluster.clusterName,\n\tclusterSecurityGroupId: cluster.clusterSecurityGroupId,\n})\n\nimportedCluster.connectAutoScalingGroupCapacity(asg, &autoScalingGroupOptions{\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ndeclare const asg: autoscaling.AutoScalingGroup;\nconst importedCluster = eks.Cluster.fromClusterAttributes(this, 'ImportedCluster', {\n  clusterName: cluster.clusterName,\n  clusterSecurityGroupId: cluster.clusterSecurityGroupId,\n});\n\nimportedCluster.connectAutoScalingGroupCapacity(asg, {});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.ClusterAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-eks.AutoScalingGroupOptions",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#clusterName",
        "@aws-cdk/aws-eks.Cluster#clusterSecurityGroupId",
        "@aws-cdk/aws-eks.Cluster#fromClusterAttributes",
        "@aws-cdk/aws-eks.ClusterAttributes",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.ICluster#connectAutoScalingGroupCapacity",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\ndeclare const asg: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst importedCluster = eks.Cluster.fromClusterAttributes(this, 'ImportedCluster', {\n  clusterName: cluster.clusterName,\n  clusterSecurityGroupId: cluster.clusterSecurityGroupId,\n});\n\nimportedCluster.connectAutoScalingGroupCapacity(asg, {});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c581cb29348baeb1f562abb56beca470b432e95d26cb81c9d48addd424c4f2ff"
    },
    "29cd02e90841f6e914a20e4f4d85477dc6493e0722fcd32641eac2add001fd8f": {
      "translations": {
        "python": {
          "source": "cluster = eks.Cluster(self, \"Cluster\",\n    # ...\n    version=eks.KubernetesVersion.V1_22,\n    cluster_logging=[eks.ClusterLoggingTypes.API, eks.ClusterLoggingTypes.AUTHENTICATOR, eks.ClusterLoggingTypes.SCHEDULER\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    // ...\n    Version = KubernetesVersion.V1_22,\n    ClusterLogging = new [] { ClusterLoggingTypes.API, ClusterLoggingTypes.AUTHENTICATOR, ClusterLoggingTypes.SCHEDULER }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        // ...\n        .version(KubernetesVersion.V1_22)\n        .clusterLogging(List.of(ClusterLoggingTypes.API, ClusterLoggingTypes.AUTHENTICATOR, ClusterLoggingTypes.SCHEDULER))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\t// ...\n\tversion: eks.kubernetesVersion_V1_22(),\n\tclusterLogging: []clusterLoggingTypes{\n\t\teks.*clusterLoggingTypes_API,\n\t\teks.*clusterLoggingTypes_AUTHENTICATOR,\n\t\teks.*clusterLoggingTypes_SCHEDULER,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.Cluster(this, 'Cluster', {\n  // ...\n  version: eks.KubernetesVersion.V1_22,\n  clusterLogging: [\n    eks.ClusterLoggingTypes.API,\n    eks.ClusterLoggingTypes.AUTHENTICATOR,\n    eks.ClusterLoggingTypes.SCHEDULER,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.ClusterLoggingTypes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterLoggingTypes",
        "@aws-cdk/aws-eks.ClusterLoggingTypes#API",
        "@aws-cdk/aws-eks.ClusterLoggingTypes#AUTHENTICATOR",
        "@aws-cdk/aws-eks.ClusterLoggingTypes#SCHEDULER",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.Cluster(this, 'Cluster', {\n  // ...\n  version: eks.KubernetesVersion.V1_22,\n  clusterLogging: [\n    eks.ClusterLoggingTypes.API,\n    eks.ClusterLoggingTypes.AUTHENTICATOR,\n    eks.ClusterLoggingTypes.SCHEDULER,\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 17,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 9,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5850ccac70e031a1a23485f633584eb0b6116f0c4be0bdf3d2fc478a168a851d"
    },
    "590affbc0139de794ce3b6c8c9af226a3f2533960421def79c695e30c44b9861": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_eks as eks\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# alb_controller_version: eks.AlbControllerVersion\n# endpoint_access: eks.EndpointAccess\n# key: kms.Key\n# kubernetes_version: eks.KubernetesVersion\n# layer_version: lambda.LayerVersion\n# policy: Any\n# role: iam.Role\n# security_group: ec2.SecurityGroup\n# size: cdk.Size\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\ncluster_options = eks.ClusterOptions(\n    version=kubernetes_version,\n\n    # the properties below are optional\n    alb_controller=eks.AlbControllerOptions(\n        version=alb_controller_version,\n\n        # the properties below are optional\n        policy=policy,\n        repository=\"repository\"\n    ),\n    cluster_handler_environment={\n        \"cluster_handler_environment_key\": \"clusterHandlerEnvironment\"\n    },\n    cluster_handler_security_group=security_group,\n    cluster_name=\"clusterName\",\n    core_dns_compute_type=eks.CoreDnsComputeType.EC2,\n    endpoint_access=endpoint_access,\n    kubectl_environment={\n        \"kubectl_environment_key\": \"kubectlEnvironment\"\n    },\n    kubectl_layer=layer_version,\n    kubectl_memory=size,\n    masters_role=role,\n    on_event_layer=layer_version,\n    output_cluster_name=False,\n    output_config_command=False,\n    output_masters_role_arn=False,\n    place_cluster_handler_in_vpc=False,\n    prune=False,\n    role=role,\n    secrets_encryption_key=key,\n    security_group=security_group,\n    service_ipv4_cidr=\"serviceIpv4Cidr\",\n    vpc=vpc,\n    vpc_subnets=[ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EKS;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nAlbControllerVersion albControllerVersion;\nEndpointAccess endpointAccess;\nKey key;\nKubernetesVersion kubernetesVersion;\nLayerVersion layerVersion;\nvar policy;\nRole role;\nSecurityGroup securityGroup;\nSize size;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\nClusterOptions clusterOptions = new ClusterOptions {\n    Version = kubernetesVersion,\n\n    // the properties below are optional\n    AlbController = new AlbControllerOptions {\n        Version = albControllerVersion,\n\n        // the properties below are optional\n        Policy = policy,\n        Repository = \"repository\"\n    },\n    ClusterHandlerEnvironment = new Dictionary<string, string> {\n        { \"clusterHandlerEnvironmentKey\", \"clusterHandlerEnvironment\" }\n    },\n    ClusterHandlerSecurityGroup = securityGroup,\n    ClusterName = \"clusterName\",\n    CoreDnsComputeType = CoreDnsComputeType.EC2,\n    EndpointAccess = endpointAccess,\n    KubectlEnvironment = new Dictionary<string, string> {\n        { \"kubectlEnvironmentKey\", \"kubectlEnvironment\" }\n    },\n    KubectlLayer = layerVersion,\n    KubectlMemory = size,\n    MastersRole = role,\n    OnEventLayer = layerVersion,\n    OutputClusterName = false,\n    OutputConfigCommand = false,\n    OutputMastersRoleArn = false,\n    PlaceClusterHandlerInVpc = false,\n    Prune = false,\n    Role = role,\n    SecretsEncryptionKey = key,\n    SecurityGroup = securityGroup,\n    ServiceIpv4Cidr = \"serviceIpv4Cidr\",\n    Vpc = vpc,\n    VpcSubnets = new [] { new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.eks.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nAlbControllerVersion albControllerVersion;\nEndpointAccess endpointAccess;\nKey key;\nKubernetesVersion kubernetesVersion;\nLayerVersion layerVersion;\nObject policy;\nRole role;\nSecurityGroup securityGroup;\nSize size;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nClusterOptions clusterOptions = ClusterOptions.builder()\n        .version(kubernetesVersion)\n\n        // the properties below are optional\n        .albController(AlbControllerOptions.builder()\n                .version(albControllerVersion)\n\n                // the properties below are optional\n                .policy(policy)\n                .repository(\"repository\")\n                .build())\n        .clusterHandlerEnvironment(Map.of(\n                \"clusterHandlerEnvironmentKey\", \"clusterHandlerEnvironment\"))\n        .clusterHandlerSecurityGroup(securityGroup)\n        .clusterName(\"clusterName\")\n        .coreDnsComputeType(CoreDnsComputeType.EC2)\n        .endpointAccess(endpointAccess)\n        .kubectlEnvironment(Map.of(\n                \"kubectlEnvironmentKey\", \"kubectlEnvironment\"))\n        .kubectlLayer(layerVersion)\n        .kubectlMemory(size)\n        .mastersRole(role)\n        .onEventLayer(layerVersion)\n        .outputClusterName(false)\n        .outputConfigCommand(false)\n        .outputMastersRoleArn(false)\n        .placeClusterHandlerInVpc(false)\n        .prune(false)\n        .role(role)\n        .secretsEncryptionKey(key)\n        .securityGroup(securityGroup)\n        .serviceIpv4Cidr(\"serviceIpv4Cidr\")\n        .vpc(vpc)\n        .vpcSubnets(List.of(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import eks \"github.com/aws-samples/dummy/awscdkawseks\"import iam \"github.com/aws-samples/dummy/awscdkawsiam\"import kms \"github.com/aws-samples/dummy/awscdkawskms\"import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar albControllerVersion albControllerVersion\nvar endpointAccess endpointAccess\nvar key key\nvar kubernetesVersion kubernetesVersion\nvar layerVersion layerVersion\nvar policy interface{}\nvar role role\nvar securityGroup securityGroup\nvar size size\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar vpc vpc\nclusterOptions := &clusterOptions{\n\tversion: kubernetesVersion,\n\n\t// the properties below are optional\n\talbController: &albControllerOptions{\n\t\tversion: albControllerVersion,\n\n\t\t// the properties below are optional\n\t\tpolicy: policy,\n\t\trepository: jsii.String(\"repository\"),\n\t},\n\tclusterHandlerEnvironment: map[string]*string{\n\t\t\"clusterHandlerEnvironmentKey\": jsii.String(\"clusterHandlerEnvironment\"),\n\t},\n\tclusterHandlerSecurityGroup: securityGroup,\n\tclusterName: jsii.String(\"clusterName\"),\n\tcoreDnsComputeType: eks.coreDnsComputeType_EC2,\n\tendpointAccess: endpointAccess,\n\tkubectlEnvironment: map[string]*string{\n\t\t\"kubectlEnvironmentKey\": jsii.String(\"kubectlEnvironment\"),\n\t},\n\tkubectlLayer: layerVersion,\n\tkubectlMemory: size,\n\tmastersRole: role,\n\tonEventLayer: layerVersion,\n\toutputClusterName: jsii.Boolean(false),\n\toutputConfigCommand: jsii.Boolean(false),\n\toutputMastersRoleArn: jsii.Boolean(false),\n\tplaceClusterHandlerInVpc: jsii.Boolean(false),\n\tprune: jsii.Boolean(false),\n\trole: role,\n\tsecretsEncryptionKey: key,\n\tsecurityGroup: securityGroup,\n\tserviceIpv4Cidr: jsii.String(\"serviceIpv4Cidr\"),\n\tvpc: vpc,\n\tvpcSubnets: []subnetSelection{\n\t\t&subnetSelection{\n\t\t\tavailabilityZones: []*string{\n\t\t\t\tjsii.String(\"availabilityZones\"),\n\t\t\t},\n\t\t\tonePerAz: jsii.Boolean(false),\n\t\t\tsubnetFilters: []*subnetFilter{\n\t\t\t\tsubnetFilter,\n\t\t\t},\n\t\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\t\tsubnets: []iSubnet{\n\t\t\t\tsubnet,\n\t\t\t},\n\t\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const albControllerVersion: eks.AlbControllerVersion;\ndeclare const endpointAccess: eks.EndpointAccess;\ndeclare const key: kms.Key;\ndeclare const kubernetesVersion: eks.KubernetesVersion;\ndeclare const layerVersion: lambda.LayerVersion;\ndeclare const policy: any;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const size: cdk.Size;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst clusterOptions: eks.ClusterOptions = {\n  version: kubernetesVersion,\n\n  // the properties below are optional\n  albController: {\n    version: albControllerVersion,\n\n    // the properties below are optional\n    policy: policy,\n    repository: 'repository',\n  },\n  clusterHandlerEnvironment: {\n    clusterHandlerEnvironmentKey: 'clusterHandlerEnvironment',\n  },\n  clusterHandlerSecurityGroup: securityGroup,\n  clusterName: 'clusterName',\n  coreDnsComputeType: eks.CoreDnsComputeType.EC2,\n  endpointAccess: endpointAccess,\n  kubectlEnvironment: {\n    kubectlEnvironmentKey: 'kubectlEnvironment',\n  },\n  kubectlLayer: layerVersion,\n  kubectlMemory: size,\n  mastersRole: role,\n  onEventLayer: layerVersion,\n  outputClusterName: false,\n  outputConfigCommand: false,\n  outputMastersRoleArn: false,\n  placeClusterHandlerInVpc: false,\n  prune: false,\n  role: role,\n  secretsEncryptionKey: key,\n  securityGroup: securityGroup,\n  serviceIpv4Cidr: 'serviceIpv4Cidr',\n  vpc: vpc,\n  vpcSubnets: [{\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.ClusterOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-eks.AlbControllerOptions",
        "@aws-cdk/aws-eks.AlbControllerVersion",
        "@aws-cdk/aws-eks.ClusterOptions",
        "@aws-cdk/aws-eks.CoreDnsComputeType",
        "@aws-cdk/aws-eks.CoreDnsComputeType#EC2",
        "@aws-cdk/aws-eks.EndpointAccess",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-lambda.ILayerVersion",
        "@aws-cdk/core.Size"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const albControllerVersion: eks.AlbControllerVersion;\ndeclare const endpointAccess: eks.EndpointAccess;\ndeclare const key: kms.Key;\ndeclare const kubernetesVersion: eks.KubernetesVersion;\ndeclare const layerVersion: lambda.LayerVersion;\ndeclare const policy: any;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const size: cdk.Size;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterOptions: eks.ClusterOptions = {\n  version: kubernetesVersion,\n\n  // the properties below are optional\n  albController: {\n    version: albControllerVersion,\n\n    // the properties below are optional\n    policy: policy,\n    repository: 'repository',\n  },\n  clusterHandlerEnvironment: {\n    clusterHandlerEnvironmentKey: 'clusterHandlerEnvironment',\n  },\n  clusterHandlerSecurityGroup: securityGroup,\n  clusterName: 'clusterName',\n  coreDnsComputeType: eks.CoreDnsComputeType.EC2,\n  endpointAccess: endpointAccess,\n  kubectlEnvironment: {\n    kubectlEnvironmentKey: 'kubectlEnvironment',\n  },\n  kubectlLayer: layerVersion,\n  kubectlMemory: size,\n  mastersRole: role,\n  onEventLayer: layerVersion,\n  outputClusterName: false,\n  outputConfigCommand: false,\n  outputMastersRoleArn: false,\n  placeClusterHandlerInVpc: false,\n  prune: false,\n  role: role,\n  secretsEncryptionKey: key,\n  securityGroup: securityGroup,\n  serviceIpv4Cidr: 'serviceIpv4Cidr',\n  vpc: vpc,\n  vpcSubnets: [{\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 14,
        "75": 99,
        "91": 6,
        "125": 1,
        "130": 12,
        "153": 12,
        "169": 12,
        "192": 4,
        "193": 5,
        "194": 4,
        "225": 13,
        "242": 13,
        "243": 13,
        "254": 6,
        "255": 6,
        "256": 6,
        "281": 35,
        "290": 1
      },
      "fqnsFingerprint": "ec03a83efa481eb60d3acd9f792cf14812ee2039518662c73adb6eec24230cd1"
    },
    "21c7435b29a4c6e5c89c9f02b7cfc804bfcc7edf7be06a3c20a14bd94d1eee39": {
      "translations": {
        "python": {
          "source": "layer = lambda_.LayerVersion(self, \"kubectl-layer\",\n    code=lambda_.Code.from_asset(f\"{__dirname}/layer.zip\"),\n    compatible_runtimes=[lambda_.Runtime.PROVIDED]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LayerVersion layer = new LayerVersion(this, \"kubectl-layer\", new LayerVersionProps {\n    Code = Code.FromAsset($\"{__dirname}/layer.zip\"),\n    CompatibleRuntimes = new [] { Runtime.PROVIDED }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion layer = LayerVersion.Builder.create(this, \"kubectl-layer\")\n        .code(Code.fromAsset(String.format(\"%s/layer.zip\", __dirname)))\n        .compatibleRuntimes(List.of(Runtime.PROVIDED))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "layer := lambda.NewLayerVersion(this, jsii.String(\"kubectl-layer\"), &layerVersionProps{\n\tcode: lambda.code.fromAsset(fmt.Sprintf(\"%v/layer.zip\", __dirname)),\n\tcompatibleRuntimes: []runtime{\n\t\tlambda.*runtime_PROVIDED(),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const layer = new lambda.LayerVersion(this, 'kubectl-layer', {\n   code: lambda.Code.fromAsset(`${__dirname}/layer.zip`),\n   compatibleRuntimes: [lambda.Runtime.PROVIDED],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-eks.ClusterOptions",
          "memberName": "kubectlLayer"
        },
        "field": {
          "field": "markdown",
          "line": 10
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PROVIDED",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst layer = new lambda.LayerVersion(this, 'kubectl-layer', {\n   code: lambda.Code.fromAsset(`${__dirname}/layer.zip`),\n   compatibleRuntimes: [lambda.Runtime.PROVIDED],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "15": 1,
        "17": 1,
        "75": 12,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "20d5cfed889ce4c97388e08901d531b17a251749fe423067ca6227420645b72c"
    },
    "1cb9ea9d8a2546b29c6605a56f003c60f98b10d2041fc6fcf183f859a7fdc9cf": {
      "translations": {
        "python": {
          "source": "layer = lambda_.LayerVersion(self, \"proxy-agent-layer\",\n    code=lambda_.Code.from_asset(f\"{__dirname}/layer.zip\"),\n    compatible_runtimes=[lambda_.Runtime.NODEJS_12_X]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LayerVersion layer = new LayerVersion(this, \"proxy-agent-layer\", new LayerVersionProps {\n    Code = Code.FromAsset($\"{__dirname}/layer.zip\"),\n    CompatibleRuntimes = new [] { Runtime.NODEJS_12_X }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion layer = LayerVersion.Builder.create(this, \"proxy-agent-layer\")\n        .code(Code.fromAsset(String.format(\"%s/layer.zip\", __dirname)))\n        .compatibleRuntimes(List.of(Runtime.NODEJS_12_X))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "layer := lambda.NewLayerVersion(this, jsii.String(\"proxy-agent-layer\"), &layerVersionProps{\n\tcode: lambda.code.fromAsset(fmt.Sprintf(\"%v/layer.zip\", __dirname)),\n\tcompatibleRuntimes: []runtime{\n\t\tlambda.*runtime_NODEJS_12_X(),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const layer = new lambda.LayerVersion(this, 'proxy-agent-layer', {\n   code: lambda.Code.fromAsset(`${__dirname}/layer.zip`),\n   compatibleRuntimes: [lambda.Runtime.NODEJS_12_X],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-eks.ClusterOptions",
          "memberName": "onEventLayer"
        },
        "field": {
          "field": "markdown",
          "line": 10
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst layer = new lambda.LayerVersion(this, 'proxy-agent-layer', {\n   code: lambda.Code.fromAsset(`${__dirname}/layer.zip`),\n   compatibleRuntimes: [lambda.Runtime.NODEJS_12_X],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "15": 1,
        "17": 1,
        "75": 12,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "b80abf62a39eb5721375a86304b04f8b463602599db8d7c12300ab1f2c3d8134"
    },
    "53ce64a81bcd403d5378a4c2a02cae7fd21208daf4d88385cce67ba099385696": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\neks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    vpc=vpc,\n    vpc_subnets=[ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    Vpc = vpc,\n    VpcSubnets = new [] { new SubnetSelection { SubnetType = SubnetType.PRIVATE } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .vpc(vpc)\n        .vpcSubnets(List.of(SubnetSelection.builder().subnetType(SubnetType.PRIVATE).build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\neks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tvpc: vpc,\n\tvpcSubnets: []subnetSelection{\n\t\t&subnetSelection{\n\t\t\tsubnetType: ec2.subnetType_PRIVATE,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  vpc,\n  vpcSubnets: [{ subnetType: ec2.SubnetType.PRIVATE }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.ClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  vpc,\n  vpcSubnets: [{ subnetType: ec2.SubnetType.PRIVATE }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "40540957c50341d14d51d2ea487874bd226cd103c97d991f1468ad9a98ec6621"
    },
    "98f58a6a22ef1328bb53241d48d9090a6468cefaddb9c1ec2fc0faa222eb2b4d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_eks as eks\nimport aws_cdk.aws_iam as iam\n\n# kubernetes_version: eks.KubernetesVersion\n# role: iam.Role\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\ncommon_cluster_options = eks.CommonClusterOptions(\n    version=kubernetes_version,\n\n    # the properties below are optional\n    cluster_name=\"clusterName\",\n    output_cluster_name=False,\n    output_config_command=False,\n    role=role,\n    security_group=security_group,\n    vpc=vpc,\n    vpc_subnets=[ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EKS;\nusing Amazon.CDK.AWS.IAM;\n\nKubernetesVersion kubernetesVersion;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nCommonClusterOptions commonClusterOptions = new CommonClusterOptions {\n    Version = kubernetesVersion,\n\n    // the properties below are optional\n    ClusterName = \"clusterName\",\n    OutputClusterName = false,\n    OutputConfigCommand = false,\n    Role = role,\n    SecurityGroup = securityGroup,\n    Vpc = vpc,\n    VpcSubnets = new [] { new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.eks.*;\nimport software.amazon.awscdk.services.iam.*;\n\nKubernetesVersion kubernetesVersion;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nCommonClusterOptions commonClusterOptions = CommonClusterOptions.builder()\n        .version(kubernetesVersion)\n\n        // the properties below are optional\n        .clusterName(\"clusterName\")\n        .outputClusterName(false)\n        .outputConfigCommand(false)\n        .role(role)\n        .securityGroup(securityGroup)\n        .vpc(vpc)\n        .vpcSubnets(List.of(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import eks \"github.com/aws-samples/dummy/awscdkawseks\"import iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar kubernetesVersion kubernetesVersion\nvar role role\nvar securityGroup securityGroup\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar vpc vpc\ncommonClusterOptions := &commonClusterOptions{\n\tversion: kubernetesVersion,\n\n\t// the properties below are optional\n\tclusterName: jsii.String(\"clusterName\"),\n\toutputClusterName: jsii.Boolean(false),\n\toutputConfigCommand: jsii.Boolean(false),\n\trole: role,\n\tsecurityGroup: securityGroup,\n\tvpc: vpc,\n\tvpcSubnets: []subnetSelection{\n\t\t&subnetSelection{\n\t\t\tavailabilityZones: []*string{\n\t\t\t\tjsii.String(\"availabilityZones\"),\n\t\t\t},\n\t\t\tonePerAz: jsii.Boolean(false),\n\t\t\tsubnetFilters: []*subnetFilter{\n\t\t\t\tsubnetFilter,\n\t\t\t},\n\t\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\t\tsubnets: []iSubnet{\n\t\t\t\tsubnet,\n\t\t\t},\n\t\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const kubernetesVersion: eks.KubernetesVersion;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst commonClusterOptions: eks.CommonClusterOptions = {\n  version: kubernetesVersion,\n\n  // the properties below are optional\n  clusterName: 'clusterName',\n  outputClusterName: false,\n  outputConfigCommand: false,\n  role: role,\n  securityGroup: securityGroup,\n  vpc: vpc,\n  vpcSubnets: [{\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.CommonClusterOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-eks.CommonClusterOptions",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const kubernetesVersion: eks.KubernetesVersion;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst commonClusterOptions: eks.CommonClusterOptions = {\n  version: kubernetesVersion,\n\n  // the properties below are optional\n  clusterName: 'clusterName',\n  outputClusterName: false,\n  outputConfigCommand: false,\n  role: role,\n  securityGroup: securityGroup,\n  vpc: vpc,\n  vpcSubnets: [{\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 48,
        "91": 3,
        "130": 6,
        "153": 7,
        "169": 7,
        "192": 4,
        "193": 2,
        "194": 2,
        "225": 7,
        "242": 7,
        "243": 7,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "45f8ae9534132d346e83b0896b20dbfe01bb4f9519a6f69208a34865e348f97f"
    },
    "0590861da4ba5533c08652fcce64b1c759cdccd8dc8a404499061e6f57a7dc54": {
      "translations": {
        "python": {
          "source": "cluster = eks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    default_capacity_type=eks.DefaultCapacityType.EC2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster = new Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    DefaultCapacityType = DefaultCapacityType.EC2\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster = Cluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .defaultCapacityType(DefaultCapacityType.EC2)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tdefaultCapacityType: eks.defaultCapacityType_EC2,\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacityType: eks.DefaultCapacityType.EC2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.DefaultCapacityType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.DefaultCapacityType",
        "@aws-cdk/aws-eks.DefaultCapacityType#EC2",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacityType: eks.DefaultCapacityType.EC2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "1436e7d7e3bdc21e19bc93e04326f5be1da529b11e30056302fb16dde20ac54a"
    },
    "6e4a113d05c25485c09f4ea9ab577528c693368d1b331b29c873170122507e0e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\neks_optimized_image = eks.EksOptimizedImage(\n    cpu_arch=eks.CpuArch.ARM_64,\n    kubernetes_version=\"kubernetesVersion\",\n    node_type=eks.NodeType.STANDARD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nEksOptimizedImage eksOptimizedImage = new EksOptimizedImage(new EksOptimizedImageProps {\n    CpuArch = CpuArch.ARM_64,\n    KubernetesVersion = \"kubernetesVersion\",\n    NodeType = NodeType.STANDARD\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nEksOptimizedImage eksOptimizedImage = EksOptimizedImage.Builder.create()\n        .cpuArch(CpuArch.ARM_64)\n        .kubernetesVersion(\"kubernetesVersion\")\n        .nodeType(NodeType.STANDARD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\neksOptimizedImage := eks.NewEksOptimizedImage(&eksOptimizedImageProps{\n\tcpuArch: eks.cpuArch_ARM_64,\n\tkubernetesVersion: jsii.String(\"kubernetesVersion\"),\n\tnodeType: eks.nodeType_STANDARD,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst eksOptimizedImage = new eks.EksOptimizedImage(/* all optional props */ {\n  cpuArch: eks.CpuArch.ARM_64,\n  kubernetesVersion: 'kubernetesVersion',\n  nodeType: eks.NodeType.STANDARD,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.EksOptimizedImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CpuArch",
        "@aws-cdk/aws-eks.CpuArch#ARM_64",
        "@aws-cdk/aws-eks.EksOptimizedImage",
        "@aws-cdk/aws-eks.EksOptimizedImageProps",
        "@aws-cdk/aws-eks.NodeType",
        "@aws-cdk/aws-eks.NodeType#STANDARD"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eksOptimizedImage = new eks.EksOptimizedImage(/* all optional props */ {\n  cpuArch: eks.CpuArch.ARM_64,\n  kubernetesVersion: 'kubernetesVersion',\n  nodeType: eks.NodeType.STANDARD,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "cdf0e933552fba9fc8ea83d3382b75582947b5f6dd723b9c6ff90990f04ba144"
    },
    "9c1c120d6e38170b07bc9216fc3d91ffe657ed8ab9367f8f019a40a7598e14d4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\neks_optimized_image_props = eks.EksOptimizedImageProps(\n    cpu_arch=eks.CpuArch.ARM_64,\n    kubernetes_version=\"kubernetesVersion\",\n    node_type=eks.NodeType.STANDARD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nEksOptimizedImageProps eksOptimizedImageProps = new EksOptimizedImageProps {\n    CpuArch = CpuArch.ARM_64,\n    KubernetesVersion = \"kubernetesVersion\",\n    NodeType = NodeType.STANDARD\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nEksOptimizedImageProps eksOptimizedImageProps = EksOptimizedImageProps.builder()\n        .cpuArch(CpuArch.ARM_64)\n        .kubernetesVersion(\"kubernetesVersion\")\n        .nodeType(NodeType.STANDARD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\neksOptimizedImageProps := &eksOptimizedImageProps{\n\tcpuArch: eks.cpuArch_ARM_64,\n\tkubernetesVersion: jsii.String(\"kubernetesVersion\"),\n\tnodeType: eks.nodeType_STANDARD,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst eksOptimizedImageProps: eks.EksOptimizedImageProps = {\n  cpuArch: eks.CpuArch.ARM_64,\n  kubernetesVersion: 'kubernetesVersion',\n  nodeType: eks.NodeType.STANDARD,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.EksOptimizedImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.CpuArch",
        "@aws-cdk/aws-eks.CpuArch#ARM_64",
        "@aws-cdk/aws-eks.EksOptimizedImageProps",
        "@aws-cdk/aws-eks.NodeType",
        "@aws-cdk/aws-eks.NodeType#STANDARD"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eksOptimizedImageProps: eks.EksOptimizedImageProps = {\n  cpuArch: eks.CpuArch.ARM_64,\n  kubernetesVersion: 'kubernetesVersion',\n  nodeType: eks.NodeType.STANDARD,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1ed2fa865dcbeb22a0d4d8d7ba23900c9a2523d92da25dd389f39d522af0006f"
    },
    "3a6f1b5bcef1982857a4c7aaa3a76ee85a57919305e6f53b891123e98a4c79fd": {
      "translations": {
        "python": {
          "source": "cluster = eks.Cluster(self, \"hello-eks\",\n    version=eks.KubernetesVersion.V1_22,\n    endpoint_access=eks.EndpointAccess.PRIVATE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster = new Cluster(this, \"hello-eks\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    EndpointAccess = EndpointAccess.PRIVATE\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster = Cluster.Builder.create(this, \"hello-eks\")\n        .version(KubernetesVersion.V1_22)\n        .endpointAccess(EndpointAccess.PRIVATE)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewCluster(this, jsii.String(\"hello-eks\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tendpointAccess: eks.endpointAccess_PRIVATE(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_22,\n  endpointAccess: eks.EndpointAccess.PRIVATE, // No access outside of your VPC.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.EndpointAccess"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.EndpointAccess",
        "@aws-cdk/aws-eks.EndpointAccess#PRIVATE",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.Cluster(this, 'hello-eks', {\n  version: eks.KubernetesVersion.V1_22,\n  endpointAccess: eks.EndpointAccess.PRIVATE, // No access outside of your VPC.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "87dd5002bd3e959d7482bd9e103423def40578932de99e22eec6af0b3bbc8600"
    },
    "0240aa6e9567608adee7cee105bc1df87f66a5519346b991d3e20f4125f99503": {
      "translations": {
        "python": {
          "source": "cluster = eks.FargateCluster(self, \"MyCluster\",\n    version=eks.KubernetesVersion.V1_22\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FargateCluster cluster = new FargateCluster(this, \"MyCluster\", new FargateClusterProps {\n    Version = KubernetesVersion.V1_22\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateCluster cluster = FargateCluster.Builder.create(this, \"MyCluster\")\n        .version(KubernetesVersion.V1_22)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewFargateCluster(this, jsii.String(\"MyCluster\"), &fargateClusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.FargateCluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_22,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.FargateCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.FargateCluster",
        "@aws-cdk/aws-eks.FargateClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.FargateCluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_22,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "90d6918dfe2ed9b305abeace189184e99fab285228dc7cb7defb48a7141afdc4"
    },
    "f65409d2d8b8e31d116dadb3adec708f431caf36e46a6f38b3a918d86930b86c": {
      "translations": {
        "python": {
          "source": "cluster = eks.FargateCluster(self, \"MyCluster\",\n    version=eks.KubernetesVersion.V1_22\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FargateCluster cluster = new FargateCluster(this, \"MyCluster\", new FargateClusterProps {\n    Version = KubernetesVersion.V1_22\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateCluster cluster = FargateCluster.Builder.create(this, \"MyCluster\")\n        .version(KubernetesVersion.V1_22)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewFargateCluster(this, jsii.String(\"MyCluster\"), &fargateClusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.FargateCluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_22,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.FargateClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.FargateCluster",
        "@aws-cdk/aws-eks.FargateClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.FargateCluster(this, 'MyCluster', {\n  version: eks.KubernetesVersion.V1_22,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "90d6918dfe2ed9b305abeace189184e99fab285228dc7cb7defb48a7141afdc4"
    },
    "71661823c761ef76ec39945191fc98d0bf8ffe9b6e7131511df4120e467bbea4": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\neks.FargateProfile(self, \"MyProfile\",\n    cluster=cluster,\n    selectors=[eks.Selector(namespace=\"default\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nnew FargateProfile(this, \"MyProfile\", new FargateProfileProps {\n    Cluster = cluster,\n    Selectors = new [] { new Selector { Namespace = \"default\" } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nFargateProfile.Builder.create(this, \"MyProfile\")\n        .cluster(cluster)\n        .selectors(List.of(Selector.builder().namespace(\"default\").build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\neks.NewFargateProfile(this, jsii.String(\"MyProfile\"), &fargateProfileProps{\n\tcluster: cluster,\n\tselectors: []selector{\n\t\t&selector{\n\t\t\tnamespace: jsii.String(\"default\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nnew eks.FargateProfile(this, 'MyProfile', {\n  cluster,\n  selectors: [ { namespace: 'default' } ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.FargateProfile"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.FargateProfile",
        "@aws-cdk/aws-eks.FargateProfileProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew eks.FargateProfile(this, 'MyProfile', {\n  cluster,\n  selectors: [ { namespace: 'default' } ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "85dea1664cb49c1686d4813b48e05340ee74cb8695c3d6e7f8cb9d6ab5c5336f"
    },
    "4cdd4a749e1b9e7acc53506911521bfd3193aa31f6af4b482153f40d6cc9eda8": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_fargate_profile(\"MyProfile\",\n    selectors=[eks.Selector(namespace=\"default\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddFargateProfile(\"MyProfile\", new FargateProfileOptions {\n    Selectors = new [] { new Selector { Namespace = \"default\" } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addFargateProfile(\"MyProfile\", FargateProfileOptions.builder()\n        .selectors(List.of(Selector.builder().namespace(\"default\").build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addFargateProfile(jsii.String(\"MyProfile\"), &fargateProfileOptions{\n\tselectors: []selector{\n\t\t&selector{\n\t\t\tnamespace: jsii.String(\"default\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addFargateProfile('MyProfile', {\n  selectors: [ { namespace: 'default' } ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.FargateProfileOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster#addFargateProfile",
        "@aws-cdk/aws-eks.FargateProfileOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addFargateProfile('MyProfile', {\n  selectors: [ { namespace: 'default' } ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "045b274a688c59179e89ec77bd19a600e392ac88ed0fb8c8e94a14cba5d71ba6"
    },
    "0733c2f78a8c179019cf6a7ddc7bcf87f0267cc4928e6c97388179af7f3d5773": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\neks.FargateProfile(self, \"MyProfile\",\n    cluster=cluster,\n    selectors=[eks.Selector(namespace=\"default\")]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nnew FargateProfile(this, \"MyProfile\", new FargateProfileProps {\n    Cluster = cluster,\n    Selectors = new [] { new Selector { Namespace = \"default\" } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nFargateProfile.Builder.create(this, \"MyProfile\")\n        .cluster(cluster)\n        .selectors(List.of(Selector.builder().namespace(\"default\").build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\neks.NewFargateProfile(this, jsii.String(\"MyProfile\"), &fargateProfileProps{\n\tcluster: cluster,\n\tselectors: []selector{\n\t\t&selector{\n\t\t\tnamespace: jsii.String(\"default\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nnew eks.FargateProfile(this, 'MyProfile', {\n  cluster,\n  selectors: [ { namespace: 'default' } ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.FargateProfileProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.FargateProfile",
        "@aws-cdk/aws-eks.FargateProfileProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew eks.FargateProfile(this, 'MyProfile', {\n  cluster,\n  selectors: [ { namespace: 'default' } ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "85dea1664cb49c1686d4813b48e05340ee74cb8695c3d6e7f8cb9d6ab5c5336f"
    },
    "95717d9b6c6b0c60790a8542e30aaeeb58ee9a6e9f6bd514950692599790cf97": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# option 1: use a construct\neks.HelmChart(self, \"NginxIngress\",\n    cluster=cluster,\n    chart=\"nginx-ingress\",\n    repository=\"https://helm.nginx.com/stable\",\n    namespace=\"kube-system\"\n)\n\n# or, option2: use `addHelmChart`\ncluster.add_helm_chart(\"NginxIngress\",\n    chart=\"nginx-ingress\",\n    repository=\"https://helm.nginx.com/stable\",\n    namespace=\"kube-system\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// option 1: use a construct\n// option 1: use a construct\nnew HelmChart(this, \"NginxIngress\", new HelmChartProps {\n    Cluster = cluster,\n    Chart = \"nginx-ingress\",\n    Repository = \"https://helm.nginx.com/stable\",\n    Namespace = \"kube-system\"\n});\n\n// or, option2: use `addHelmChart`\ncluster.AddHelmChart(\"NginxIngress\", new HelmChartOptions {\n    Chart = \"nginx-ingress\",\n    Repository = \"https://helm.nginx.com/stable\",\n    Namespace = \"kube-system\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// option 1: use a construct\n// option 1: use a construct\nHelmChart.Builder.create(this, \"NginxIngress\")\n        .cluster(cluster)\n        .chart(\"nginx-ingress\")\n        .repository(\"https://helm.nginx.com/stable\")\n        .namespace(\"kube-system\")\n        .build();\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart(\"NginxIngress\", HelmChartOptions.builder()\n        .chart(\"nginx-ingress\")\n        .repository(\"https://helm.nginx.com/stable\")\n        .namespace(\"kube-system\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// option 1: use a construct\n// option 1: use a construct\neks.NewHelmChart(this, jsii.String(\"NginxIngress\"), &helmChartProps{\n\tcluster: cluster,\n\tchart: jsii.String(\"nginx-ingress\"),\n\trepository: jsii.String(\"https://helm.nginx.com/stable\"),\n\tnamespace: jsii.String(\"kube-system\"),\n})\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart(jsii.String(\"NginxIngress\"), &helmChartOptions{\n\tchart: jsii.String(\"nginx-ingress\"),\n\trepository: jsii.String(\"https://helm.nginx.com/stable\"),\n\tnamespace: jsii.String(\"kube-system\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// option 1: use a construct\nnew eks.HelmChart(this, 'NginxIngress', {\n  cluster,\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart('NginxIngress', {\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.HelmChart"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.HelmChart",
        "@aws-cdk/aws-eks.HelmChartOptions",
        "@aws-cdk/aws-eks.HelmChartProps",
        "@aws-cdk/aws-eks.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// option 1: use a construct\nnew eks.HelmChart(this, 'NginxIngress', {\n  cluster,\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart('NginxIngress', {\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "38445a0871a444cba345bf9bf375ede385d9fe648e7e219fd87a5d1c1e3db808"
    },
    "982d30dc4dcee51e3bdc9eadae08f48991359888d5396ace923851fbc6e9d76a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3_assets as s3_assets\n\n# cluster: eks.Cluster\n\nchart_asset = s3_assets.Asset(self, \"ChartAsset\",\n    path=\"/path/to/asset\"\n)\n\ncluster.add_helm_chart(\"test-chart\",\n    chart_asset=chart_asset\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3.Assets;\n\nCluster cluster;\n\nAsset chartAsset = new Asset(this, \"ChartAsset\", new AssetProps {\n    Path = \"/path/to/asset\"\n});\n\ncluster.AddHelmChart(\"test-chart\", new HelmChartOptions {\n    ChartAsset = chartAsset\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.assets.*;\n\nCluster cluster;\n\nAsset chartAsset = Asset.Builder.create(this, \"ChartAsset\")\n        .path(\"/path/to/asset\")\n        .build();\n\ncluster.addHelmChart(\"test-chart\", HelmChartOptions.builder()\n        .chartAsset(chartAsset)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import s3Assets \"github.com/aws-samples/dummy/awscdkawss3assets\"\n\nvar cluster cluster\nchartAsset := s3Assets.NewAsset(this, jsii.String(\"ChartAsset\"), &assetProps{\n\tpath: jsii.String(\"/path/to/asset\"),\n})\n\ncluster.addHelmChart(jsii.String(\"test-chart\"), &helmChartOptions{\n\tchartAsset: chartAsset,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as s3Assets from '@aws-cdk/aws-s3-assets';\n\ndeclare const cluster: eks.Cluster;\nconst chartAsset = new s3Assets.Asset(this, 'ChartAsset', {\n  path: '/path/to/asset'\n});\n\ncluster.addHelmChart('test-chart', {\n  chartAsset: chartAsset,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.HelmChartOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.HelmChartOptions",
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3Assets from '@aws-cdk/aws-s3-assets';\n\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst chartAsset = new s3Assets.Asset(this, 'ChartAsset', {\n  path: '/path/to/asset'\n});\n\ncluster.addHelmChart('test-chart', {\n  chartAsset: chartAsset,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2f4f64945a6f7cb206330c3a6650018538c7c423545c4287f8359d5732109a54"
    },
    "616416b92f7140b9caef8a4d44c3bbc39f4fee7689b1e19da8dfeb9a5e5c1541": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# option 1: use a construct\neks.HelmChart(self, \"NginxIngress\",\n    cluster=cluster,\n    chart=\"nginx-ingress\",\n    repository=\"https://helm.nginx.com/stable\",\n    namespace=\"kube-system\"\n)\n\n# or, option2: use `addHelmChart`\ncluster.add_helm_chart(\"NginxIngress\",\n    chart=\"nginx-ingress\",\n    repository=\"https://helm.nginx.com/stable\",\n    namespace=\"kube-system\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// option 1: use a construct\n// option 1: use a construct\nnew HelmChart(this, \"NginxIngress\", new HelmChartProps {\n    Cluster = cluster,\n    Chart = \"nginx-ingress\",\n    Repository = \"https://helm.nginx.com/stable\",\n    Namespace = \"kube-system\"\n});\n\n// or, option2: use `addHelmChart`\ncluster.AddHelmChart(\"NginxIngress\", new HelmChartOptions {\n    Chart = \"nginx-ingress\",\n    Repository = \"https://helm.nginx.com/stable\",\n    Namespace = \"kube-system\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// option 1: use a construct\n// option 1: use a construct\nHelmChart.Builder.create(this, \"NginxIngress\")\n        .cluster(cluster)\n        .chart(\"nginx-ingress\")\n        .repository(\"https://helm.nginx.com/stable\")\n        .namespace(\"kube-system\")\n        .build();\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart(\"NginxIngress\", HelmChartOptions.builder()\n        .chart(\"nginx-ingress\")\n        .repository(\"https://helm.nginx.com/stable\")\n        .namespace(\"kube-system\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// option 1: use a construct\n// option 1: use a construct\neks.NewHelmChart(this, jsii.String(\"NginxIngress\"), &helmChartProps{\n\tcluster: cluster,\n\tchart: jsii.String(\"nginx-ingress\"),\n\trepository: jsii.String(\"https://helm.nginx.com/stable\"),\n\tnamespace: jsii.String(\"kube-system\"),\n})\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart(jsii.String(\"NginxIngress\"), &helmChartOptions{\n\tchart: jsii.String(\"nginx-ingress\"),\n\trepository: jsii.String(\"https://helm.nginx.com/stable\"),\n\tnamespace: jsii.String(\"kube-system\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// option 1: use a construct\nnew eks.HelmChart(this, 'NginxIngress', {\n  cluster,\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart('NginxIngress', {\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.HelmChartProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.HelmChart",
        "@aws-cdk/aws-eks.HelmChartOptions",
        "@aws-cdk/aws-eks.HelmChartProps",
        "@aws-cdk/aws-eks.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// option 1: use a construct\nnew eks.HelmChart(this, 'NginxIngress', {\n  cluster,\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});\n\n// or, option2: use `addHelmChart`\ncluster.addHelmChart('NginxIngress', {\n  chart: 'nginx-ingress',\n  repository: 'https://helm.nginx.com/stable',\n  namespace: 'kube-system',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "38445a0871a444cba345bf9bf375ede385d9fe648e7e219fd87a5d1c1e3db808"
    },
    "e6cc8a2c68bd3088841680c4c620c91ac5cc2852059e94daa74de707f3d2ffe2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\nimport aws_cdk.core as cdk\n\ningress_load_balancer_address_options = eks.IngressLoadBalancerAddressOptions(\n    namespace=\"namespace\",\n    timeout=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\nusing Amazon.CDK;\nIngressLoadBalancerAddressOptions ingressLoadBalancerAddressOptions = new IngressLoadBalancerAddressOptions {\n    Namespace = \"namespace\",\n    Timeout = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\nimport software.amazon.awscdk.core.*;\n\nIngressLoadBalancerAddressOptions ingressLoadBalancerAddressOptions = IngressLoadBalancerAddressOptions.builder()\n        .namespace(\"namespace\")\n        .timeout(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\ningressLoadBalancerAddressOptions := &ingressLoadBalancerAddressOptions{\n\tnamespace: jsii.String(\"namespace\"),\n\ttimeout: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as cdk from '@aws-cdk/core';\nconst ingressLoadBalancerAddressOptions: eks.IngressLoadBalancerAddressOptions = {\n  namespace: 'namespace',\n  timeout: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.IngressLoadBalancerAddressOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.IngressLoadBalancerAddressOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ingressLoadBalancerAddressOptions: eks.IngressLoadBalancerAddressOptions = {\n  namespace: 'namespace',\n  timeout: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ac3144a717e0758d79cbd804af81f12395dd8aa4c4a9288f7db9be043ad824b7"
    },
    "9b96db1a34c8b671836d2d1696de5d9113fd7f559aad77e9e45bd240b889bc90": {
      "translations": {
        "python": {
          "source": "handler_role = iam.Role.from_role_arn(self, \"HandlerRole\", \"arn:aws:iam::123456789012:role/lambda-role\")\nkubectl_provider = eks.KubectlProvider.from_kubectl_provider_attributes(self, \"KubectlProvider\",\n    function_arn=\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\",\n    kubectl_role_arn=\"arn:aws:iam::123456789012:role/kubectl-role\",\n    handler_role=handler_role\n)\n\ncluster = eks.Cluster.from_cluster_attributes(self, \"Cluster\",\n    cluster_name=\"cluster\",\n    kubectl_provider=kubectl_provider\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IRole handlerRole = Role.FromRoleArn(this, \"HandlerRole\", \"arn:aws:iam::123456789012:role/lambda-role\");\nIKubectlProvider kubectlProvider = KubectlProvider.FromKubectlProviderAttributes(this, \"KubectlProvider\", new KubectlProviderAttributes {\n    FunctionArn = \"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\",\n    KubectlRoleArn = \"arn:aws:iam::123456789012:role/kubectl-role\",\n    HandlerRole = handlerRole\n});\n\nICluster cluster = Cluster.FromClusterAttributes(this, \"Cluster\", new ClusterAttributes {\n    ClusterName = \"cluster\",\n    KubectlProvider = kubectlProvider\n});",
          "version": "1"
        },
        "java": {
          "source": "IRole handlerRole = Role.fromRoleArn(this, \"HandlerRole\", \"arn:aws:iam::123456789012:role/lambda-role\");\nIKubectlProvider kubectlProvider = KubectlProvider.fromKubectlProviderAttributes(this, \"KubectlProvider\", KubectlProviderAttributes.builder()\n        .functionArn(\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\")\n        .kubectlRoleArn(\"arn:aws:iam::123456789012:role/kubectl-role\")\n        .handlerRole(handlerRole)\n        .build());\n\nICluster cluster = Cluster.fromClusterAttributes(this, \"Cluster\", ClusterAttributes.builder()\n        .clusterName(\"cluster\")\n        .kubectlProvider(kubectlProvider)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "handlerRole := iam.role.fromRoleArn(this, jsii.String(\"HandlerRole\"), jsii.String(\"arn:aws:iam::123456789012:role/lambda-role\"))\nkubectlProvider := eks.kubectlProvider.fromKubectlProviderAttributes(this, jsii.String(\"KubectlProvider\"), &kubectlProviderAttributes{\n\tfunctionArn: jsii.String(\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\"),\n\tkubectlRoleArn: jsii.String(\"arn:aws:iam::123456789012:role/kubectl-role\"),\n\thandlerRole: handlerRole,\n})\n\ncluster := eks.cluster.fromClusterAttributes(this, jsii.String(\"Cluster\"), &clusterAttributes{\n\tclusterName: jsii.String(\"cluster\"),\n\tkubectlProvider: kubectlProvider,\n})",
          "version": "1"
        },
        "$": {
          "source": "const handlerRole = iam.Role.fromRoleArn(this, 'HandlerRole', 'arn:aws:iam::123456789012:role/lambda-role');\nconst kubectlProvider = eks.KubectlProvider.fromKubectlProviderAttributes(this, 'KubectlProvider', {\n  functionArn: 'arn:aws:lambda:us-east-2:123456789012:function:my-function:1',\n  kubectlRoleArn: 'arn:aws:iam::123456789012:role/kubectl-role',\n  handlerRole,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'Cluster', {\n  clusterName: 'cluster',\n  kubectlProvider,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.KubectlProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#fromClusterAttributes",
        "@aws-cdk/aws-eks.ClusterAttributes",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.IKubectlProvider",
        "@aws-cdk/aws-eks.KubectlProvider",
        "@aws-cdk/aws-eks.KubectlProvider#fromKubectlProviderAttributes",
        "@aws-cdk/aws-eks.KubectlProviderAttributes",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst handlerRole = iam.Role.fromRoleArn(this, 'HandlerRole', 'arn:aws:iam::123456789012:role/lambda-role');\nconst kubectlProvider = eks.KubectlProvider.fromKubectlProviderAttributes(this, 'KubectlProvider', {\n  functionArn: 'arn:aws:lambda:us-east-2:123456789012:function:my-function:1',\n  kubectlRoleArn: 'arn:aws:iam::123456789012:role/kubectl-role',\n  handlerRole,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'Cluster', {\n  clusterName: 'cluster',\n  kubectlProvider,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 17,
        "104": 3,
        "193": 2,
        "194": 6,
        "196": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 2
      },
      "fqnsFingerprint": "0d84391daba6ff4fffca9ee4649fb937a741a33232b1a47c09ad8948e97c2763"
    },
    "c3d024b07a4fb09db53c2e80f4ae60717444ba4442bce81e5f6370a7bc885830": {
      "translations": {
        "python": {
          "source": "handler_role = iam.Role.from_role_arn(self, \"HandlerRole\", \"arn:aws:iam::123456789012:role/lambda-role\")\nkubectl_provider = eks.KubectlProvider.from_kubectl_provider_attributes(self, \"KubectlProvider\",\n    function_arn=\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\",\n    kubectl_role_arn=\"arn:aws:iam::123456789012:role/kubectl-role\",\n    handler_role=handler_role\n)\n\ncluster = eks.Cluster.from_cluster_attributes(self, \"Cluster\",\n    cluster_name=\"cluster\",\n    kubectl_provider=kubectl_provider\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IRole handlerRole = Role.FromRoleArn(this, \"HandlerRole\", \"arn:aws:iam::123456789012:role/lambda-role\");\nIKubectlProvider kubectlProvider = KubectlProvider.FromKubectlProviderAttributes(this, \"KubectlProvider\", new KubectlProviderAttributes {\n    FunctionArn = \"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\",\n    KubectlRoleArn = \"arn:aws:iam::123456789012:role/kubectl-role\",\n    HandlerRole = handlerRole\n});\n\nICluster cluster = Cluster.FromClusterAttributes(this, \"Cluster\", new ClusterAttributes {\n    ClusterName = \"cluster\",\n    KubectlProvider = kubectlProvider\n});",
          "version": "1"
        },
        "java": {
          "source": "IRole handlerRole = Role.fromRoleArn(this, \"HandlerRole\", \"arn:aws:iam::123456789012:role/lambda-role\");\nIKubectlProvider kubectlProvider = KubectlProvider.fromKubectlProviderAttributes(this, \"KubectlProvider\", KubectlProviderAttributes.builder()\n        .functionArn(\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\")\n        .kubectlRoleArn(\"arn:aws:iam::123456789012:role/kubectl-role\")\n        .handlerRole(handlerRole)\n        .build());\n\nICluster cluster = Cluster.fromClusterAttributes(this, \"Cluster\", ClusterAttributes.builder()\n        .clusterName(\"cluster\")\n        .kubectlProvider(kubectlProvider)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "handlerRole := iam.role.fromRoleArn(this, jsii.String(\"HandlerRole\"), jsii.String(\"arn:aws:iam::123456789012:role/lambda-role\"))\nkubectlProvider := eks.kubectlProvider.fromKubectlProviderAttributes(this, jsii.String(\"KubectlProvider\"), &kubectlProviderAttributes{\n\tfunctionArn: jsii.String(\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\"),\n\tkubectlRoleArn: jsii.String(\"arn:aws:iam::123456789012:role/kubectl-role\"),\n\thandlerRole: handlerRole,\n})\n\ncluster := eks.cluster.fromClusterAttributes(this, jsii.String(\"Cluster\"), &clusterAttributes{\n\tclusterName: jsii.String(\"cluster\"),\n\tkubectlProvider: kubectlProvider,\n})",
          "version": "1"
        },
        "$": {
          "source": "const handlerRole = iam.Role.fromRoleArn(this, 'HandlerRole', 'arn:aws:iam::123456789012:role/lambda-role');\nconst kubectlProvider = eks.KubectlProvider.fromKubectlProviderAttributes(this, 'KubectlProvider', {\n  functionArn: 'arn:aws:lambda:us-east-2:123456789012:function:my-function:1',\n  kubectlRoleArn: 'arn:aws:iam::123456789012:role/kubectl-role',\n  handlerRole,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'Cluster', {\n  clusterName: 'cluster',\n  kubectlProvider,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.KubectlProviderAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#fromClusterAttributes",
        "@aws-cdk/aws-eks.ClusterAttributes",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.IKubectlProvider",
        "@aws-cdk/aws-eks.KubectlProvider",
        "@aws-cdk/aws-eks.KubectlProvider#fromKubectlProviderAttributes",
        "@aws-cdk/aws-eks.KubectlProviderAttributes",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst handlerRole = iam.Role.fromRoleArn(this, 'HandlerRole', 'arn:aws:iam::123456789012:role/lambda-role');\nconst kubectlProvider = eks.KubectlProvider.fromKubectlProviderAttributes(this, 'KubectlProvider', {\n  functionArn: 'arn:aws:lambda:us-east-2:123456789012:function:my-function:1',\n  kubectlRoleArn: 'arn:aws:iam::123456789012:role/kubectl-role',\n  handlerRole,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'Cluster', {\n  clusterName: 'cluster',\n  kubectlProvider,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 17,
        "104": 3,
        "193": 2,
        "194": 6,
        "196": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 2
      },
      "fqnsFingerprint": "0d84391daba6ff4fffca9ee4649fb937a741a33232b1a47c09ad8948e97c2763"
    },
    "beb4680e0e29937606d35dda42fe076fd6a34cc78bb56e67b5e1946cfa2056a8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\n# cluster: eks.Cluster\n\nkubectl_provider_props = eks.KubectlProviderProps(\n    cluster=cluster\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCluster cluster;\n\nKubectlProviderProps kubectlProviderProps = new KubectlProviderProps {\n    Cluster = cluster\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCluster cluster;\n\nKubectlProviderProps kubectlProviderProps = KubectlProviderProps.builder()\n        .cluster(cluster)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nvar cluster cluster\nkubectlProviderProps := &kubectlProviderProps{\n\tcluster: cluster,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const cluster: eks.Cluster;\nconst kubectlProviderProps: eks.KubectlProviderProps = {\n  cluster: cluster,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.KubectlProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubectlProviderProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst kubectlProviderProps: eks.KubectlProviderProps = {\n  cluster: cluster,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "61f536830c47472ea4512d97be825df63023c2f093cbede82f703521d4b6e7cd"
    },
    "cbe93a2c2c1a866ce1b5df140e01af726d9d61f923ea25532d00103d63f1f91c": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\nnamespace = cluster.add_manifest(\"my-namespace\", {\n    \"api_version\": \"v1\",\n    \"kind\": \"Namespace\",\n    \"metadata\": {\"name\": \"my-app\"}\n})\n\nservice = cluster.add_manifest(\"my-service\", {\n    \"metadata\": {\n        \"name\": \"myservice\",\n        \"namespace\": \"my-app\"\n    },\n    \"spec\": {}\n})\n\nservice.node.add_dependency(namespace)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nKubernetesManifest namespace = cluster.AddManifest(\"my-namespace\", new Dictionary<string, object> {\n    { \"apiVersion\", \"v1\" },\n    { \"kind\", \"Namespace\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"my-app\" } } }\n});\n\nKubernetesManifest service = cluster.AddManifest(\"my-service\", new Dictionary<string, object> {\n    { \"metadata\", new Dictionary<string, string> {\n        { \"name\", \"myservice\" },\n        { \"namespace\", \"my-app\" }\n    } },\n    { \"spec\", new Dictionary<string, object> { } }\n});\n\nservice.Node.AddDependency(namespace);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nKubernetesManifest namespace = cluster.addManifest(\"my-namespace\", Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"Namespace\",\n        \"metadata\", Map.of(\"name\", \"my-app\")));\n\nKubernetesManifest service = cluster.addManifest(\"my-service\", Map.of(\n        \"metadata\", Map.of(\n                \"name\", \"myservice\",\n                \"namespace\", \"my-app\"),\n        \"spec\", Map.of()));\n\nservice.node.addDependency(namespace);",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nnamespace := cluster.addManifest(jsii.String(\"my-namespace\"), map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"v1\"),\n\t\"kind\": jsii.String(\"Namespace\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"my-app\"),\n\t},\n})\n\nservice := cluster.addManifest(jsii.String(\"my-service\"), map[string]interface{}{\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"myservice\"),\n\t\t\"namespace\": jsii.String(\"my-app\"),\n\t},\n\t\"spec\": map[string]interface{}{\n\t},\n})\n\nservice.node.addDependency(namespace)",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst namespace = cluster.addManifest('my-namespace', {\n  apiVersion: 'v1',\n  kind: 'Namespace',\n  metadata: { name: 'my-app' },\n});\n\nconst service = cluster.addManifest('my-service', {\n  metadata: {\n    name: 'myservice',\n    namespace: 'my-app',\n  },\n  spec: { }, // ...\n});\n\nservice.node.addDependency(namespace); // will apply `my-namespace` before `my-service`.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.KubernetesManifest"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.KubernetesManifest",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst namespace = cluster.addManifest('my-namespace', {\n  apiVersion: 'v1',\n  kind: 'Namespace',\n  metadata: { name: 'my-app' },\n});\n\nconst service = cluster.addManifest('my-service', {\n  metadata: {\n    name: 'myservice',\n    namespace: 'my-app',\n  },\n  spec: { }, // ...\n});\n\nservice.node.addDependency(namespace);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 21,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 4,
        "196": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "8da0f443abb9ffc492ce86fba4e6ae828421a5eee4198c34e2218350e6f4621a"
    },
    "9275594bfa2dd59c3fc2deaf69dc9adf5292ed4a0c47d593bab3c5f447a6ace3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nkubernetes_manifest_options = eks.KubernetesManifestOptions(\n    ingress_alb=False,\n    ingress_alb_scheme=eks.AlbScheme.INTERNAL,\n    prune=False,\n    skip_validation=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nKubernetesManifestOptions kubernetesManifestOptions = new KubernetesManifestOptions {\n    IngressAlb = false,\n    IngressAlbScheme = AlbScheme.INTERNAL,\n    Prune = false,\n    SkipValidation = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nKubernetesManifestOptions kubernetesManifestOptions = KubernetesManifestOptions.builder()\n        .ingressAlb(false)\n        .ingressAlbScheme(AlbScheme.INTERNAL)\n        .prune(false)\n        .skipValidation(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nkubernetesManifestOptions := &kubernetesManifestOptions{\n\tingressAlb: jsii.Boolean(false),\n\tingressAlbScheme: eks.albScheme_INTERNAL,\n\tprune: jsii.Boolean(false),\n\tskipValidation: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst kubernetesManifestOptions: eks.KubernetesManifestOptions = {\n  ingressAlb: false,\n  ingressAlbScheme: eks.AlbScheme.INTERNAL,\n  prune: false,\n  skipValidation: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.KubernetesManifestOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.AlbScheme",
        "@aws-cdk/aws-eks.AlbScheme#INTERNAL",
        "@aws-cdk/aws-eks.KubernetesManifestOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst kubernetesManifestOptions: eks.KubernetesManifestOptions = {\n  ingressAlb: false,\n  ingressAlbScheme: eks.AlbScheme.INTERNAL,\n  prune: false,\n  skipValidation: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "91": 3,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "048dae525784aa66c8ef0e128abe9188564c9477d89cfcfa65f92ebbb414569b"
    },
    "1188f378aaecda24bd823fe7f8f8f5a04add02a37038446b6742e73e3f9b3498": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\napp_label = {\"app\": \"hello-kubernetes\"}\n\ndeployment = {\n    \"api_version\": \"apps/v1\",\n    \"kind\": \"Deployment\",\n    \"metadata\": {\"name\": \"hello-kubernetes\"},\n    \"spec\": {\n        \"replicas\": 3,\n        \"selector\": {\"match_labels\": app_label},\n        \"template\": {\n            \"metadata\": {\"labels\": app_label},\n            \"spec\": {\n                \"containers\": [{\n                    \"name\": \"hello-kubernetes\",\n                    \"image\": \"paulbouwer/hello-kubernetes:1.5\",\n                    \"ports\": [{\"container_port\": 8080}]\n                }\n                ]\n            }\n        }\n    }\n}\n\nservice = {\n    \"api_version\": \"v1\",\n    \"kind\": \"Service\",\n    \"metadata\": {\"name\": \"hello-kubernetes\"},\n    \"spec\": {\n        \"type\": \"LoadBalancer\",\n        \"ports\": [{\"port\": 80, \"target_port\": 8080}],\n        \"selector\": app_label\n    }\n}\n\n# option 1: use a construct\neks.KubernetesManifest(self, \"hello-kub\",\n    cluster=cluster,\n    manifest=[deployment, service]\n)\n\n# or, option2: use `addManifest`\ncluster.add_manifest(\"hello-kub\", service, deployment)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nIDictionary<string, string> appLabel = new Dictionary<string, string> { { \"app\", \"hello-kubernetes\" } };\n\nIDictionary<string, object> deployment = new Dictionary<string, object> {\n    { \"apiVersion\", \"apps/v1\" },\n    { \"kind\", \"Deployment\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"hello-kubernetes\" } } },\n    { \"spec\", new Dictionary<string, object> {\n        { \"replicas\", 3 },\n        { \"selector\", new Dictionary<string, IDictionary<string, string>> { { \"matchLabels\", appLabel } } },\n        { \"template\", new Dictionary<string, IDictionary<string, IDictionary<string, string>>> {\n            { \"metadata\", new Dictionary<string, IDictionary<string, string>> { { \"labels\", appLabel } } },\n            { \"spec\", new Dictionary<string, IDictionary<string, object>[]> {\n                { \"containers\", new [] { new Dictionary<string, object> {\n                    { \"name\", \"hello-kubernetes\" },\n                    { \"image\", \"paulbouwer/hello-kubernetes:1.5\" },\n                    { \"ports\", new [] { new Dictionary<string, int> { { \"containerPort\", 8080 } } } }\n                } } }\n            } }\n        } }\n    } }\n};\n\nIDictionary<string, object> service = new Dictionary<string, object> {\n    { \"apiVersion\", \"v1\" },\n    { \"kind\", \"Service\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"hello-kubernetes\" } } },\n    { \"spec\", new Dictionary<string, object> {\n        { \"type\", \"LoadBalancer\" },\n        { \"ports\", new [] { new Dictionary<string, int> { { \"port\", 80 }, { \"targetPort\", 8080 } } } },\n        { \"selector\", appLabel }\n    } }\n};\n\n// option 1: use a construct\n// option 1: use a construct\nnew KubernetesManifest(this, \"hello-kub\", new KubernetesManifestProps {\n    Cluster = cluster,\n    Manifest = new [] { deployment, service }\n});\n\n// or, option2: use `addManifest`\ncluster.AddManifest(\"hello-kub\", service, deployment);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nMap<String, String> appLabel = Map.of(\"app\", \"hello-kubernetes\");\n\nMap<String, Object> deployment = Map.of(\n        \"apiVersion\", \"apps/v1\",\n        \"kind\", \"Deployment\",\n        \"metadata\", Map.of(\"name\", \"hello-kubernetes\"),\n        \"spec\", Map.of(\n                \"replicas\", 3,\n                \"selector\", Map.of(\"matchLabels\", appLabel),\n                \"template\", Map.of(\n                        \"metadata\", Map.of(\"labels\", appLabel),\n                        \"spec\", Map.of(\n                                \"containers\", List.of(Map.of(\n                                        \"name\", \"hello-kubernetes\",\n                                        \"image\", \"paulbouwer/hello-kubernetes:1.5\",\n                                        \"ports\", List.of(Map.of(\"containerPort\", 8080))))))));\n\nMap<String, Object> service = Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"Service\",\n        \"metadata\", Map.of(\"name\", \"hello-kubernetes\"),\n        \"spec\", Map.of(\n                \"type\", \"LoadBalancer\",\n                \"ports\", List.of(Map.of(\"port\", 80, \"targetPort\", 8080)),\n                \"selector\", appLabel));\n\n// option 1: use a construct\n// option 1: use a construct\nKubernetesManifest.Builder.create(this, \"hello-kub\")\n        .cluster(cluster)\n        .manifest(List.of(deployment, service))\n        .build();\n\n// or, option2: use `addManifest`\ncluster.addManifest(\"hello-kub\", service, deployment);",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nappLabel := map[string]*string{\n\t\"app\": jsii.String(\"hello-kubernetes\"),\n}\n\ndeployment := map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"apps/v1\"),\n\t\"kind\": jsii.String(\"Deployment\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"hello-kubernetes\"),\n\t},\n\t\"spec\": map[string]interface{}{\n\t\t\"replicas\": jsii.Number(3),\n\t\t\"selector\": map[string]map[string]*string{\n\t\t\t\"matchLabels\": appLabel,\n\t\t},\n\t\t\"template\": map[string]map[string]map[string]*string{\n\t\t\t\"metadata\": map[string]map[string]*string{\n\t\t\t\t\"labels\": appLabel,\n\t\t\t},\n\t\t\t\"spec\": map[string][]map[string]interface{}{\n\t\t\t\t\"containers\": []map[string]interface{}{\n\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\"name\": jsii.String(\"hello-kubernetes\"),\n\t\t\t\t\t\t\"image\": jsii.String(\"paulbouwer/hello-kubernetes:1.5\"),\n\t\t\t\t\t\t\"ports\": []map[string]*f64{\n\t\t\t\t\t\t\tmap[string]*f64{\n\t\t\t\t\t\t\t\t\"containerPort\": jsii.Number(8080),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}\n\nservice := map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"v1\"),\n\t\"kind\": jsii.String(\"Service\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"hello-kubernetes\"),\n\t},\n\t\"spec\": map[string]interface{}{\n\t\t\"type\": jsii.String(\"LoadBalancer\"),\n\t\t\"ports\": []map[string]*f64{\n\t\t\tmap[string]*f64{\n\t\t\t\t\"port\": jsii.Number(80),\n\t\t\t\t\"targetPort\": jsii.Number(8080),\n\t\t\t},\n\t\t},\n\t\t\"selector\": appLabel,\n\t},\n}\n\n// option 1: use a construct\n// option 1: use a construct\neks.NewKubernetesManifest(this, jsii.String(\"hello-kub\"), &kubernetesManifestProps{\n\tcluster: cluster,\n\tmanifest: []map[string]interface{}{\n\t\tdeployment,\n\t\tservice,\n\t},\n})\n\n// or, option2: use `addManifest`\ncluster.addManifest(jsii.String(\"hello-kub\"), service, deployment)",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nconst appLabel = { app: \"hello-kubernetes\" };\n\nconst deployment = {\n  apiVersion: \"apps/v1\",\n  kind: \"Deployment\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    replicas: 3,\n    selector: { matchLabels: appLabel },\n    template: {\n      metadata: { labels: appLabel },\n      spec: {\n        containers: [\n          {\n            name: \"hello-kubernetes\",\n            image: \"paulbouwer/hello-kubernetes:1.5\",\n            ports: [ { containerPort: 8080 } ],\n          },\n        ],\n      },\n    },\n  },\n};\n\nconst service = {\n  apiVersion: \"v1\",\n  kind: \"Service\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    type: \"LoadBalancer\",\n    ports: [ { port: 80, targetPort: 8080 } ],\n    selector: appLabel,\n  }\n};\n\n// option 1: use a construct\nnew eks.KubernetesManifest(this, 'hello-kub', {\n  cluster,\n  manifest: [ deployment, service ],\n});\n\n// or, option2: use `addManifest`\ncluster.addManifest('hello-kub', service, deployment);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.KubernetesManifestProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesManifest",
        "@aws-cdk/aws-eks.KubernetesManifestProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst appLabel = { app: \"hello-kubernetes\" };\n\nconst deployment = {\n  apiVersion: \"apps/v1\",\n  kind: \"Deployment\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    replicas: 3,\n    selector: { matchLabels: appLabel },\n    template: {\n      metadata: { labels: appLabel },\n      spec: {\n        containers: [\n          {\n            name: \"hello-kubernetes\",\n            image: \"paulbouwer/hello-kubernetes:1.5\",\n            ports: [ { containerPort: 8080 } ],\n          },\n        ],\n      },\n    },\n  },\n};\n\nconst service = {\n  apiVersion: \"v1\",\n  kind: \"Service\",\n  metadata: { name: \"hello-kubernetes\" },\n  spec: {\n    type: \"LoadBalancer\",\n    ports: [ { port: 80, targetPort: 8080 } ],\n    selector: appLabel,\n  }\n};\n\n// option 1: use a construct\nnew eks.KubernetesManifest(this, 'hello-kub', {\n  cluster,\n  manifest: [ deployment, service ],\n});\n\n// or, option2: use `addManifest`\ncluster.addManifest('hello-kub', service, deployment);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 12,
        "75": 47,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 15,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 29,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fe4597de6c8e9d097e147b81b75d3c38f644f2f7e12264366f8282000c107a64"
    },
    "54a38c8233a9bb19ba3dbf37800fe87de5e6b12995fc0ab41ca3b813c9c171e9": {
      "translations": {
        "python": {
          "source": "[{\n    \"api_version\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\"name\": \"mypod\"},\n    \"spec\": {\n        \"containers\": [{\"name\": \"hello\", \"image\": \"paulbouwer/hello-kubernetes:1.5\", \"ports\": [{\"container_port\": 8080}]}]\n    }\n}]",
          "version": "2"
        },
        "csharp": {
          "source": "new [] { new Struct {\n    ApiVersion = \"v1\",\n    Kind = \"Pod\",\n    Metadata = new Struct { Name = \"mypod\" },\n    Spec = new Struct {\n        Containers = new [] { new Struct { Name = \"hello\", Image = \"paulbouwer/hello-kubernetes:1.5\", Ports = new [] { new Struct { ContainerPort = 8080 } } } }\n    }\n} };",
          "version": "1"
        },
        "java": {
          "source": "List.of(Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"Pod\",\n        \"metadata\", Map.of(\"name\", \"mypod\"),\n        \"spec\", Map.of(\n                \"containers\", List.of(Map.of(\"name\", \"hello\", \"image\", \"paulbouwer/hello-kubernetes:1.5\", \"ports\", List.of(Map.of(\"containerPort\", 8080)))))));",
          "version": "1"
        },
        "go": {
          "source": "[]map[string]interface{}{\n\tmap[string]interface{}{\n\t\t\"apiVersion\": jsii.String(\"v1\"),\n\t\t\"kind\": jsii.String(\"Pod\"),\n\t\t\"metadata\": map[string]*string{\n\t\t\t\"name\": jsii.String(\"mypod\"),\n\t\t},\n\t\t\"spec\": map[string][]map[string]interface{}{\n\t\t\t\"containers\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"name\": jsii.String(\"hello\"),\n\t\t\t\t\t\"image\": jsii.String(\"paulbouwer/hello-kubernetes:1.5\"),\n\t\t\t\t\t\"ports\": []map[string]*f64{\n\t\t\t\t\t\tmap[string]*f64{\n\t\t\t\t\t\t\t\"containerPort\": jsii.Number(8080),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "[{\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    containers: [ { name: 'hello', image: 'paulbouwer/hello-kubernetes:1.5', ports: [ { containerPort: 8080 } ] } ]\n  }\n}]",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-eks.KubernetesManifestProps",
          "memberName": "manifest"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n[{\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    containers: [ { name: 'hello', image: 'paulbouwer/hello-kubernetes:1.5', ports: [ { containerPort: 8080 } ] } ]\n  }\n}]\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 10,
        "192": 3,
        "193": 5,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "9381b0b544e7061ba01afd1212cc6e417eee1a22fd8f2f06ff2bd20a3091d61f": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# query the load balancer address\nmy_service_address = eks.KubernetesObjectValue(self, \"LoadBalancerAttribute\",\n    cluster=cluster,\n    object_type=\"service\",\n    object_name=\"my-service\",\n    json_path=\".status.loadBalancer.ingress[0].hostname\"\n)\n\n# pass the address to a lambda function\nproxy_function = lambda_.Function(self, \"ProxyFunction\",\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"my-code\"),\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    environment={\n        \"my_service_address\": my_service_address.value\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// query the load balancer address\nKubernetesObjectValue myServiceAddress = new KubernetesObjectValue(this, \"LoadBalancerAttribute\", new KubernetesObjectValueProps {\n    Cluster = cluster,\n    ObjectType = \"service\",\n    ObjectName = \"my-service\",\n    JsonPath = \".status.loadBalancer.ingress[0].hostname\"\n});\n\n// pass the address to a lambda function\nFunction proxyFunction = new Function(this, \"ProxyFunction\", new FunctionProps {\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"my-code\"),\n    Runtime = Runtime.NODEJS_14_X,\n    Environment = new Dictionary<string, string> {\n        { \"myServiceAddress\", myServiceAddress.Value }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// query the load balancer address\nKubernetesObjectValue myServiceAddress = KubernetesObjectValue.Builder.create(this, \"LoadBalancerAttribute\")\n        .cluster(cluster)\n        .objectType(\"service\")\n        .objectName(\"my-service\")\n        .jsonPath(\".status.loadBalancer.ingress[0].hostname\")\n        .build();\n\n// pass the address to a lambda function\nFunction proxyFunction = Function.Builder.create(this, \"ProxyFunction\")\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"my-code\"))\n        .runtime(Runtime.NODEJS_14_X)\n        .environment(Map.of(\n                \"myServiceAddress\", myServiceAddress.getValue()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// query the load balancer address\nmyServiceAddress := eks.NewKubernetesObjectValue(this, jsii.String(\"LoadBalancerAttribute\"), &kubernetesObjectValueProps{\n\tcluster: cluster,\n\tobjectType: jsii.String(\"service\"),\n\tobjectName: jsii.String(\"my-service\"),\n\tjsonPath: jsii.String(\".status.loadBalancer.ingress[0].hostname\"),\n})\n\n// pass the address to a lambda function\nproxyFunction := lambda.NewFunction(this, jsii.String(\"ProxyFunction\"), &functionProps{\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromInline(jsii.String(\"my-code\")),\n\truntime: lambda.runtime_NODEJS_14_X(),\n\tenvironment: map[string]*string{\n\t\t\"myServiceAddress\": myServiceAddress.value,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// query the load balancer address\nconst myServiceAddress = new eks.KubernetesObjectValue(this, 'LoadBalancerAttribute', {\n  cluster: cluster,\n  objectType: 'service',\n  objectName: 'my-service',\n  jsonPath: '.status.loadBalancer.ingress[0].hostname', // https://kubernetes.io/docs/reference/kubectl/jsonpath/\n});\n\n// pass the address to a lambda function\nconst proxyFunction = new lambda.Function(this, 'ProxyFunction', {\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('my-code'),\n  runtime: lambda.Runtime.NODEJS_14_X,\n  environment: {\n    myServiceAddress: myServiceAddress.value,\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.KubernetesObjectValue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesObjectValue",
        "@aws-cdk/aws-eks.KubernetesObjectValueProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// query the load balancer address\nconst myServiceAddress = new eks.KubernetesObjectValue(this, 'LoadBalancerAttribute', {\n  cluster: cluster,\n  objectType: 'service',\n  objectName: 'my-service',\n  jsonPath: '.status.loadBalancer.ingress[0].hostname', // https://kubernetes.io/docs/reference/kubectl/jsonpath/\n});\n\n// pass the address to a lambda function\nconst proxyFunction = new lambda.Function(this, 'ProxyFunction', {\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('my-code'),\n  runtime: lambda.Runtime.NODEJS_14_X,\n  environment: {\n    myServiceAddress: myServiceAddress.value,\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "fbf5e2473713c3f4c8bb0106f4984cd43cac34a54417e1314b9062188b9c1f37"
    },
    "3e6b9454d3661151ad2712df09ce205677aeeda1b5966b7f2526edf00cd1b2bd": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# query the load balancer address\nmy_service_address = eks.KubernetesObjectValue(self, \"LoadBalancerAttribute\",\n    cluster=cluster,\n    object_type=\"service\",\n    object_name=\"my-service\",\n    json_path=\".status.loadBalancer.ingress[0].hostname\"\n)\n\n# pass the address to a lambda function\nproxy_function = lambda_.Function(self, \"ProxyFunction\",\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"my-code\"),\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    environment={\n        \"my_service_address\": my_service_address.value\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// query the load balancer address\nKubernetesObjectValue myServiceAddress = new KubernetesObjectValue(this, \"LoadBalancerAttribute\", new KubernetesObjectValueProps {\n    Cluster = cluster,\n    ObjectType = \"service\",\n    ObjectName = \"my-service\",\n    JsonPath = \".status.loadBalancer.ingress[0].hostname\"\n});\n\n// pass the address to a lambda function\nFunction proxyFunction = new Function(this, \"ProxyFunction\", new FunctionProps {\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"my-code\"),\n    Runtime = Runtime.NODEJS_14_X,\n    Environment = new Dictionary<string, string> {\n        { \"myServiceAddress\", myServiceAddress.Value }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// query the load balancer address\nKubernetesObjectValue myServiceAddress = KubernetesObjectValue.Builder.create(this, \"LoadBalancerAttribute\")\n        .cluster(cluster)\n        .objectType(\"service\")\n        .objectName(\"my-service\")\n        .jsonPath(\".status.loadBalancer.ingress[0].hostname\")\n        .build();\n\n// pass the address to a lambda function\nFunction proxyFunction = Function.Builder.create(this, \"ProxyFunction\")\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"my-code\"))\n        .runtime(Runtime.NODEJS_14_X)\n        .environment(Map.of(\n                \"myServiceAddress\", myServiceAddress.getValue()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// query the load balancer address\nmyServiceAddress := eks.NewKubernetesObjectValue(this, jsii.String(\"LoadBalancerAttribute\"), &kubernetesObjectValueProps{\n\tcluster: cluster,\n\tobjectType: jsii.String(\"service\"),\n\tobjectName: jsii.String(\"my-service\"),\n\tjsonPath: jsii.String(\".status.loadBalancer.ingress[0].hostname\"),\n})\n\n// pass the address to a lambda function\nproxyFunction := lambda.NewFunction(this, jsii.String(\"ProxyFunction\"), &functionProps{\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromInline(jsii.String(\"my-code\")),\n\truntime: lambda.runtime_NODEJS_14_X(),\n\tenvironment: map[string]*string{\n\t\t\"myServiceAddress\": myServiceAddress.value,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// query the load balancer address\nconst myServiceAddress = new eks.KubernetesObjectValue(this, 'LoadBalancerAttribute', {\n  cluster: cluster,\n  objectType: 'service',\n  objectName: 'my-service',\n  jsonPath: '.status.loadBalancer.ingress[0].hostname', // https://kubernetes.io/docs/reference/kubectl/jsonpath/\n});\n\n// pass the address to a lambda function\nconst proxyFunction = new lambda.Function(this, 'ProxyFunction', {\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('my-code'),\n  runtime: lambda.Runtime.NODEJS_14_X,\n  environment: {\n    myServiceAddress: myServiceAddress.value,\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.KubernetesObjectValueProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesObjectValue",
        "@aws-cdk/aws-eks.KubernetesObjectValueProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// query the load balancer address\nconst myServiceAddress = new eks.KubernetesObjectValue(this, 'LoadBalancerAttribute', {\n  cluster: cluster,\n  objectType: 'service',\n  objectName: 'my-service',\n  jsonPath: '.status.loadBalancer.ingress[0].hostname', // https://kubernetes.io/docs/reference/kubectl/jsonpath/\n});\n\n// pass the address to a lambda function\nconst proxyFunction = new lambda.Function(this, 'ProxyFunction', {\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('my-code'),\n  runtime: lambda.Runtime.NODEJS_14_X,\n  environment: {\n    myServiceAddress: myServiceAddress.value,\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "fbf5e2473713c3f4c8bb0106f4984cd43cac34a54417e1314b9062188b9c1f37"
    },
    "959f65aaa5eb6e19b99316df3ac16ce37d5e6e1a05f972c470d3f068e3ef7b7f": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\neks.KubernetesPatch(self, \"hello-kub-deployment-label\",\n    cluster=cluster,\n    resource_name=\"deployment/hello-kubernetes\",\n    apply_patch={\"spec\": {\"replicas\": 5}},\n    restore_patch={\"spec\": {\"replicas\": 3}}\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nnew KubernetesPatch(this, \"hello-kub-deployment-label\", new KubernetesPatchProps {\n    Cluster = cluster,\n    ResourceName = \"deployment/hello-kubernetes\",\n    ApplyPatch = new Dictionary<string, object> { { \"spec\", new Dictionary<string, int> { { \"replicas\", 5 } } } },\n    RestorePatch = new Dictionary<string, object> { { \"spec\", new Dictionary<string, int> { { \"replicas\", 3 } } } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nKubernetesPatch.Builder.create(this, \"hello-kub-deployment-label\")\n        .cluster(cluster)\n        .resourceName(\"deployment/hello-kubernetes\")\n        .applyPatch(Map.of(\"spec\", Map.of(\"replicas\", 5)))\n        .restorePatch(Map.of(\"spec\", Map.of(\"replicas\", 3)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\neks.NewKubernetesPatch(this, jsii.String(\"hello-kub-deployment-label\"), &kubernetesPatchProps{\n\tcluster: cluster,\n\tresourceName: jsii.String(\"deployment/hello-kubernetes\"),\n\tapplyPatch: map[string]interface{}{\n\t\t\"spec\": map[string]*f64{\n\t\t\t\"replicas\": jsii.Number(5),\n\t\t},\n\t},\n\trestorePatch: map[string]interface{}{\n\t\t\"spec\": map[string]*f64{\n\t\t\t\"replicas\": jsii.Number(3),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nnew eks.KubernetesPatch(this, 'hello-kub-deployment-label', {\n  cluster,\n  resourceName: \"deployment/hello-kubernetes\",\n  applyPatch: { spec: { replicas: 5 } },\n  restorePatch: { spec: { replicas: 3 } },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.KubernetesPatch"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesPatch",
        "@aws-cdk/aws-eks.KubernetesPatchProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew eks.KubernetesPatch(this, 'hello-kub-deployment-label', {\n  cluster,\n  resourceName: \"deployment/hello-kubernetes\",\n  applyPatch: { spec: { replicas: 5 } },\n  restorePatch: { spec: { replicas: 3 } },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6ee8677baebf5b880f7c82c45239e98fead70dfbcf24ba14624291a85a135c04"
    },
    "b3cc85866d1768faacc10b008fbb6442f07e3449f2059ce2cdb3e230c211e9fe": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\neks.KubernetesPatch(self, \"hello-kub-deployment-label\",\n    cluster=cluster,\n    resource_name=\"deployment/hello-kubernetes\",\n    apply_patch={\"spec\": {\"replicas\": 5}},\n    restore_patch={\"spec\": {\"replicas\": 3}}\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nnew KubernetesPatch(this, \"hello-kub-deployment-label\", new KubernetesPatchProps {\n    Cluster = cluster,\n    ResourceName = \"deployment/hello-kubernetes\",\n    ApplyPatch = new Dictionary<string, object> { { \"spec\", new Dictionary<string, int> { { \"replicas\", 5 } } } },\n    RestorePatch = new Dictionary<string, object> { { \"spec\", new Dictionary<string, int> { { \"replicas\", 3 } } } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nKubernetesPatch.Builder.create(this, \"hello-kub-deployment-label\")\n        .cluster(cluster)\n        .resourceName(\"deployment/hello-kubernetes\")\n        .applyPatch(Map.of(\"spec\", Map.of(\"replicas\", 5)))\n        .restorePatch(Map.of(\"spec\", Map.of(\"replicas\", 3)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\neks.NewKubernetesPatch(this, jsii.String(\"hello-kub-deployment-label\"), &kubernetesPatchProps{\n\tcluster: cluster,\n\tresourceName: jsii.String(\"deployment/hello-kubernetes\"),\n\tapplyPatch: map[string]interface{}{\n\t\t\"spec\": map[string]*f64{\n\t\t\t\"replicas\": jsii.Number(5),\n\t\t},\n\t},\n\trestorePatch: map[string]interface{}{\n\t\t\"spec\": map[string]*f64{\n\t\t\t\"replicas\": jsii.Number(3),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\nnew eks.KubernetesPatch(this, 'hello-kub-deployment-label', {\n  cluster,\n  resourceName: \"deployment/hello-kubernetes\",\n  applyPatch: { spec: { replicas: 5 } },\n  restorePatch: { spec: { replicas: 3 } },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.KubernetesPatchProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.KubernetesPatch",
        "@aws-cdk/aws-eks.KubernetesPatchProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew eks.KubernetesPatch(this, 'hello-kub-deployment-label', {\n  cluster,\n  resourceName: \"deployment/hello-kubernetes\",\n  applyPatch: { spec: { replicas: 5 } },\n  restorePatch: { spec: { replicas: 3 } },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6ee8677baebf5b880f7c82c45239e98fead70dfbcf24ba14624291a85a135c04"
    },
    "18fbe4cd442c473ced6d688f9b774d08797f5c2a2178749788d2e051ca34104b": {
      "translations": {
        "python": {
          "source": "cluster = eks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    default_capacity_type=eks.DefaultCapacityType.EC2\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster = new Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    DefaultCapacityType = DefaultCapacityType.EC2\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster = Cluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .defaultCapacityType(DefaultCapacityType.EC2)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tdefaultCapacityType: eks.defaultCapacityType_EC2,\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacityType: eks.DefaultCapacityType.EC2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.KubernetesVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.DefaultCapacityType",
        "@aws-cdk/aws-eks.DefaultCapacityType#EC2",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacityType: eks.DefaultCapacityType.EC2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "1436e7d7e3bdc21e19bc93e04326f5be1da529b11e30056302fb16dde20ac54a"
    },
    "3d55fec44db857a3e04b72e7b31842d64d4f64ae6062f7f363df1bcf66eda420": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n\nuser_data = \"\"\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n\"\"\"\nlt = ec2.CfnLaunchTemplate(self, \"LaunchTemplate\",\n    launch_template_data=ec2.CfnLaunchTemplate.LaunchTemplateDataProperty(\n        instance_type=\"t3.small\",\n        user_data=Fn.base64(user_data)\n    )\n)\n\ncluster.add_nodegroup_capacity(\"extra-ng\",\n    launch_template_spec=eks.LaunchTemplateSpec(\n        id=lt.ref,\n        version=lt.attr_latest_version_number\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\nstring userData = @\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"\"==MYBOUNDARY==\"\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"\"us-ascii\"\"\n\n#!/bin/bash\necho \"\"Running custom user data script\"\"\n\n--==MYBOUNDARY==--\\\n\";\nCfnLaunchTemplate lt = new CfnLaunchTemplate(this, \"LaunchTemplate\", new CfnLaunchTemplateProps {\n    LaunchTemplateData = new LaunchTemplateDataProperty {\n        InstanceType = \"t3.small\",\n        UserData = Fn.Base64(userData)\n    }\n});\n\ncluster.AddNodegroupCapacity(\"extra-ng\", new NodegroupOptions {\n    LaunchTemplateSpec = new LaunchTemplateSpec {\n        Id = lt.Ref,\n        Version = lt.AttrLatestVersionNumber\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\nString userData = \"MIME-Version: 1.0\\nContent-Type: multipart/mixed; boundary=\\\"==MYBOUNDARY==\\\"\\n\\n--==MYBOUNDARY==\\nContent-Type: text/x-shellscript; charset=\\\"us-ascii\\\"\\n\\n#!/bin/bash\\necho \\\"Running custom user data script\\\"\\n\\n--==MYBOUNDARY==--\\\\\\n\";\nCfnLaunchTemplate lt = CfnLaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .launchTemplateData(LaunchTemplateDataProperty.builder()\n                .instanceType(\"t3.small\")\n                .userData(Fn.base64(userData))\n                .build())\n        .build();\n\ncluster.addNodegroupCapacity(\"extra-ng\", NodegroupOptions.builder()\n        .launchTemplateSpec(LaunchTemplateSpec.builder()\n                .id(lt.getRef())\n                .version(lt.getAttrLatestVersionNumber())\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\nuserData := \"MIME-Version: 1.0\\nContent-Type: multipart/mixed; boundary=\\\"==MYBOUNDARY==\\\"\\n\\n--==MYBOUNDARY==\\nContent-Type: text/x-shellscript; charset=\\\"us-ascii\\\"\\n\\n#!/bin/bash\\necho \\\"Running custom user data script\\\"\\n\\n--==MYBOUNDARY==--\\\\\\n\"\nlt := ec2.NewCfnLaunchTemplate(this, jsii.String(\"LaunchTemplate\"), &cfnLaunchTemplateProps{\n\tlaunchTemplateData: &launchTemplateDataProperty{\n\t\tinstanceType: jsii.String(\"t3.small\"),\n\t\tuserData: fn.base64(userData),\n\t},\n})\n\ncluster.addNodegroupCapacity(jsii.String(\"extra-ng\"), &nodegroupOptions{\n\tlaunchTemplateSpec: &launchTemplateSpec{\n\t\tid: lt.ref,\n\t\tversion: lt.attrLatestVersionNumber,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.LaunchTemplateSpec"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate",
        "@aws-cdk/aws-ec2.CfnLaunchTemplate#attrLatestVersionNumber",
        "@aws-cdk/aws-ec2.CfnLaunchTemplateProps",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.LaunchTemplateSpec",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Fn#base64"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "14": 1,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "5e2c19df484280fa19166be98c4ac8d6f1f588e07a0f36bacee08116daa72c27"
    },
    "ff0d2f5046e9f1f1afd8d7072d65095f266dd172fbb5461df438f5c14e306807": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_auto_scaling_group_capacity(\"BottlerocketNodes\",\n    instance_type=ec2.InstanceType(\"t3.small\"),\n    min_capacity=2,\n    machine_image_type=eks.MachineImageType.BOTTLEROCKET\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddAutoScalingGroupCapacity(\"BottlerocketNodes\", new AutoScalingGroupCapacityOptions {\n    InstanceType = new InstanceType(\"t3.small\"),\n    MinCapacity = 2,\n    MachineImageType = MachineImageType.BOTTLEROCKET\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addAutoScalingGroupCapacity(\"BottlerocketNodes\", AutoScalingGroupCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t3.small\"))\n        .minCapacity(2)\n        .machineImageType(MachineImageType.BOTTLEROCKET)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addAutoScalingGroupCapacity(jsii.String(\"BottlerocketNodes\"), &autoScalingGroupCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.small\")),\n\tminCapacity: jsii.Number(2),\n\tmachineImageType: eks.machineImageType_BOTTLEROCKET,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addAutoScalingGroupCapacity('BottlerocketNodes', {\n  instanceType: new ec2.InstanceType('t3.small'),\n  minCapacity:  2,\n  machineImageType: eks.MachineImageType.BOTTLEROCKET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.MachineImageType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.AutoScalingGroupCapacityOptions",
        "@aws-cdk/aws-eks.Cluster#addAutoScalingGroupCapacity",
        "@aws-cdk/aws-eks.MachineImageType",
        "@aws-cdk/aws-eks.MachineImageType#BOTTLEROCKET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addAutoScalingGroupCapacity('BottlerocketNodes', {\n  instanceType: new ec2.InstanceType('t3.small'),\n  minCapacity:  2,\n  machineImageType: eks.MachineImageType.BOTTLEROCKET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4b82854d6574fffddcc9e3e453f5d5cdf7fa68d17295288dbd102dfb26579f61"
    },
    "b3bd744082544ed89ae779bbb63cbae898fc3bcc837dce472018ddeb81fe0cfa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_eks as eks\nimport aws_cdk.aws_iam as iam\n\n# cluster: eks.Cluster\n# instance_type: ec2.InstanceType\n# role: iam.Role\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n\nnodegroup = eks.Nodegroup(self, \"MyNodegroup\",\n    cluster=cluster,\n\n    # the properties below are optional\n    ami_type=eks.NodegroupAmiType.AL2_X86_64,\n    capacity_type=eks.CapacityType.SPOT,\n    desired_size=123,\n    disk_size=123,\n    force_update=False,\n    instance_type=instance_type,\n    instance_types=[instance_type],\n    labels={\n        \"labels_key\": \"labels\"\n    },\n    launch_template_spec=eks.LaunchTemplateSpec(\n        id=\"id\",\n\n        # the properties below are optional\n        version=\"version\"\n    ),\n    max_size=123,\n    min_size=123,\n    nodegroup_name=\"nodegroupName\",\n    node_role=role,\n    release_version=\"releaseVersion\",\n    remote_access=eks.NodegroupRemoteAccess(\n        ssh_key_name=\"sshKeyName\",\n\n        # the properties below are optional\n        source_security_groups=[security_group]\n    ),\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    tags={\n        \"tags_key\": \"tags\"\n    },\n    taints=[eks.TaintSpec(\n        effect=eks.TaintEffect.NO_SCHEDULE,\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EKS;\nusing Amazon.CDK.AWS.IAM;\n\nCluster cluster;\nInstanceType instanceType;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\n\nNodegroup nodegroup = new Nodegroup(this, \"MyNodegroup\", new NodegroupProps {\n    Cluster = cluster,\n\n    // the properties below are optional\n    AmiType = NodegroupAmiType.AL2_X86_64,\n    CapacityType = CapacityType.SPOT,\n    DesiredSize = 123,\n    DiskSize = 123,\n    ForceUpdate = false,\n    InstanceType = instanceType,\n    InstanceTypes = new [] { instanceType },\n    Labels = new Dictionary<string, string> {\n        { \"labelsKey\", \"labels\" }\n    },\n    LaunchTemplateSpec = new LaunchTemplateSpec {\n        Id = \"id\",\n\n        // the properties below are optional\n        Version = \"version\"\n    },\n    MaxSize = 123,\n    MinSize = 123,\n    NodegroupName = \"nodegroupName\",\n    NodeRole = role,\n    ReleaseVersion = \"releaseVersion\",\n    RemoteAccess = new NodegroupRemoteAccess {\n        SshKeyName = \"sshKeyName\",\n\n        // the properties below are optional\n        SourceSecurityGroups = new [] { securityGroup }\n    },\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    Tags = new Dictionary<string, string> {\n        { \"tagsKey\", \"tags\" }\n    },\n    Taints = new [] { new TaintSpec {\n        Effect = TaintEffect.NO_SCHEDULE,\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.eks.*;\nimport software.amazon.awscdk.services.iam.*;\n\nCluster cluster;\nInstanceType instanceType;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\n\nNodegroup nodegroup = Nodegroup.Builder.create(this, \"MyNodegroup\")\n        .cluster(cluster)\n\n        // the properties below are optional\n        .amiType(NodegroupAmiType.AL2_X86_64)\n        .capacityType(CapacityType.SPOT)\n        .desiredSize(123)\n        .diskSize(123)\n        .forceUpdate(false)\n        .instanceType(instanceType)\n        .instanceTypes(List.of(instanceType))\n        .labels(Map.of(\n                \"labelsKey\", \"labels\"))\n        .launchTemplateSpec(LaunchTemplateSpec.builder()\n                .id(\"id\")\n\n                // the properties below are optional\n                .version(\"version\")\n                .build())\n        .maxSize(123)\n        .minSize(123)\n        .nodegroupName(\"nodegroupName\")\n        .nodeRole(role)\n        .releaseVersion(\"releaseVersion\")\n        .remoteAccess(NodegroupRemoteAccess.builder()\n                .sshKeyName(\"sshKeyName\")\n\n                // the properties below are optional\n                .sourceSecurityGroups(List.of(securityGroup))\n                .build())\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .tags(Map.of(\n                \"tagsKey\", \"tags\"))\n        .taints(List.of(TaintSpec.builder()\n                .effect(TaintEffect.NO_SCHEDULE)\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import eks \"github.com/aws-samples/dummy/awscdkawseks\"import iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar cluster cluster\nvar instanceType instanceType\nvar role role\nvar securityGroup securityGroup\nvar subnet subnet\nvar subnetFilter subnetFilter\nnodegroup := eks.NewNodegroup(this, jsii.String(\"MyNodegroup\"), &nodegroupProps{\n\tcluster: cluster,\n\n\t// the properties below are optional\n\tamiType: eks.nodegroupAmiType_AL2_X86_64,\n\tcapacityType: eks.capacityType_SPOT,\n\tdesiredSize: jsii.Number(123),\n\tdiskSize: jsii.Number(123),\n\tforceUpdate: jsii.Boolean(false),\n\tinstanceType: instanceType,\n\tinstanceTypes: []*instanceType{\n\t\tinstanceType,\n\t},\n\tlabels: map[string]*string{\n\t\t\"labelsKey\": jsii.String(\"labels\"),\n\t},\n\tlaunchTemplateSpec: &launchTemplateSpec{\n\t\tid: jsii.String(\"id\"),\n\n\t\t// the properties below are optional\n\t\tversion: jsii.String(\"version\"),\n\t},\n\tmaxSize: jsii.Number(123),\n\tminSize: jsii.Number(123),\n\tnodegroupName: jsii.String(\"nodegroupName\"),\n\tnodeRole: role,\n\treleaseVersion: jsii.String(\"releaseVersion\"),\n\tremoteAccess: &nodegroupRemoteAccess{\n\t\tsshKeyName: jsii.String(\"sshKeyName\"),\n\n\t\t// the properties below are optional\n\t\tsourceSecurityGroups: []iSecurityGroup{\n\t\t\tsecurityGroup,\n\t\t},\n\t},\n\tsubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n\ttags: map[string]*string{\n\t\t\"tagsKey\": jsii.String(\"tags\"),\n\t},\n\ttaints: []taintSpec{\n\t\t&taintSpec{\n\t\t\teffect: eks.taintEffect_NO_SCHEDULE,\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const cluster: eks.Cluster;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\nconst nodegroup = new eks.Nodegroup(this, 'MyNodegroup', {\n  cluster: cluster,\n\n  // the properties below are optional\n  amiType: eks.NodegroupAmiType.AL2_X86_64,\n  capacityType: eks.CapacityType.SPOT,\n  desiredSize: 123,\n  diskSize: 123,\n  forceUpdate: false,\n  instanceType: instanceType,\n  instanceTypes: [instanceType],\n  labels: {\n    labelsKey: 'labels',\n  },\n  launchTemplateSpec: {\n    id: 'id',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  maxSize: 123,\n  minSize: 123,\n  nodegroupName: 'nodegroupName',\n  nodeRole: role,\n  releaseVersion: 'releaseVersion',\n  remoteAccess: {\n    sshKeyName: 'sshKeyName',\n\n    // the properties below are optional\n    sourceSecurityGroups: [securityGroup],\n  },\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  tags: {\n    tagsKey: 'tags',\n  },\n  taints: [{\n    effect: eks.TaintEffect.NO_SCHEDULE,\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.Nodegroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-eks.CapacityType",
        "@aws-cdk/aws-eks.CapacityType#SPOT",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.LaunchTemplateSpec",
        "@aws-cdk/aws-eks.Nodegroup",
        "@aws-cdk/aws-eks.NodegroupAmiType",
        "@aws-cdk/aws-eks.NodegroupAmiType#AL2_X86_64",
        "@aws-cdk/aws-eks.NodegroupProps",
        "@aws-cdk/aws-eks.NodegroupRemoteAccess",
        "@aws-cdk/aws-eks.TaintEffect",
        "@aws-cdk/aws-eks.TaintEffect#NO_SCHEDULE",
        "@aws-cdk/aws-iam.IRole",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const cluster: eks.Cluster;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst nodegroup = new eks.Nodegroup(this, 'MyNodegroup', {\n  cluster: cluster,\n\n  // the properties below are optional\n  amiType: eks.NodegroupAmiType.AL2_X86_64,\n  capacityType: eks.CapacityType.SPOT,\n  desiredSize: 123,\n  diskSize: 123,\n  forceUpdate: false,\n  instanceType: instanceType,\n  instanceTypes: [instanceType],\n  labels: {\n    labelsKey: 'labels',\n  },\n  launchTemplateSpec: {\n    id: 'id',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  maxSize: 123,\n  minSize: 123,\n  nodegroupName: 'nodegroupName',\n  nodeRole: role,\n  releaseVersion: 'releaseVersion',\n  remoteAccess: {\n    sshKeyName: 'sshKeyName',\n\n    // the properties below are optional\n    sourceSecurityGroups: [securityGroup],\n  },\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  tags: {\n    tagsKey: 'tags',\n  },\n  taints: [{\n    effect: eks.TaintEffect.NO_SCHEDULE,\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 16,
        "75": 78,
        "91": 2,
        "104": 1,
        "130": 6,
        "153": 6,
        "169": 6,
        "192": 6,
        "193": 7,
        "194": 9,
        "197": 1,
        "225": 7,
        "242": 7,
        "243": 7,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 35,
        "290": 1
      },
      "fqnsFingerprint": "f03ba8ab730808347f4eb480a9c148043db51a2be6e9617fa6cb42e29adb134f"
    },
    "7f4196255dc9b2ac8cc0f3e4ec2a7962efb95649558d0917b46366607d89c9f4": {
      "translations": {
        "python": {
          "source": "cluster = eks.Cluster(self, \"HelloEKS\",\n    version=eks.KubernetesVersion.V1_22,\n    default_capacity=0\n)\n\ncluster.add_nodegroup_capacity(\"custom-node-group\",\n    instance_types=[ec2.InstanceType(\"m5.large\")],\n    min_size=4,\n    disk_size=100,\n    ami_type=eks.NodegroupAmiType.AL2_X86_64_GPU\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster = new Cluster(this, \"HelloEKS\", new ClusterProps {\n    Version = KubernetesVersion.V1_22,\n    DefaultCapacity = 0\n});\n\ncluster.AddNodegroupCapacity(\"custom-node-group\", new NodegroupOptions {\n    InstanceTypes = new [] { new InstanceType(\"m5.large\") },\n    MinSize = 4,\n    DiskSize = 100,\n    AmiType = NodegroupAmiType.AL2_X86_64_GPU\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster = Cluster.Builder.create(this, \"HelloEKS\")\n        .version(KubernetesVersion.V1_22)\n        .defaultCapacity(0)\n        .build();\n\ncluster.addNodegroupCapacity(\"custom-node-group\", NodegroupOptions.builder()\n        .instanceTypes(List.of(new InstanceType(\"m5.large\")))\n        .minSize(4)\n        .diskSize(100)\n        .amiType(NodegroupAmiType.AL2_X86_64_GPU)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "cluster := eks.NewCluster(this, jsii.String(\"HelloEKS\"), &clusterProps{\n\tversion: eks.kubernetesVersion_V1_22(),\n\tdefaultCapacity: jsii.Number(0),\n})\n\ncluster.addNodegroupCapacity(jsii.String(\"custom-node-group\"), &nodegroupOptions{\n\tinstanceTypes: []instanceType{\n\t\tec2.NewInstanceType(jsii.String(\"m5.large\")),\n\t},\n\tminSize: jsii.Number(4),\n\tdiskSize: jsii.Number(100),\n\tamiType: eks.nodegroupAmiType_AL2_X86_64_GPU,\n})",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacity: 0,\n});\n\ncluster.addNodegroupCapacity('custom-node-group', {\n  instanceTypes: [new ec2.InstanceType('m5.large')],\n  minSize: 4,\n  diskSize: 100,\n  amiType: eks.NodegroupAmiType.AL2_X86_64_GPU,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.NodegroupAmiType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.ClusterProps",
        "@aws-cdk/aws-eks.KubernetesVersion",
        "@aws-cdk/aws-eks.KubernetesVersion#V1_22",
        "@aws-cdk/aws-eks.NodegroupAmiType",
        "@aws-cdk/aws-eks.NodegroupAmiType#AL2_X86_64_GPU",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "constructs.Construct"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new eks.Cluster(this, 'HelloEKS', {\n  version: eks.KubernetesVersion.V1_22,\n  defaultCapacity: 0,\n});\n\ncluster.addNodegroupCapacity('custom-node-group', {\n  instanceTypes: [new ec2.InstanceType('m5.large')],\n  minSize: 4,\n  diskSize: 100,\n  amiType: eks.NodegroupAmiType.AL2_X86_64_GPU,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 19,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "f90a18cbdd3d7c1cb0e95c529dd9e9b7cb69104ab066a542b2f17a884338347a"
    },
    "e3f7ef786205225f3285ab6860f0d1086f206b8a3a20169ac75cb33902a4ce61": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_nodegroup_capacity(\"extra-ng-spot\",\n    instance_types=[\n        ec2.InstanceType(\"c5.large\"),\n        ec2.InstanceType(\"c5a.large\"),\n        ec2.InstanceType(\"c5d.large\")\n    ],\n    min_size=3,\n    capacity_type=eks.CapacityType.SPOT\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddNodegroupCapacity(\"extra-ng-spot\", new NodegroupOptions {\n    InstanceTypes = new [] {\n        new InstanceType(\"c5.large\"),\n        new InstanceType(\"c5a.large\"),\n        new InstanceType(\"c5d.large\") },\n    MinSize = 3,\n    CapacityType = CapacityType.SPOT\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addNodegroupCapacity(\"extra-ng-spot\", NodegroupOptions.builder()\n        .instanceTypes(List.of(\n            new InstanceType(\"c5.large\"),\n            new InstanceType(\"c5a.large\"),\n            new InstanceType(\"c5d.large\")))\n        .minSize(3)\n        .capacityType(CapacityType.SPOT)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addNodegroupCapacity(jsii.String(\"extra-ng-spot\"), &nodegroupOptions{\n\tinstanceTypes: []instanceType{\n\t\tec2.NewInstanceType(jsii.String(\"c5.large\")),\n\t\tec2.NewInstanceType(jsii.String(\"c5a.large\")),\n\t\tec2.NewInstanceType(jsii.String(\"c5d.large\")),\n\t},\n\tminSize: jsii.Number(3),\n\tcapacityType: eks.capacityType_SPOT,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addNodegroupCapacity('extra-ng-spot', {\n  instanceTypes: [\n    new ec2.InstanceType('c5.large'),\n    new ec2.InstanceType('c5a.large'),\n    new ec2.InstanceType('c5d.large'),\n  ],\n  minSize: 3,\n  capacityType: eks.CapacityType.SPOT,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.NodegroupOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.CapacityType",
        "@aws-cdk/aws-eks.CapacityType#SPOT",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.NodegroupOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addNodegroupCapacity('extra-ng-spot', {\n  instanceTypes: [\n    new ec2.InstanceType('c5.large'),\n    new ec2.InstanceType('c5a.large'),\n    new ec2.InstanceType('c5d.large'),\n  ],\n  minSize: 3,\n  capacityType: eks.CapacityType.SPOT,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 17,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "646a397bc5ab26e96b337300eb4e0440604579eaf89a1d50129ee6801483d6a4"
    },
    "da6c5a6fa99e5180dc6a4082ead71e8f7362747e24b78614722dc43b336a6248": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_eks as eks\nimport aws_cdk.aws_iam as iam\n\n# cluster: eks.Cluster\n# instance_type: ec2.InstanceType\n# role: iam.Role\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n\nnodegroup_props = eks.NodegroupProps(\n    cluster=cluster,\n\n    # the properties below are optional\n    ami_type=eks.NodegroupAmiType.AL2_X86_64,\n    capacity_type=eks.CapacityType.SPOT,\n    desired_size=123,\n    disk_size=123,\n    force_update=False,\n    instance_type=instance_type,\n    instance_types=[instance_type],\n    labels={\n        \"labels_key\": \"labels\"\n    },\n    launch_template_spec=eks.LaunchTemplateSpec(\n        id=\"id\",\n\n        # the properties below are optional\n        version=\"version\"\n    ),\n    max_size=123,\n    min_size=123,\n    nodegroup_name=\"nodegroupName\",\n    node_role=role,\n    release_version=\"releaseVersion\",\n    remote_access=eks.NodegroupRemoteAccess(\n        ssh_key_name=\"sshKeyName\",\n\n        # the properties below are optional\n        source_security_groups=[security_group]\n    ),\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    tags={\n        \"tags_key\": \"tags\"\n    },\n    taints=[eks.TaintSpec(\n        effect=eks.TaintEffect.NO_SCHEDULE,\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EKS;\nusing Amazon.CDK.AWS.IAM;\n\nCluster cluster;\nInstanceType instanceType;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\n\nNodegroupProps nodegroupProps = new NodegroupProps {\n    Cluster = cluster,\n\n    // the properties below are optional\n    AmiType = NodegroupAmiType.AL2_X86_64,\n    CapacityType = CapacityType.SPOT,\n    DesiredSize = 123,\n    DiskSize = 123,\n    ForceUpdate = false,\n    InstanceType = instanceType,\n    InstanceTypes = new [] { instanceType },\n    Labels = new Dictionary<string, string> {\n        { \"labelsKey\", \"labels\" }\n    },\n    LaunchTemplateSpec = new LaunchTemplateSpec {\n        Id = \"id\",\n\n        // the properties below are optional\n        Version = \"version\"\n    },\n    MaxSize = 123,\n    MinSize = 123,\n    NodegroupName = \"nodegroupName\",\n    NodeRole = role,\n    ReleaseVersion = \"releaseVersion\",\n    RemoteAccess = new NodegroupRemoteAccess {\n        SshKeyName = \"sshKeyName\",\n\n        // the properties below are optional\n        SourceSecurityGroups = new [] { securityGroup }\n    },\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    Tags = new Dictionary<string, string> {\n        { \"tagsKey\", \"tags\" }\n    },\n    Taints = new [] { new TaintSpec {\n        Effect = TaintEffect.NO_SCHEDULE,\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.eks.*;\nimport software.amazon.awscdk.services.iam.*;\n\nCluster cluster;\nInstanceType instanceType;\nRole role;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\n\nNodegroupProps nodegroupProps = NodegroupProps.builder()\n        .cluster(cluster)\n\n        // the properties below are optional\n        .amiType(NodegroupAmiType.AL2_X86_64)\n        .capacityType(CapacityType.SPOT)\n        .desiredSize(123)\n        .diskSize(123)\n        .forceUpdate(false)\n        .instanceType(instanceType)\n        .instanceTypes(List.of(instanceType))\n        .labels(Map.of(\n                \"labelsKey\", \"labels\"))\n        .launchTemplateSpec(LaunchTemplateSpec.builder()\n                .id(\"id\")\n\n                // the properties below are optional\n                .version(\"version\")\n                .build())\n        .maxSize(123)\n        .minSize(123)\n        .nodegroupName(\"nodegroupName\")\n        .nodeRole(role)\n        .releaseVersion(\"releaseVersion\")\n        .remoteAccess(NodegroupRemoteAccess.builder()\n                .sshKeyName(\"sshKeyName\")\n\n                // the properties below are optional\n                .sourceSecurityGroups(List.of(securityGroup))\n                .build())\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .tags(Map.of(\n                \"tagsKey\", \"tags\"))\n        .taints(List.of(TaintSpec.builder()\n                .effect(TaintEffect.NO_SCHEDULE)\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import eks \"github.com/aws-samples/dummy/awscdkawseks\"import iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar cluster cluster\nvar instanceType instanceType\nvar role role\nvar securityGroup securityGroup\nvar subnet subnet\nvar subnetFilter subnetFilter\nnodegroupProps := &nodegroupProps{\n\tcluster: cluster,\n\n\t// the properties below are optional\n\tamiType: eks.nodegroupAmiType_AL2_X86_64,\n\tcapacityType: eks.capacityType_SPOT,\n\tdesiredSize: jsii.Number(123),\n\tdiskSize: jsii.Number(123),\n\tforceUpdate: jsii.Boolean(false),\n\tinstanceType: instanceType,\n\tinstanceTypes: []*instanceType{\n\t\tinstanceType,\n\t},\n\tlabels: map[string]*string{\n\t\t\"labelsKey\": jsii.String(\"labels\"),\n\t},\n\tlaunchTemplateSpec: &launchTemplateSpec{\n\t\tid: jsii.String(\"id\"),\n\n\t\t// the properties below are optional\n\t\tversion: jsii.String(\"version\"),\n\t},\n\tmaxSize: jsii.Number(123),\n\tminSize: jsii.Number(123),\n\tnodegroupName: jsii.String(\"nodegroupName\"),\n\tnodeRole: role,\n\treleaseVersion: jsii.String(\"releaseVersion\"),\n\tremoteAccess: &nodegroupRemoteAccess{\n\t\tsshKeyName: jsii.String(\"sshKeyName\"),\n\n\t\t// the properties below are optional\n\t\tsourceSecurityGroups: []iSecurityGroup{\n\t\t\tsecurityGroup,\n\t\t},\n\t},\n\tsubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n\ttags: map[string]*string{\n\t\t\"tagsKey\": jsii.String(\"tags\"),\n\t},\n\ttaints: []taintSpec{\n\t\t&taintSpec{\n\t\t\teffect: eks.taintEffect_NO_SCHEDULE,\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const cluster: eks.Cluster;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\nconst nodegroupProps: eks.NodegroupProps = {\n  cluster: cluster,\n\n  // the properties below are optional\n  amiType: eks.NodegroupAmiType.AL2_X86_64,\n  capacityType: eks.CapacityType.SPOT,\n  desiredSize: 123,\n  diskSize: 123,\n  forceUpdate: false,\n  instanceType: instanceType,\n  instanceTypes: [instanceType],\n  labels: {\n    labelsKey: 'labels',\n  },\n  launchTemplateSpec: {\n    id: 'id',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  maxSize: 123,\n  minSize: 123,\n  nodegroupName: 'nodegroupName',\n  nodeRole: role,\n  releaseVersion: 'releaseVersion',\n  remoteAccess: {\n    sshKeyName: 'sshKeyName',\n\n    // the properties below are optional\n    sourceSecurityGroups: [securityGroup],\n  },\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  tags: {\n    tagsKey: 'tags',\n  },\n  taints: [{\n    effect: eks.TaintEffect.NO_SCHEDULE,\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.NodegroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-eks.CapacityType",
        "@aws-cdk/aws-eks.CapacityType#SPOT",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.LaunchTemplateSpec",
        "@aws-cdk/aws-eks.NodegroupAmiType",
        "@aws-cdk/aws-eks.NodegroupAmiType#AL2_X86_64",
        "@aws-cdk/aws-eks.NodegroupProps",
        "@aws-cdk/aws-eks.NodegroupRemoteAccess",
        "@aws-cdk/aws-eks.TaintEffect",
        "@aws-cdk/aws-eks.TaintEffect#NO_SCHEDULE",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const cluster: eks.Cluster;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const role: iam.Role;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst nodegroupProps: eks.NodegroupProps = {\n  cluster: cluster,\n\n  // the properties below are optional\n  amiType: eks.NodegroupAmiType.AL2_X86_64,\n  capacityType: eks.CapacityType.SPOT,\n  desiredSize: 123,\n  diskSize: 123,\n  forceUpdate: false,\n  instanceType: instanceType,\n  instanceTypes: [instanceType],\n  labels: {\n    labelsKey: 'labels',\n  },\n  launchTemplateSpec: {\n    id: 'id',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  maxSize: 123,\n  minSize: 123,\n  nodegroupName: 'nodegroupName',\n  nodeRole: role,\n  releaseVersion: 'releaseVersion',\n  remoteAccess: {\n    sshKeyName: 'sshKeyName',\n\n    // the properties below are optional\n    sourceSecurityGroups: [securityGroup],\n  },\n  subnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  tags: {\n    tagsKey: 'tags',\n  },\n  taints: [{\n    effect: eks.TaintEffect.NO_SCHEDULE,\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 15,
        "75": 78,
        "91": 2,
        "130": 6,
        "153": 7,
        "169": 7,
        "192": 6,
        "193": 7,
        "194": 8,
        "225": 7,
        "242": 7,
        "243": 7,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 35,
        "290": 1
      },
      "fqnsFingerprint": "d65ab0d5f89214f1b2d5fb4c1e03d2e1fce9dd6fd8d77ee70db6b0f6bd135b72"
    },
    "871bd694a872a9e7bd4781fe6ac0d2936b2903cf53699e4970f88fbf7b90cbd6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_eks as eks\n\n# security_group: ec2.SecurityGroup\n\nnodegroup_remote_access = eks.NodegroupRemoteAccess(\n    ssh_key_name=\"sshKeyName\",\n\n    # the properties below are optional\n    source_security_groups=[security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EKS;\n\nSecurityGroup securityGroup;\n\nNodegroupRemoteAccess nodegroupRemoteAccess = new NodegroupRemoteAccess {\n    SshKeyName = \"sshKeyName\",\n\n    // the properties below are optional\n    SourceSecurityGroups = new [] { securityGroup }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.eks.*;\n\nSecurityGroup securityGroup;\n\nNodegroupRemoteAccess nodegroupRemoteAccess = NodegroupRemoteAccess.builder()\n        .sshKeyName(\"sshKeyName\")\n\n        // the properties below are optional\n        .sourceSecurityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nvar securityGroup securityGroup\nnodegroupRemoteAccess := &nodegroupRemoteAccess{\n\tsshKeyName: jsii.String(\"sshKeyName\"),\n\n\t// the properties below are optional\n\tsourceSecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst nodegroupRemoteAccess: eks.NodegroupRemoteAccess = {\n  sshKeyName: 'sshKeyName',\n\n  // the properties below are optional\n  sourceSecurityGroups: [securityGroup],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.NodegroupRemoteAccess"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.NodegroupRemoteAccess"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst nodegroupRemoteAccess: eks.NodegroupRemoteAccess = {\n  sshKeyName: 'sshKeyName',\n\n  // the properties below are optional\n  sourceSecurityGroups: [securityGroup],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "65e4aef8294f4020e3088f88013d48d02280d0836ee23a7a660970d231a2aa21"
    },
    "50bdd0fff24f1ec3e8ef1a64bcc7f3aa853bb17031fd13dfeeca332fb877c45e": {
      "translations": {
        "python": {
          "source": "# or create a new one using an existing issuer url\n# issuer_url: str\n# you can import an existing provider\nprovider = eks.OpenIdConnectProvider.from_open_id_connect_provider_arn(self, \"Provider\", \"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\")\nprovider2 = eks.OpenIdConnectProvider(self, \"Provider\",\n    url=issuer_url\n)\n\ncluster = eks.Cluster.from_cluster_attributes(self, \"MyCluster\",\n    cluster_name=\"Cluster\",\n    open_id_connect_provider=provider,\n    kubectl_role_arn=\"arn:aws:iam::123456:role/service-role/k8sservicerole\"\n)\n\nservice_account = cluster.add_service_account(\"MyServiceAccount\")\n\nbucket = s3.Bucket(self, \"Bucket\")\nbucket.grant_read_write(service_account)",
          "version": "2"
        },
        "csharp": {
          "source": "// or create a new one using an existing issuer url\nstring issuerUrl;\n// you can import an existing provider\nIOpenIdConnectProvider provider = OpenIdConnectProvider.FromOpenIdConnectProviderArn(this, \"Provider\", \"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\");\nOpenIdConnectProvider provider2 = new OpenIdConnectProvider(this, \"Provider\", new OpenIdConnectProviderProps {\n    Url = issuerUrl\n});\n\nICluster cluster = Cluster.FromClusterAttributes(this, \"MyCluster\", new ClusterAttributes {\n    ClusterName = \"Cluster\",\n    OpenIdConnectProvider = provider,\n    KubectlRoleArn = \"arn:aws:iam::123456:role/service-role/k8sservicerole\"\n});\n\nServiceAccount serviceAccount = cluster.AddServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.GrantReadWrite(serviceAccount);",
          "version": "1"
        },
        "java": {
          "source": "// or create a new one using an existing issuer url\nString issuerUrl;\n// you can import an existing provider\nIOpenIdConnectProvider provider = OpenIdConnectProvider.fromOpenIdConnectProviderArn(this, \"Provider\", \"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\");\nOpenIdConnectProvider provider2 = OpenIdConnectProvider.Builder.create(this, \"Provider\")\n        .url(issuerUrl)\n        .build();\n\nICluster cluster = Cluster.fromClusterAttributes(this, \"MyCluster\", ClusterAttributes.builder()\n        .clusterName(\"Cluster\")\n        .openIdConnectProvider(provider)\n        .kubectlRoleArn(\"arn:aws:iam::123456:role/service-role/k8sservicerole\")\n        .build());\n\nServiceAccount serviceAccount = cluster.addServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.grantReadWrite(serviceAccount);",
          "version": "1"
        },
        "go": {
          "source": "// or create a new one using an existing issuer url\nvar issuerUrl string// you can import an existing provider\nprovider := eks.openIdConnectProvider.fromOpenIdConnectProviderArn(this, jsii.String(\"Provider\"), jsii.String(\"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\"))\nprovider2 := eks.NewOpenIdConnectProvider(this, jsii.String(\"Provider\"), &openIdConnectProviderProps{\n\turl: issuerUrl,\n})\n\ncluster := eks.cluster.fromClusterAttributes(this, jsii.String(\"MyCluster\"), &clusterAttributes{\n\tclusterName: jsii.String(\"Cluster\"),\n\topenIdConnectProvider: provider,\n\tkubectlRoleArn: jsii.String(\"arn:aws:iam::123456:role/service-role/k8sservicerole\"),\n})\n\nserviceAccount := cluster.addServiceAccount(jsii.String(\"MyServiceAccount\"))\n\nbucket := s3.NewBucket(this, jsii.String(\"Bucket\"))\nbucket.grantReadWrite(serviceAccount)",
          "version": "1"
        },
        "$": {
          "source": "// you can import an existing provider\nconst provider = eks.OpenIdConnectProvider.fromOpenIdConnectProviderArn(this, 'Provider', 'arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC');\n\n// or create a new one using an existing issuer url\ndeclare const issuerUrl: string;\nconst provider2 = new eks.OpenIdConnectProvider(this, 'Provider', {\n  url: issuerUrl,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  clusterName: 'Cluster',\n  openIdConnectProvider: provider,\n  kubectlRoleArn: 'arn:aws:iam::123456:role/service-role/k8sservicerole',\n});\n\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.OpenIdConnectProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#fromClusterAttributes",
        "@aws-cdk/aws-eks.ClusterAttributes",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.ICluster#addServiceAccount",
        "@aws-cdk/aws-eks.OpenIdConnectProvider",
        "@aws-cdk/aws-eks.OpenIdConnectProviderProps",
        "@aws-cdk/aws-eks.ServiceAccount",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IOpenIdConnectProvider",
        "@aws-cdk/aws-iam.OpenIdConnectProvider#fromOpenIdConnectProviderArn",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#grantReadWrite",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// or create a new one using an existing issuer url\ndeclare const issuerUrl: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// you can import an existing provider\nconst provider = eks.OpenIdConnectProvider.fromOpenIdConnectProviderArn(this, 'Provider', 'arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC');\nconst provider2 = new eks.OpenIdConnectProvider(this, 'Provider', {\n  url: issuerUrl,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  clusterName: 'Cluster',\n  openIdConnectProvider: provider,\n  kubectlRoleArn: 'arn:aws:iam::123456:role/service-role/k8sservicerole',\n});\n\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 27,
        "104": 4,
        "130": 1,
        "143": 1,
        "193": 2,
        "194": 8,
        "196": 4,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9bffb8b906738e3191bae1feb0517a9a0ca145b512972beeeecf34c4168c9e5e"
    },
    "8ef45dc8d8caca11af44e2b73d2c05b83120610d5190c02d0d70d7cd0e4ef0d8": {
      "translations": {
        "python": {
          "source": "# or create a new one using an existing issuer url\n# issuer_url: str\n# you can import an existing provider\nprovider = eks.OpenIdConnectProvider.from_open_id_connect_provider_arn(self, \"Provider\", \"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\")\nprovider2 = eks.OpenIdConnectProvider(self, \"Provider\",\n    url=issuer_url\n)\n\ncluster = eks.Cluster.from_cluster_attributes(self, \"MyCluster\",\n    cluster_name=\"Cluster\",\n    open_id_connect_provider=provider,\n    kubectl_role_arn=\"arn:aws:iam::123456:role/service-role/k8sservicerole\"\n)\n\nservice_account = cluster.add_service_account(\"MyServiceAccount\")\n\nbucket = s3.Bucket(self, \"Bucket\")\nbucket.grant_read_write(service_account)",
          "version": "2"
        },
        "csharp": {
          "source": "// or create a new one using an existing issuer url\nstring issuerUrl;\n// you can import an existing provider\nIOpenIdConnectProvider provider = OpenIdConnectProvider.FromOpenIdConnectProviderArn(this, \"Provider\", \"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\");\nOpenIdConnectProvider provider2 = new OpenIdConnectProvider(this, \"Provider\", new OpenIdConnectProviderProps {\n    Url = issuerUrl\n});\n\nICluster cluster = Cluster.FromClusterAttributes(this, \"MyCluster\", new ClusterAttributes {\n    ClusterName = \"Cluster\",\n    OpenIdConnectProvider = provider,\n    KubectlRoleArn = \"arn:aws:iam::123456:role/service-role/k8sservicerole\"\n});\n\nServiceAccount serviceAccount = cluster.AddServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.GrantReadWrite(serviceAccount);",
          "version": "1"
        },
        "java": {
          "source": "// or create a new one using an existing issuer url\nString issuerUrl;\n// you can import an existing provider\nIOpenIdConnectProvider provider = OpenIdConnectProvider.fromOpenIdConnectProviderArn(this, \"Provider\", \"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\");\nOpenIdConnectProvider provider2 = OpenIdConnectProvider.Builder.create(this, \"Provider\")\n        .url(issuerUrl)\n        .build();\n\nICluster cluster = Cluster.fromClusterAttributes(this, \"MyCluster\", ClusterAttributes.builder()\n        .clusterName(\"Cluster\")\n        .openIdConnectProvider(provider)\n        .kubectlRoleArn(\"arn:aws:iam::123456:role/service-role/k8sservicerole\")\n        .build());\n\nServiceAccount serviceAccount = cluster.addServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.grantReadWrite(serviceAccount);",
          "version": "1"
        },
        "go": {
          "source": "// or create a new one using an existing issuer url\nvar issuerUrl string// you can import an existing provider\nprovider := eks.openIdConnectProvider.fromOpenIdConnectProviderArn(this, jsii.String(\"Provider\"), jsii.String(\"arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC\"))\nprovider2 := eks.NewOpenIdConnectProvider(this, jsii.String(\"Provider\"), &openIdConnectProviderProps{\n\turl: issuerUrl,\n})\n\ncluster := eks.cluster.fromClusterAttributes(this, jsii.String(\"MyCluster\"), &clusterAttributes{\n\tclusterName: jsii.String(\"Cluster\"),\n\topenIdConnectProvider: provider,\n\tkubectlRoleArn: jsii.String(\"arn:aws:iam::123456:role/service-role/k8sservicerole\"),\n})\n\nserviceAccount := cluster.addServiceAccount(jsii.String(\"MyServiceAccount\"))\n\nbucket := s3.NewBucket(this, jsii.String(\"Bucket\"))\nbucket.grantReadWrite(serviceAccount)",
          "version": "1"
        },
        "$": {
          "source": "// you can import an existing provider\nconst provider = eks.OpenIdConnectProvider.fromOpenIdConnectProviderArn(this, 'Provider', 'arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC');\n\n// or create a new one using an existing issuer url\ndeclare const issuerUrl: string;\nconst provider2 = new eks.OpenIdConnectProvider(this, 'Provider', {\n  url: issuerUrl,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  clusterName: 'Cluster',\n  openIdConnectProvider: provider,\n  kubectlRoleArn: 'arn:aws:iam::123456:role/service-role/k8sservicerole',\n});\n\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.OpenIdConnectProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Cluster",
        "@aws-cdk/aws-eks.Cluster#fromClusterAttributes",
        "@aws-cdk/aws-eks.ClusterAttributes",
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.ICluster#addServiceAccount",
        "@aws-cdk/aws-eks.OpenIdConnectProvider",
        "@aws-cdk/aws-eks.OpenIdConnectProviderProps",
        "@aws-cdk/aws-eks.ServiceAccount",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IOpenIdConnectProvider",
        "@aws-cdk/aws-iam.OpenIdConnectProvider#fromOpenIdConnectProviderArn",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#grantReadWrite",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// or create a new one using an existing issuer url\ndeclare const issuerUrl: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// you can import an existing provider\nconst provider = eks.OpenIdConnectProvider.fromOpenIdConnectProviderArn(this, 'Provider', 'arn:aws:iam::123456:oidc-provider/oidc.eks.eu-west-1.amazonaws.com/id/AB123456ABC');\nconst provider2 = new eks.OpenIdConnectProvider(this, 'Provider', {\n  url: issuerUrl,\n});\n\nconst cluster = eks.Cluster.fromClusterAttributes(this, 'MyCluster', {\n  clusterName: 'Cluster',\n  openIdConnectProvider: provider,\n  kubectlRoleArn: 'arn:aws:iam::123456:role/service-role/k8sservicerole',\n});\n\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 27,
        "104": 4,
        "130": 1,
        "143": 1,
        "193": 2,
        "194": 8,
        "196": 4,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9bffb8b906738e3191bae1feb0517a9a0ca145b512972beeeecf34c4168c9e5e"
    },
    "0e6f8d6334ae1b387050f732a887cf251749cdc0b43677519458b03e6f95ba0c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nselector = eks.Selector(\n    namespace=\"namespace\",\n\n    # the properties below are optional\n    labels={\n        \"labels_key\": \"labels\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nSelector selector = new Selector {\n    Namespace = \"namespace\",\n\n    // the properties below are optional\n    Labels = new Dictionary<string, string> {\n        { \"labelsKey\", \"labels\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nSelector selector = Selector.builder()\n        .namespace(\"namespace\")\n\n        // the properties below are optional\n        .labels(Map.of(\n                \"labelsKey\", \"labels\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nselector := &selector{\n\tnamespace: jsii.String(\"namespace\"),\n\n\t// the properties below are optional\n\tlabels: map[string]*string{\n\t\t\"labelsKey\": jsii.String(\"labels\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst selector: eks.Selector = {\n  namespace: 'namespace',\n\n  // the properties below are optional\n  labels: {\n    labelsKey: 'labels',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.Selector"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.Selector"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst selector: eks.Selector = {\n  namespace: 'namespace',\n\n  // the properties below are optional\n  labels: {\n    labelsKey: 'labels',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5b98207cda3c983b07ef809f1babdc8d43f0b7142f18e69e01b0c82963fb5906"
    },
    "ff7323614b77d519cb378a435ff0228ae71343e68c636a66f1fe5afc88fcca81": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\n# add service account\nservice_account = cluster.add_service_account(\"MyServiceAccount\")\n\nbucket = s3.Bucket(self, \"Bucket\")\nbucket.grant_read_write(service_account)\n\nmypod = cluster.add_manifest(\"mypod\", {\n    \"api_version\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\"name\": \"mypod\"},\n    \"spec\": {\n        \"service_account_name\": service_account.service_account_name,\n        \"containers\": [{\n            \"name\": \"hello\",\n            \"image\": \"paulbouwer/hello-kubernetes:1.5\",\n            \"ports\": [{\"container_port\": 8080}]\n        }\n        ]\n    }\n})\n\n# create the resource after the service account.\nmypod.node.add_dependency(service_account)\n\n# print the IAM role arn for this service account\nCfnOutput(self, \"ServiceAccountIamRole\", value=service_account.role.role_arn)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// add service account\nServiceAccount serviceAccount = cluster.AddServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.GrantReadWrite(serviceAccount);\n\nKubernetesManifest mypod = cluster.AddManifest(\"mypod\", new Dictionary<string, object> {\n    { \"apiVersion\", \"v1\" },\n    { \"kind\", \"Pod\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"mypod\" } } },\n    { \"spec\", new Dictionary<string, object> {\n        { \"serviceAccountName\", serviceAccount.ServiceAccountName },\n        { \"containers\", new [] { new Struct {\n            Name = \"hello\",\n            Image = \"paulbouwer/hello-kubernetes:1.5\",\n            Ports = new [] { new Struct { ContainerPort = 8080 } }\n        } } }\n    } }\n});\n\n// create the resource after the service account.\nmypod.Node.AddDependency(serviceAccount);\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nnew CfnOutput(this, \"ServiceAccountIamRole\", new CfnOutputProps { Value = serviceAccount.Role.RoleArn });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// add service account\nServiceAccount serviceAccount = cluster.addServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.grantReadWrite(serviceAccount);\n\nKubernetesManifest mypod = cluster.addManifest(\"mypod\", Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"Pod\",\n        \"metadata\", Map.of(\"name\", \"mypod\"),\n        \"spec\", Map.of(\n                \"serviceAccountName\", serviceAccount.getServiceAccountName(),\n                \"containers\", List.of(Map.of(\n                        \"name\", \"hello\",\n                        \"image\", \"paulbouwer/hello-kubernetes:1.5\",\n                        \"ports\", List.of(Map.of(\"containerPort\", 8080)))))));\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nCfnOutput.Builder.create(this, \"ServiceAccountIamRole\").value(serviceAccount.getRole().getRoleArn()).build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n// add service account\nserviceAccount := cluster.addServiceAccount(jsii.String(\"MyServiceAccount\"))\n\nbucket := s3.NewBucket(this, jsii.String(\"Bucket\"))\nbucket.grantReadWrite(serviceAccount)\n\nmypod := cluster.addManifest(jsii.String(\"mypod\"), map[string]interface{}{\n\t\"apiVersion\": jsii.String(\"v1\"),\n\t\"kind\": jsii.String(\"Pod\"),\n\t\"metadata\": map[string]*string{\n\t\t\"name\": jsii.String(\"mypod\"),\n\t},\n\t\"spec\": map[string]interface{}{\n\t\t\"serviceAccountName\": serviceAccount.serviceAccountName,\n\t\t\"containers\": []map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"name\": jsii.String(\"hello\"),\n\t\t\t\t\"image\": jsii.String(\"paulbouwer/hello-kubernetes:1.5\"),\n\t\t\t\t\"ports\": []map[string]*f64{\n\t\t\t\t\tmap[string]*f64{\n\t\t\t\t\t\t\"containerPort\": jsii.Number(8080),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount)\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nNewCfnOutput(this, jsii.String(\"ServiceAccountIamRole\"), &cfnOutputProps{\n\tvalue: serviceAccount.role.roleArn,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// add service account\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n\nconst mypod = cluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    serviceAccountName: serviceAccount.serviceAccountName,\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\nnew CfnOutput(this, 'ServiceAccountIamRole', { value: serviceAccount.role.roleArn });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.ServiceAccount"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.KubernetesManifest",
        "@aws-cdk/aws-eks.ServiceAccount",
        "@aws-cdk/aws-eks.ServiceAccount#role",
        "@aws-cdk/aws-eks.ServiceAccount#serviceAccountName",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IRole#roleArn",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#grantReadWrite",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// add service account\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n\nconst mypod = cluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    serviceAccountName: serviceAccount.serviceAccountName,\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\nnew CfnOutput(this, 'ServiceAccountIamRole', { value: serviceAccount.role.roleArn });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 37,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 9,
        "196": 4,
        "197": 2,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "dc5a9adbbdf954cb2bacd6378711dc51c1fe97e9965d96aa3103b48949bc6a99"
    },
    "e8e457b4507bdb2574b688215fa5a92ba9ca531add64cb83405af3fba7237e34": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\nservice_account_options = eks.ServiceAccountOptions(\n    name=\"name\",\n    namespace=\"namespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nServiceAccountOptions serviceAccountOptions = new ServiceAccountOptions {\n    Name = \"name\",\n    Namespace = \"namespace\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nServiceAccountOptions serviceAccountOptions = ServiceAccountOptions.builder()\n        .name(\"name\")\n        .namespace(\"namespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\nserviceAccountOptions := &serviceAccountOptions{\n\tname: jsii.String(\"name\"),\n\tnamespace: jsii.String(\"namespace\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst serviceAccountOptions: eks.ServiceAccountOptions = {\n  name: 'name',\n  namespace: 'namespace',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.ServiceAccountOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ServiceAccountOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceAccountOptions: eks.ServiceAccountOptions = {\n  name: 'name',\n  namespace: 'namespace',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "bcafd6e6592587b966b47f684eac16fcc6bec987e9d52f3f9bf93a43b740c20b"
    },
    "111622474888b7ca312840e1b22f18e8837156329a9ac694ec7e9afc77ca456b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\n# cluster: eks.Cluster\n\nservice_account_props = eks.ServiceAccountProps(\n    cluster=cluster,\n\n    # the properties below are optional\n    name=\"name\",\n    namespace=\"namespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nCluster cluster;\n\nServiceAccountProps serviceAccountProps = new ServiceAccountProps {\n    Cluster = cluster,\n\n    // the properties below are optional\n    Name = \"name\",\n    Namespace = \"namespace\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nCluster cluster;\n\nServiceAccountProps serviceAccountProps = ServiceAccountProps.builder()\n        .cluster(cluster)\n\n        // the properties below are optional\n        .name(\"name\")\n        .namespace(\"namespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\n\nvar cluster cluster\nserviceAccountProps := &serviceAccountProps{\n\tcluster: cluster,\n\n\t// the properties below are optional\n\tname: jsii.String(\"name\"),\n\tnamespace: jsii.String(\"namespace\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const cluster: eks.Cluster;\nconst serviceAccountProps: eks.ServiceAccountProps = {\n  cluster: cluster,\n\n  // the properties below are optional\n  name: 'name',\n  namespace: 'namespace',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.ServiceAccountProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ICluster",
        "@aws-cdk/aws-eks.ServiceAccountProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceAccountProps: eks.ServiceAccountProps = {\n  cluster: cluster,\n\n  // the properties below are optional\n  name: 'name',\n  namespace: 'namespace',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "56211af0c2a8868b0075d44e12ddda662d23c10ac75b25dd657a722e190072fe"
    },
    "bcce29152d63955826d6986b30699c4b2d827ea96a2f4a6ca9e68fa85f50eef6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\nimport aws_cdk.core as cdk\n\nservice_load_balancer_address_options = eks.ServiceLoadBalancerAddressOptions(\n    namespace=\"namespace\",\n    timeout=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\nusing Amazon.CDK;\nServiceLoadBalancerAddressOptions serviceLoadBalancerAddressOptions = new ServiceLoadBalancerAddressOptions {\n    Namespace = \"namespace\",\n    Timeout = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\nimport software.amazon.awscdk.core.*;\n\nServiceLoadBalancerAddressOptions serviceLoadBalancerAddressOptions = ServiceLoadBalancerAddressOptions.builder()\n        .namespace(\"namespace\")\n        .timeout(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nserviceLoadBalancerAddressOptions := &serviceLoadBalancerAddressOptions{\n\tnamespace: jsii.String(\"namespace\"),\n\ttimeout: cdk.duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as cdk from '@aws-cdk/core';\nconst serviceLoadBalancerAddressOptions: eks.ServiceLoadBalancerAddressOptions = {\n  namespace: 'namespace',\n  timeout: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.ServiceLoadBalancerAddressOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.ServiceLoadBalancerAddressOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceLoadBalancerAddressOptions: eks.ServiceLoadBalancerAddressOptions = {\n  namespace: 'namespace',\n  timeout: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "610547769e1443553b610b6f431bfe73bdbbc9a327ffedcfa9002c1bd2f97ca2"
    },
    "11e64f520e94afe4dd9f6f4cc7a4a7774eed81deeac8edec8d132eabca9af35e": {
      "translations": {
        "python": {
          "source": "# cluster: eks.Cluster\n\ncluster.add_nodegroup_capacity(\"custom-node-group\",\n    instance_types=[ec2.InstanceType(\"m5.large\")],\n    taints=[eks.TaintSpec(\n        effect=eks.TaintEffect.NO_SCHEDULE,\n        key=\"foo\",\n        value=\"bar\"\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\ncluster.AddNodegroupCapacity(\"custom-node-group\", new NodegroupOptions {\n    InstanceTypes = new [] { new InstanceType(\"m5.large\") },\n    Taints = new [] { new TaintSpec {\n        Effect = TaintEffect.NO_SCHEDULE,\n        Key = \"foo\",\n        Value = \"bar\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\ncluster.addNodegroupCapacity(\"custom-node-group\", NodegroupOptions.builder()\n        .instanceTypes(List.of(new InstanceType(\"m5.large\")))\n        .taints(List.of(TaintSpec.builder()\n                .effect(TaintEffect.NO_SCHEDULE)\n                .key(\"foo\")\n                .value(\"bar\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\ncluster.addNodegroupCapacity(jsii.String(\"custom-node-group\"), &nodegroupOptions{\n\tinstanceTypes: []instanceType{\n\t\tec2.NewInstanceType(jsii.String(\"m5.large\")),\n\t},\n\ttaints: []taintSpec{\n\t\t&taintSpec{\n\t\t\teffect: eks.taintEffect_NO_SCHEDULE,\n\t\t\tkey: jsii.String(\"foo\"),\n\t\t\tvalue: jsii.String(\"bar\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\ncluster.addNodegroupCapacity('custom-node-group', {\n  instanceTypes: [new ec2.InstanceType('m5.large')],\n  taints: [\n    {\n      effect: eks.TaintEffect.NO_SCHEDULE,\n      key: 'foo',\n      value: 'bar',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.TaintEffect"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "@aws-cdk/aws-eks.TaintEffect",
        "@aws-cdk/aws-eks.TaintEffect#NO_SCHEDULE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addNodegroupCapacity('custom-node-group', {\n  instanceTypes: [new ec2.InstanceType('m5.large')],\n  taints: [\n    {\n      effect: eks.TaintEffect.NO_SCHEDULE,\n      key: 'foo',\n      value: 'bar',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2595712479728eaad0bede16f2542ac5e3e16889d632645f5df0743f6d7429a5"
    },
    "6a5c6602d8e7fc8972407debacdd2f44dd8c8e543dc4d73f34191f7e07695367": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_eks as eks\n\ntaint_spec = eks.TaintSpec(\n    effect=eks.TaintEffect.NO_SCHEDULE,\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EKS;\n\nTaintSpec taintSpec = new TaintSpec {\n    Effect = TaintEffect.NO_SCHEDULE,\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.eks.*;\n\nTaintSpec taintSpec = TaintSpec.builder()\n        .effect(TaintEffect.NO_SCHEDULE)\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import eks \"github.com/aws-samples/dummy/awscdkawseks\"\ntaintSpec := &taintSpec{\n\teffect: eks.taintEffect_NO_SCHEDULE,\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\nconst taintSpec: eks.TaintSpec = {\n  effect: eks.TaintEffect.NO_SCHEDULE,\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-eks.TaintSpec"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.TaintEffect",
        "@aws-cdk/aws-eks.TaintEffect#NO_SCHEDULE",
        "@aws-cdk/aws-eks.TaintSpec"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as eks from '@aws-cdk/aws-eks';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst taintSpec: eks.TaintSpec = {\n  effect: eks.TaintEffect.NO_SCHEDULE,\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "de59227b5ca980a3f6b28b0a65c4135368ae64526680f1a9250f9cbc1e358d6f"
    }
  }
}
